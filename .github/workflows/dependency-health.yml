name: 🔍 Dependency Health Check

on:
  schedule:
    # Run every Sunday at 10:00 UTC
    - cron: '0 10 * * 0'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of dependency check'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security
          - outdated
          - licenses

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Check for security vulnerabilities
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'security'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit pip-audit
        
    - name: 🔍 Run safety check
      run: |
        echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for known security vulnerabilities
        if safety check --json > safety_report.json; then
          echo "✅ **Safety check passed** - No known vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Safety check found issues** - See details below" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "```json" >> $GITHUB_STEP_SUMMARY
          cat safety_report.json >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 🔍 Run pip-audit
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Pip Audit Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if pip-audit --format=json --output=pip_audit.json; then
          echo "✅ **Pip audit passed** - No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Pip audit found issues** - See details below" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "```json" >> $GITHUB_STEP_SUMMARY
          cat pip_audit.json >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 🔍 Run bandit security scan
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🛡️ Bandit Security Scan" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if bandit -r aider_lint_fixer/ -f json -o bandit_report.json; then
          echo "✅ **Bandit scan passed** - No security issues in code" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Bandit found security issues** - See details below" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "```json" >> $GITHUB_STEP_SUMMARY
          cat bandit_report.json >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety_report.json
          pip_audit.json
          bandit_report.json
        retention-days: 30

  # Check for outdated dependencies
  outdated-check:
    name: 📅 Outdated Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'outdated'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pip-check
        
    - name: 📅 Check for outdated packages
      run: |
        echo "## 📅 Outdated Dependencies Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Get list of outdated packages
        if pip list --outdated --format=json > outdated.json; then
          OUTDATED_COUNT=$(cat outdated.json | jq length)
          
          if [ "$OUTDATED_COUNT" -eq 0 ]; then
            echo "✅ **All dependencies are up-to-date!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "📦 **Found $OUTDATED_COUNT outdated dependencies:**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Package | Current | Latest | Type |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|--------|------|" >> $GITHUB_STEP_SUMMARY
            
            cat outdated.json | jq -r '.[] | "| \(.name) | \(.version) | \(.latest_version) | \(.latest_filetype) |"' >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "💡 **Tip:** Dependabot will automatically create PRs for these updates" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
    - name: 🔍 Check dependency conflicts
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Dependency Conflict Check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if pip check; then
          echo "✅ **No dependency conflicts found**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Dependency conflicts detected** - See details above" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 📤 Upload outdated report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: outdated-report
        path: outdated.json
        retention-days: 30

  # Check licenses
  license-check:
    name: 📄 License Compliance
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'licenses'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install license tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pip-licenses
        
    - name: 📄 Generate license report
      run: |
        echo "## 📄 License Compliance Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Generate license summary
        pip-licenses --format=json --output-file=licenses.json
        
        # Count licenses by type
        echo "### 📊 License Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        cat licenses.json | jq -r 'group_by(.License) | .[] | "\(.[0].License): \(length) packages"' | sort | while read line; do
          echo "- $line" >> $GITHUB_STEP_SUMMARY
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Detailed License List" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Package | Version | License |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|---------|---------|" >> $GITHUB_STEP_SUMMARY
        
        cat licenses.json | jq -r '.[] | "| \(.Name) | \(.Version) | \(.License) |"' | sort >> $GITHUB_STEP_SUMMARY
        
    - name: 🚨 Check for problematic licenses
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚨 License Compliance Check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for GPL licenses (might be problematic for some use cases)
        GPL_COUNT=$(cat licenses.json | jq '[.[] | select(.License | contains("GPL"))] | length')
        
        if [ "$GPL_COUNT" -gt 0 ]; then
          echo "⚠️ **Found $GPL_COUNT GPL-licensed dependencies** - Review for compatibility" >> $GITHUB_STEP_SUMMARY
          cat licenses.json | jq -r '.[] | select(.License | contains("GPL")) | "- \(.Name) (\(.License))"' >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **No GPL licenses found** - Good for commercial use" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for unknown licenses
        UNKNOWN_COUNT=$(cat licenses.json | jq '[.[] | select(.License == "UNKNOWN")] | length')
        
        if [ "$UNKNOWN_COUNT" -gt 0 ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Found $UNKNOWN_COUNT packages with unknown licenses** - Manual review needed" >> $GITHUB_STEP_SUMMARY
          cat licenses.json | jq -r '.[] | select(.License == "UNKNOWN") | "- \(.Name)"' >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 📤 Upload license report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: license-report
        path: licenses.json
        retention-days: 90

  # Summary and notifications
  dependency-summary:
    name: 📊 Dependency Health Summary
    runs-on: ubuntu-latest
    needs: [security-audit, outdated-check, license-check]
    if: always()
    
    steps:
    - name: 📊 Create summary
      run: |
        echo "# 🔍 Weekly Dependency Health Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Report Date:** $(date -u '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Job status summary
        echo "## 📋 Check Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.security-audit.result }}" == "success" ]; then
          echo "✅ Security Audit: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security Audit: Failed or Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.outdated-check.result }}" == "success" ]; then
          echo "✅ Outdated Check: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Outdated Check: Failed or Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.license-check.result }}" == "success" ]; then
          echo "✅ License Check: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ License Check: Failed or Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🤖 Automated Actions" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- 🔄 Dependabot will create PRs for outdated dependencies" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 Security updates will be prioritized for auto-merge" >> $GITHUB_STEP_SUMMARY
        echo "- 📄 License compliance is monitored continuously" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*Next check: $(date -d '+7 days' -u '+%Y-%m-%d')*" >> $GITHUB_STEP_SUMMARY
