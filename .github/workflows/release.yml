name: 🚀 AI-Powered Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.4.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  pull-requests: read
  id-token: write

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Validate release
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: 🏷️ Get version info
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          TAG="${{ github.event.inputs.version }}"
          VERSION=${TAG#v}
        else
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        echo "Tag: $TAG"
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml>=6.0.0
        pip install -e .
        
    - name: 🤖 AI-Powered Version Validation & Auto-Fix
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        echo "🤖 Running AI-powered version validation..."
        python scripts/smart_version_validator.py \
          --validate-release-version \
          --tag "${{ steps.version.outputs.tag }}" \
          --auto-fix-if-needed || {
          echo "❌ Version validation failed - check output above"
          exit 1
        }
        
    - name: 🤖 AI-Generated CHANGELOG Validation
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        echo "🤖 Validating CHANGELOG with AI auto-generation..."
        python scripts/smart_changelog_generator.py \
          --version "${{ steps.version.outputs.version }}" \
          --validate-completeness \
          --auto-generate-if-missing || {
          echo "❌ CHANGELOG validation failed - check output above"
          exit 1
        }
        
    - name: 🤖 AI Release Readiness Assessment
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        echo "🤖 Assessing release readiness with AI..."
        python scripts/release_readiness_analyzer.py \
          --full-assessment || {
          echo "⚠️ Release readiness concerns detected - review recommendations above"
          echo "Proceeding with release but consider addressing issues"
        }

  # Run comprehensive tests
  test-release:
    name: 🧪 Test Release
    runs-on: ${{ matrix.os }}
    needs: validate-release
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11', '3.12']
        exclude:
          # Reduce matrix size for faster builds
          - os: macos-latest
            python-version: '3.12'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 🟨 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: 📦 Install and test
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml>=6.0.0
        pip install -e .
        
        # Test basic functionality
        python -m aider_lint_fixer --version
        python -m aider_lint_fixer --help
        
    - name: 📋 Install linters
      run: |
        # Install supported linters
        pip install flake8==7.3.0 pylint==3.3.7 ansible-lint==25.6.1
        npm install -g eslint@8.57.1 jshint@2.13.6 prettier@3.6.2
        
    - name: 🧪 Run integration tests
      run: |
        # Run pytest if available
        if [ -f "requirements-test.txt" ]; then
          pip install -r requirements-test.txt
          python -m pytest tests/ -v --tb=short || true
        elif [ -d "tests" ]; then
          echo "Tests directory found but no test requirements, skipping tests"
        fi

  # Build package
  build-package:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: 🔨 Build package
      run: |
        python -m build
        
    - name: 🔍 Check package
      run: |
        twine check dist/*
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ needs.validate-release.outputs.version }}
        path: dist/
        retention-days: 30

  # Create GitHub release
  create-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-release, build-package]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: 📤 Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist-${{ needs.validate-release.outputs.version }}
        path: dist/
        
    - name: 🤖 Generate AI-powered release notes with smart version resolution
      id: release_notes
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Install dependencies for AI generation
        python -m pip install --upgrade pip
        pip install google-genai
        
        # Smart version resolution and AI generation
        if [ -n "$GEMINI_API_KEY" ]; then
          echo "🤖 Generating AI-powered release notes with smart resolution..."
          
          # Get release readiness info for context
          python scripts/release_readiness_analyzer.py --full-assessment > readiness_context.txt 2>&1 || true
          
          # First, try smart auto-resolution (AI will detect correct versions)
          python scripts/generate_release_notes.py \
            --auto-resolve \
            --output release_notes.md || {
            
            # Fallback: manual version detection
            echo "⚠️ Smart resolution failed, using manual detection..."
            PREV_VERSION=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null | sed 's/v//' || echo "0.0.0")
            
            python scripts/generate_release_notes.py \
              --version "$VERSION" \
              --prev-version "$PREV_VERSION" \
              --output release_notes.md || {
              
              # Last resort: basic release notes
              echo "⚠️ AI generation failed, using fallback script..."
              ./scripts/generate_fallback_release_notes.sh "$VERSION" "$PREV_VERSION" release_notes.md
            }
          }
        else
          echo "⚠️ GEMINI_API_KEY not set, using changelog extraction..."
          awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md > release_notes.md || {
            echo "Creating minimal release notes..."
            echo "# Release v$VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See commit history for changes." >> release_notes.md
          }
        fi
        
        # Add installation instructions
        cat >> release_notes.md << 'EOF'
        
        ## 🚀 Installation
        
        ### Quick Installation
        ```bash
        # One-line installation
        curl -fsSL https://raw.githubusercontent.com/tosin2013/aider-lint-fixer/main/scripts/install.sh | bash
        
        # Or manual installation
        git clone https://github.com/tosin2013/aider-lint-fixer.git
        cd aider-lint-fixer
        python3 -m venv venv && source venv/bin/activate
        pip3 install -e .
        ```
        
        ### Install Linters
        ```bash
        # Python linters
        pip3 install flake8==7.3.0 pylint==3.3.7
        
        # Ansible linters
        pip3 install ansible-lint==25.6.1
        
        # Node.js linters
        npm install -g eslint@8.57.1 jshint@2.13.6 prettier@3.6.2
        ```
        
        ## 📚 Documentation
        
        - [Installation Guide](docs/INSTALLATION_GUIDE.md)
        - [Node.js Linters Guide](docs/NODEJS_LINTERS_GUIDE.md)
        - [Contributor Guide](docs/CONTRIBUTOR_VERSION_GUIDE.md)
        
        ## 🔧 Supported Versions
        
        | Linter | Tested Version | Supported Versions |
        |--------|----------------|-------------------|
        | **ansible-lint** | 25.6.1 | 25.6.1, 25.6.x, 25.x |
        | **flake8** | 7.3.0 | 7.3.0, 7.2.x, 7.1.x, 7.0.x, 6.x |
        | **pylint** | 3.3.7 | 3.3.7, 3.3.x, 3.2.x, 3.1.x, 3.0.x, 2.x |
        | **ESLint** | 8.57.1 | 8.57.1, 8.57.x, 8.5.x, 8.x, 7.x |
        | **JSHint** | 2.13.6 | 2.13.6, 2.13.x, 2.1.x, 2.x |
        | **Prettier** | 3.6.2 | 3.6.2, 3.6.x, 3.x, 2.x |
        EOF
        
        echo "Release notes generated"
        
    - name: 🎉 Create GitHub Release with Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate-release.outputs.tag }}
        name: "🚀 aider-lint-fixer ${{ needs.validate-release.outputs.tag }}"
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: dist/*
        token: ${{ secrets.GITHUB_TOKEN }}

  # Publish to PyPI
  publish-pypi:
    name: 📦 Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: true  # Enabled - PyPI token is configured
    
    steps:
    - name: 📤 Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist-${{ needs.validate-release.outputs.version }}
        path: dist/
        
    - name: 📦 Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        
  # Notify success
  notify-success:
    name: 🎉 Notify Success
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    
    steps:
    - name: 🎉 Success notification
      run: |
        echo "🎉 Release ${{ needs.validate-release.outputs.tag }} created successfully!"
        echo ""
        echo "📦 Package built and tested across multiple platforms"
        echo "🚀 GitHub release created with comprehensive release notes"
        echo "📚 Documentation and installation guides included"
        echo ""
        echo "Ready for users to install and use! 🚀"
