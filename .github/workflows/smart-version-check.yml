name: 🧠 Smart Version Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  smart-version-analysis:
    name: 🤖 Smart Version Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Need full history for version analysis
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install google-genai
        
    - name: 🧠 Analyze version status with AI
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        echo "🔍 Running smart version analysis..."
        
        # Make script executable
        chmod +x scripts/smart_version_resolver.py
        
        # Run version analysis
        python scripts/smart_version_resolver.py --analyze-commits || {
          echo "⚠️ Smart analysis failed, running basic check..."
          
          # Basic version check
          CURRENT=$(python -c "from aider_lint_fixer import __version__; print(__version__)")
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/v//' || echo "none")
          
          echo "📊 Basic Version Check:"
          echo "   Current: $CURRENT"
          echo "   Latest tag: $LATEST_TAG"
          
          if [ "$CURRENT" != "$LATEST_TAG" ] && [ "$LATEST_TAG" != "none" ]; then
            echo "⚠️ Version mismatch detected!"
            echo "::warning::Version in __init__.py ($CURRENT) doesn't match latest tag ($LATEST_TAG)"
          fi
        }
        
    - name: 🚨 Check for version conflicts
      if: github.event_name == 'pull_request'
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        echo "🔧 Checking for version conflicts in PR..."
        
        # Get base branch version
        git checkout ${{ github.base_ref }}
        BASE_VERSION=$(python -c "from aider_lint_fixer import __version__; print(__version__)" 2>/dev/null || echo "unknown")
        
        # Get PR branch version
        git checkout ${{ github.head_ref }}
        PR_VERSION=$(python -c "from aider_lint_fixer import __version__; print(__version__)" 2>/dev/null || echo "unknown")
        
        echo "📋 Version Comparison:"
        echo "   Base branch (${{ github.base_ref }}): $BASE_VERSION"
        echo "   PR branch (${{ github.head_ref }}): $PR_VERSION"
        
        if [ "$BASE_VERSION" != "$PR_VERSION" ]; then
          echo "🔧 Version change detected, analyzing appropriateness..."
          
          python scripts/smart_version_resolver.py \
            --resolve-conflict \
            --current "$BASE_VERSION" \
            --requested "$PR_VERSION" || {
            echo "⚠️ Could not analyze version conflict"
            echo "::warning::Version changed from $BASE_VERSION to $PR_VERSION - please verify this is appropriate"
          }
        else
          echo "✅ No version changes in this PR"
        fi
        
    - name: 💡 Auto-suggest version bump
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        echo "💡 Analyzing if version bump is needed..."
        
        # Get latest release tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        CURRENT_VERSION=$(python -c "from aider_lint_fixer import __version__; print(__version__)")
        
        # Count commits since last tag
        COMMIT_COUNT=$(git rev-list ${LATEST_TAG}..HEAD --count 2>/dev/null || echo "unknown")
        
        if [ "$COMMIT_COUNT" != "0" ] && [ "$COMMIT_COUNT" != "unknown" ]; then
          echo "📈 Found $COMMIT_COUNT commits since $LATEST_TAG"
          
          python scripts/smart_version_resolver.py \
            --auto-bump \
            --from-version "${LATEST_TAG#v}" || {
            echo "⚠️ Could not analyze version bump needs"
          }
          
          echo ""
          echo "💡 To create a release:"
          echo "   1. Update version if needed: python scripts/smart_version_resolver.py --auto-bump --apply"
          echo "   2. Create tag: git tag v\$(python scripts/get_version.py)"
          echo "   3. Push tag: git push origin --tags"
        else
          echo "✅ No new commits since last release"
        fi
        
    - name: 🔍 Check version references in documentation
      run: |
        echo "🔍 Checking version references in documentation..."
        
        CURRENT=$(python -c "from aider_lint_fixer import __version__; print(__version__)")
        
        # Check for outdated dist file references
        echo "Checking for outdated dist file references..."
        
        # Find any references to old versions in wheel/tar.gz format
        OUTDATED_REFS=$(grep -r "aider_lint_fixer-[0-9]\+\.[0-9]\+\.[0-9]\+-py3-none-any\.whl\|aider_lint_fixer-[0-9]\+\.[0-9]\+\.[0-9]\+\.tar\.gz" README.md docs/ 2>/dev/null || true)
        
        if [ -n "$OUTDATED_REFS" ]; then
          # Check if they match current version
          EXPECTED_WHEEL="aider_lint_fixer-${CURRENT}-py3-none-any.whl"
          EXPECTED_TAR="aider_lint_fixer-${CURRENT}.tar.gz"
          
          if ! echo "$OUTDATED_REFS" | grep -q "$EXPECTED_WHEEL" && ! echo "$OUTDATED_REFS" | grep -q "$EXPECTED_TAR"; then
            echo "⚠️ Found outdated version references in documentation:"
            echo "$OUTDATED_REFS"
            echo ""
            echo "Expected references to:"
            echo "  - $EXPECTED_WHEEL"
            echo "  - $EXPECTED_TAR"
            echo "::warning::Documentation contains outdated version references. These will be updated during release."
          else
            echo "✅ Documentation version references are up to date"
          fi
        else
          echo "✅ No dist file version references found in documentation"
        fi
        
    - name: 📊 Version Summary
      run: |
        echo "## 📊 Smart Version Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        CURRENT=$(python -c "from aider_lint_fixer import __version__; print(__version__)")
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/v//' || echo "none")
        
        echo "- **Current Version**: \`$CURRENT\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Latest Tag**: \`$LATEST_TAG\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Expected dist files**:" >> $GITHUB_STEP_SUMMARY
        echo "  - \`aider_lint_fixer-${CURRENT}-py3-none-any.whl\`" >> $GITHUB_STEP_SUMMARY
        echo "  - \`aider_lint_fixer-${CURRENT}.tar.gz\`" >> $GITHUB_STEP_SUMMARY
        echo "- **AI Analysis**: See job output above" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "$GEMINI_API_KEY" ]; then
          echo "- **AI Provider**: Gemini 2.0 Flash ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **AI Provider**: Not configured (basic analysis only) ⚠️" >> $GITHUB_STEP_SUMMARY
        fi