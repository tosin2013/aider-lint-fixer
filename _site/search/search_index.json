{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Aider Lint Fixer Documentation","text":"<p>Automated lint error detection and fixing powered by aider.chat and AI</p> <p>Welcome to the comprehensive documentation for Aider Lint Fixer - an intelligent tool that automatically detects lint errors in your codebase and fixes them using AI-powered code generation through aider.chat.</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>New to Aider Lint Fixer? Start here:</p> <pre><code># Install\npip install aider-lint-fixer\n\n# Basic usage\naider-lint-fixer ./src\n\n# With specific linters\naider-lint-fixer --linters flake8,eslint ./src\n</code></pre>"},{"location":"#learning-oriented-tutorials","title":"\ud83d\udcda Learning-Oriented: Tutorials","text":"<p>Perfect for beginners - step-by-step guides to get you started:</p> <ul> <li>Getting Started - Your first lint fixing session</li> <li>Getting Started with Containers - Docker and container usage  </li> <li>Setting Up Your Development Environment - Complete development setup</li> <li>Writing and Running Tests - Testing your lint fixes</li> <li>Container Deployment - Production deployment guide</li> </ul>"},{"location":"#task-oriented-how-to-guides","title":"\ud83d\udd27 Task-Oriented: How-To Guides","text":"<p>Practical solutions for specific tasks:</p>"},{"location":"#configuration-setup","title":"Configuration &amp; Setup","text":"<ul> <li>Configure Linters - Set up and customize linters</li> <li>Setup Development Environment - Development environment setup</li> <li>Integrate with Aider - Advanced aider.chat integration</li> </ul>"},{"location":"#development-debugging","title":"Development &amp; Debugging","text":"<ul> <li>Add a New Feature - Extend functionality</li> <li>Debug Common Issues - Troubleshooting guide</li> <li>Run Tests - Testing strategies</li> </ul>"},{"location":"#deployment-operations","title":"Deployment &amp; Operations","text":"<ul> <li>Deploy to Production - Production deployment</li> <li>Deploy Your Application - Application deployment</li> <li>Monitor Performance - Performance monitoring</li> <li>Security Best Practices - Security guidelines</li> </ul>"},{"location":"#information-oriented-reference","title":"\ud83d\udcd6 Information-Oriented: Reference","text":"<p>Detailed technical reference documentation:</p>"},{"location":"#api-configuration","title":"API &amp; Configuration","text":"<ul> <li>API Documentation - Complete API reference</li> <li>API Reference - API usage examples</li> <li>Configuration Reference - Comprehensive configuration guide</li> <li>Command Line Interface - CLI reference</li> </ul>"},{"location":"#linters-errors","title":"Linters &amp; Errors","text":"<ul> <li>Linter Plugins - Supported linters and plugins</li> <li>Error Codes - Error codes and troubleshooting</li> <li>FAQ - Frequently asked questions</li> </ul>"},{"location":"#understanding-oriented-explanation","title":"\ud83d\udca1 Understanding-Oriented: Explanation","text":"<p>Deep dives into concepts, architecture, and design decisions:</p>"},{"location":"#architecture-design","title":"Architecture &amp; Design","text":"<ul> <li>Architecture Overview - System architecture</li> <li>Container Architecture - Container design</li> <li>Design Decisions - Why we made certain choices</li> <li>Technology Stack - Technologies used</li> </ul>"},{"location":"#architecture-decision-records-adrs","title":"\ud83c\udfd7\ufe0f Architecture Decision Records (ADRs)","text":"<p>Historical decisions and their rationale:</p> <ul> <li>Record Architecture Decisions</li> <li>AI Integration Architecture</li> <li>Modular Plugin System</li> <li>Python Ecosystem Focus</li> <li>Python Linter Ecosystem</li> <li>JavaScript TypeScript Ecosystem</li> <li>Infrastructure DevOps Linter Ecosystem</li> <li>Deployment Environments </li> <li>RHEL Container Build Requirements</li> </ul>"},{"location":"#key-features","title":"\ud83c\udfaf Key Features","text":""},{"location":"#ai-powered-intelligence","title":"\ud83e\udde0 AI-Powered Intelligence","text":"<ul> <li>Native Lint Detection: Automatically discovers project lint configurations</li> <li>Pre-Lint Risk Assessment: Analyzes codebase health before fixing</li> <li>Intelligent Force Mode: ML-powered with confidence-based auto-forcing</li> <li>Cost Monitoring: Real-time LLM API cost tracking and budget controls</li> </ul>"},{"location":"#supported-linters","title":"\ud83d\udcca Supported Linters","text":"Language Linters Profile Support Python flake8, pylint, black, isort, mypy \u2705 Basic, Default, Strict JavaScript/TypeScript ESLint, JSHint, Prettier \u2705 Basic, Default, Strict Ansible ansible-lint \u2705 Basic, Production Go golint, gofmt, go vet \u2705 Basic, Default, Strict Rust rustfmt, clippy \u2705 Basic, Default, Strict"},{"location":"#enterprise-features","title":"\ud83d\ude80 Enterprise Features","text":"<ul> <li>Docker Support: Production-ready containerization</li> <li>Multi-Architecture: ARM64 and x86_64 support</li> <li>Session Recovery: Resume interrupted operations</li> <li>Progress Tracking: Visual progress and metrics</li> <li>Community Learning: Improve classifications over time</li> </ul>"},{"location":"#getting-help","title":"\ud83c\udd98 Getting Help","text":"<ul> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>Documentation: You're reading it! \ud83d\udcd6</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Check out our contributor guides:</p> <ul> <li>Contributor Version Guide - Version-specific contribution info</li> <li>Installation Guide - Development setup</li> <li>Linter Testing Guide - Testing linter integrations</li> <li>Node.js Linters Guide - JavaScript/TypeScript development</li> </ul> <p>This documentation is organized using the Diataxis framework for maximum clarity and usability.</p>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/","title":"Contributor Version Guide","text":"<p>This guide is for contributors and developers working on aider-lint-fixer. It covers development setup, version management, and contribution workflows.</p>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"CONTRIBUTOR_VERSION_GUIDE/#1-fork-and-clone","title":"1. Fork and Clone","text":"<pre><code># Fork the repository on GitHub, then clone your fork\ngit clone https://github.com/YOUR-USERNAME/aider-lint-fixer.git\ncd aider-lint-fixer\n\n# Add upstream remote\ngit remote add upstream https://github.com/tosin2013/aider-lint-fixer.git\n</code></pre>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#2-development-installation","title":"2. Development Installation","text":"<pre><code># Create virtual environment\npython3.11 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install in development mode with all dependencies\npip install -e .[learning,dev]\n\n# Install pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#3-development-dependencies","title":"3. Development Dependencies","text":"<p>The <code>dev</code> extra includes: - <code>pytest</code> for testing - <code>black</code> for code formatting - <code>flake8</code> for linting - <code>isort</code> for import sorting - <code>pre-commit</code> for git hooks</p>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#version-management","title":"Version Management","text":""},{"location":"CONTRIBUTOR_VERSION_GUIDE/#version-numbering","title":"Version Numbering","text":"<p>We follow Semantic Versioning: - MAJOR: Breaking changes - MINOR: New features, backwards compatible - PATCH: Bug fixes, backwards compatible</p>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#current-version-tracking","title":"Current Version Tracking","text":"<p>The version is defined in multiple places: - <code>aider_lint_fixer/__init__.py</code> - Main version constant - <code>setup.py</code> - Package metadata - <code>pyproject.toml</code> - Build configuration</p>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#release-process","title":"Release Process","text":""},{"location":"CONTRIBUTOR_VERSION_GUIDE/#1-prepare-release","title":"1. Prepare Release","text":"<pre><code># Update version in all files\nscripts/prepare_release_v1.7.0.py  # Example script\n\n# Update CHANGELOG.md with new features and fixes\n# Update README.md with new version badges\n</code></pre>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#2-create-release-branch","title":"2. Create Release Branch","text":"<pre><code>git checkout -b release/v1.7.0\ngit add .\ngit commit -m \"chore: prepare release v1.7.0\"\ngit push origin release/v1.7.0\n</code></pre>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#3-testing","title":"3. Testing","text":"<pre><code># Run full test suite\nmake test\n\n# Run linting checks\nmake lint\n\n# Test installation\npip install -e .\naider-lint-fixer --version\n</code></pre>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#4-create-pull-request","title":"4. Create Pull Request","text":"<p>Create a PR from your release branch to <code>main</code> with: - Clear description of changes - Updated documentation - Version bump commits</p>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#development-workflow","title":"Development Workflow","text":""},{"location":"CONTRIBUTOR_VERSION_GUIDE/#1-branch-strategy","title":"1. Branch Strategy","text":"<ul> <li><code>main</code> - Stable production code</li> <li><code>develop</code> - Development integration branch</li> <li><code>feature/feature-name</code> - Feature development</li> <li><code>bugfix/issue-number</code> - Bug fixes</li> <li><code>release/version</code> - Release preparation</li> </ul>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#2-code-standards","title":"2. Code Standards","text":""},{"location":"CONTRIBUTOR_VERSION_GUIDE/#python-code-style","title":"Python Code Style","text":"<pre><code># Format code\nblack aider_lint_fixer/\n\n# Sort imports\nisort aider_lint_fixer/\n\n# Check linting\nflake8 aider_lint_fixer/\n</code></pre>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>The following checks run automatically: - Black formatting - isort import sorting - flake8 linting - Basic syntax validation</p>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#testing-requirements","title":"Testing Requirements","text":"<pre><code># Run tests\npytest tests/\n\n# Run with coverage\npytest --cov=aider_lint_fixer tests/\n\n# Test specific module\npytest tests/test_error_analyzer.py\n</code></pre>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#3-adding-new-features","title":"3. Adding New Features","text":""},{"location":"CONTRIBUTOR_VERSION_GUIDE/#for-new-linter-support","title":"For New Linter Support","text":"<ol> <li>Add linter configuration in <code>config_manager.py</code></li> <li>Update pattern matching in <code>pattern_matcher.py</code></li> <li>Add test cases in <code>tests/</code></li> <li>Update documentation</li> </ol>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#for-new-ai-providers","title":"For New AI Providers","text":"<ol> <li>Update <code>aider_integration.py</code></li> <li>Add provider-specific configuration</li> <li>Test with sample projects</li> <li>Document setup instructions</li> </ol>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#4-documentation-updates","title":"4. Documentation Updates","text":"<p>When contributing:</p> <ol> <li>Update relevant documentation files</li> <li>Add docstrings for new functions/classes</li> <li>Update README.md for new features</li> <li>Add examples for complex features</li> </ol>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#testing-guide","title":"Testing Guide","text":""},{"location":"CONTRIBUTOR_VERSION_GUIDE/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/           # Unit tests for individual modules\n\u251c\u2500\u2500 integration/    # Integration tests\n\u251c\u2500\u2500 fixtures/       # Test data and sample projects\n\u2514\u2500\u2500 test_*.py      # Main test files\n</code></pre>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#running-tests","title":"Running Tests","text":"<pre><code># All tests\npytest\n\n# Specific test file\npytest tests/test_error_analyzer.py\n\n# With verbose output\npytest -v\n\n# With coverage report\npytest --cov=aider_lint_fixer --cov-report=html\n</code></pre>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#adding-tests","title":"Adding Tests","text":"<p>For new features, include: - Unit tests for core functionality - Integration tests for end-to-end workflows - Edge case testing - Error handling validation</p>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#debugging-and-troubleshooting","title":"Debugging and Troubleshooting","text":""},{"location":"CONTRIBUTOR_VERSION_GUIDE/#development-debugging","title":"Development Debugging","text":"<pre><code># Enable debug logging\nexport AIDER_LINT_DEBUG=1\n\n# Run with verbose output\naider-lint-fixer --verbose ./test-project\n\n# Use Python debugger\npython -m pdb -m aider_lint_fixer --help\n</code></pre>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#common-development-issues","title":"Common Development Issues","text":""},{"location":"CONTRIBUTOR_VERSION_GUIDE/#1-import-errors-in-development","title":"1. Import Errors in Development","text":"<pre><code># Reinstall in development mode\npip install -e .\n</code></pre>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#2-test-failures","title":"2. Test Failures","text":"<pre><code># Clear pytest cache\npytest --cache-clear\n\n# Run with detailed output\npytest -vvv\n</code></pre>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#3-pre-commit-hook-failures","title":"3. Pre-commit Hook Failures","text":"<pre><code># Run manually\npre-commit run --all-files\n\n# Skip hooks temporarily\ngit commit --no-verify\n</code></pre>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#contribution-guidelines","title":"Contribution Guidelines","text":""},{"location":"CONTRIBUTOR_VERSION_GUIDE/#1-before-contributing","title":"1. Before Contributing","text":"<ul> <li>Check existing issues and PRs</li> <li>Discuss major changes in issues first</li> <li>Follow the code style guidelines</li> <li>Add tests for new functionality</li> </ul>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#2-pull-request-process","title":"2. Pull Request Process","text":"<ol> <li>Create feature branch from <code>develop</code></li> <li>Make your changes with tests</li> <li>Update documentation</li> <li>Run full test suite</li> <li>Create descriptive PR</li> </ol>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#3-code-review","title":"3. Code Review","text":"<p>PRs require: - Passing CI checks - Code review approval - Updated documentation - Test coverage for new code</p>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#release-history","title":"Release History","text":""},{"location":"CONTRIBUTOR_VERSION_GUIDE/#recent-releases","title":"Recent Releases","text":"<ul> <li>v1.9.0: Community Issue Reporting &amp; Collaborative Improvement</li> <li>v1.8.0: Enhanced Interactive Mode &amp; Progress Tracking</li> <li>v1.7.0: Learning System with 46.1% fixability rate</li> <li>v1.6.0: TypeScript Projects &amp; Smart ESLint integration</li> </ul> <p>See the project changelog for detailed release notes.</p>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#getting-help","title":"Getting Help","text":"<ul> <li>Development Questions: Open a discussion on GitHub</li> <li>Bug Reports: Create an issue with reproduction steps</li> <li>Feature Requests: Open an issue with detailed requirements</li> <li>Code Review: Tag maintainers in your PR</li> </ul>"},{"location":"CONTRIBUTOR_VERSION_GUIDE/#resources","title":"Resources","text":"<ul> <li>Installation Guide</li> <li>Node.js Linters Guide</li> <li>Linter Testing Guide</li> <li>Project Home</li> </ul>"},{"location":"INSTALLATION_GUIDE/","title":"Installation Guide","text":"<p>This guide provides comprehensive installation instructions for aider-lint-fixer across different environments and use cases.</p>"},{"location":"INSTALLATION_GUIDE/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python: 3.11 or higher</li> <li>Git: Required for aider.chat integration</li> <li>Node.js: 16+ (for JavaScript/TypeScript projects)</li> <li>npm/yarn: For Node.js package management</li> </ul>"},{"location":"INSTALLATION_GUIDE/#installation-methods","title":"Installation Methods","text":""},{"location":"INSTALLATION_GUIDE/#1-standard-installation-recommended","title":"1. Standard Installation (Recommended)","text":"<pre><code>pip install aider-lint-fixer\n</code></pre>"},{"location":"INSTALLATION_GUIDE/#2-installation-with-learning-features","title":"2. Installation with Learning Features","text":"<p>For enhanced AI-powered error classification:</p> <pre><code>pip install aider-lint-fixer[learning]\n</code></pre> <p>This includes additional dependencies: - <code>scikit-learn</code> for machine learning models - <code>pyahocorasick</code> for high-performance pattern matching</p>"},{"location":"INSTALLATION_GUIDE/#3-development-installation","title":"3. Development Installation","text":"<p>For contributors and developers:</p> <pre><code>git clone https://github.com/tosin2013/aider-lint-fixer.git\ncd aider-lint-fixer\npip install -e .\n</code></pre>"},{"location":"INSTALLATION_GUIDE/#4-container-installation","title":"4. Container Installation","text":"<p>Using the provided container setup:</p> <pre><code># Build the container\ndocker build -t aider-lint-fixer .\n\n# Run in container\ndocker run -v $(pwd):/workspace aider-lint-fixer\n</code></pre>"},{"location":"INSTALLATION_GUIDE/#language-specific-setup","title":"Language-Specific Setup","text":""},{"location":"INSTALLATION_GUIDE/#python-projects","title":"Python Projects","text":"<p>Install required linters:</p> <pre><code>pip install flake8 pylint black isort\n</code></pre>"},{"location":"INSTALLATION_GUIDE/#javascripttypescript-projects","title":"JavaScript/TypeScript Projects","text":"<p>Install ESLint and related tools:</p> <pre><code>npm install -g eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin\n</code></pre>"},{"location":"INSTALLATION_GUIDE/#ansible-projects","title":"Ansible Projects","text":"<p>Install ansible-lint:</p> <pre><code>pip install ansible-lint\n</code></pre>"},{"location":"INSTALLATION_GUIDE/#configuration","title":"Configuration","text":""},{"location":"INSTALLATION_GUIDE/#1-basic-configuration","title":"1. Basic Configuration","text":"<p>Create a <code>.aider-lint-fixer.json</code> configuration file:</p> <pre><code>{\n  \"profile\": \"basic\",\n  \"linters\": [\"flake8\", \"eslint\"],\n  \"auto_fix\": true,\n  \"interactive\": false\n}\n</code></pre>"},{"location":"INSTALLATION_GUIDE/#2-ai-provider-setup","title":"2. AI Provider Setup","text":"<p>Configure your preferred AI provider for aider.chat:</p> <pre><code># OpenAI (default)\nexport OPENAI_API_KEY=\"your-api-key\"\n\n# Claude\nexport ANTHROPIC_API_KEY=\"your-api-key\"\n\n# Or use local models\nexport AIDER_MODEL=\"ollama/codellama\"\n</code></pre>"},{"location":"INSTALLATION_GUIDE/#verification","title":"Verification","text":"<p>Test your installation:</p> <pre><code># Check version\naider-lint-fixer --version\n\n# Run basic check\naider-lint-fixer --help\n\n# Test on a sample project\naider-lint-fixer --dry-run ./sample-project\n</code></pre>"},{"location":"INSTALLATION_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"INSTALLATION_GUIDE/#common-issues","title":"Common Issues","text":""},{"location":"INSTALLATION_GUIDE/#1-import-errors","title":"1. Import Errors","text":"<pre><code># If you see \"No module named 'aider_lint_fixer'\"\npip install --upgrade aider-lint-fixer\n</code></pre>"},{"location":"INSTALLATION_GUIDE/#2-permission-errors","title":"2. Permission Errors","text":"<pre><code># Use --user flag for user-local installation\npip install --user aider-lint-fixer\n</code></pre>"},{"location":"INSTALLATION_GUIDE/#3-python-version-issues","title":"3. Python Version Issues","text":"<pre><code># Check Python version\npython --version\n\n# Use specific Python version\npython3.11 -m pip install aider-lint-fixer\n</code></pre>"},{"location":"INSTALLATION_GUIDE/#4-container-issues","title":"4. Container Issues","text":"<pre><code># Check if Docker is running\ndocker --version\n\n# Rebuild container if needed\ndocker build --no-cache -t aider-lint-fixer .\n</code></pre>"},{"location":"INSTALLATION_GUIDE/#getting-help","title":"Getting Help","text":"<ul> <li>Check the getting started tutorial for basic usage</li> <li>Review CONTRIBUTOR_VERSION_GUIDE.md for development setup</li> <li>Report issues on GitHub Issues</li> </ul>"},{"location":"INSTALLATION_GUIDE/#next-steps","title":"Next Steps","text":"<p>After installation:</p> <ol> <li>Read the Node.js Linters Guide for JavaScript/TypeScript projects</li> <li>Check the Linter Testing Guide for testing your setup</li> <li>Explore the main README for usage examples and features</li> </ol>"},{"location":"LINTER_TESTING_GUIDE/","title":"Linter Testing Guide","text":"<p>This guide covers comprehensive testing strategies for aider-lint-fixer, including unit tests, integration tests, and validation of linter support across different languages and frameworks.</p>"},{"location":"LINTER_TESTING_GUIDE/#testing-framework-overview","title":"Testing Framework Overview","text":""},{"location":"LINTER_TESTING_GUIDE/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/                    # Unit tests for individual modules\n\u2502   \u251c\u2500\u2500 test_error_analyzer.py\n\u2502   \u251c\u2500\u2500 test_pattern_matcher.py\n\u2502   \u251c\u2500\u2500 test_aider_integration.py\n\u2502   \u2514\u2500\u2500 test_config_manager.py\n\u251c\u2500\u2500 integration/             # End-to-end integration tests\n\u2502   \u251c\u2500\u2500 test_python_projects.py\n\u2502   \u251c\u2500\u2500 test_nodejs_projects.py\n\u2502   \u251c\u2500\u2500 test_ansible_projects.py\n\u2502   \u2514\u2500\u2500 test_mixed_projects.py\n\u251c\u2500\u2500 fixtures/                # Test data and sample projects\n\u2502   \u251c\u2500\u2500 python_sample/\n\u2502   \u251c\u2500\u2500 nodejs_sample/\n\u2502   \u251c\u2500\u2500 ansible_sample/\n\u2502   \u2514\u2500\u2500 test_files/\n\u2514\u2500\u2500 performance/             # Performance and load testing\n    \u251c\u2500\u2500 test_large_projects.py\n    \u2514\u2500\u2500 benchmarks/\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#test-dependencies","title":"Test Dependencies","text":"<pre><code># Install test dependencies\npip install -e .[dev]\n\n# Core testing tools\npytest                # Test framework\npytest-cov          # Coverage reporting\npytest-mock         # Mocking utilities\npytest-xdist        # Parallel test execution\npytest-benchmark    # Performance testing\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#running-tests","title":"Running Tests","text":""},{"location":"LINTER_TESTING_GUIDE/#basic-test-execution","title":"Basic Test Execution","text":"<pre><code># Run all tests\npytest\n\n# Run with verbose output\npytest -v\n\n# Run specific test file\npytest tests/unit/test_error_analyzer.py\n\n# Run specific test function\npytest tests/unit/test_error_analyzer.py::test_categorize_error\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#coverage-testing","title":"Coverage Testing","text":"<pre><code># Run with coverage\npytest --cov=aider_lint_fixer\n\n# Generate HTML coverage report\npytest --cov=aider_lint_fixer --cov-report=html\n\n# Coverage with minimum threshold\npytest --cov=aider_lint_fixer --cov-fail-under=80\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#parallel-testing","title":"Parallel Testing","text":"<pre><code># Run tests in parallel\npytest -n auto\n\n# Specify number of workers\npytest -n 4\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#unit-testing","title":"Unit Testing","text":""},{"location":"LINTER_TESTING_GUIDE/#error-analyzer-tests","title":"Error Analyzer Tests","text":"<pre><code># tests/unit/test_error_analyzer.py\nimport pytest\nfrom aider_lint_fixer.error_analyzer import ErrorAnalyzer, ErrorCategory\nfrom aider_lint_fixer.lint_runner import LintError, ErrorSeverity\n\nclass TestErrorAnalyzer:\n    def test_categorize_python_import_error(self):\n        analyzer = ErrorAnalyzer()\n        error = LintError(\n            file_path=\"test.py\",\n            line=1,\n            column=1,\n            rule_id=\"F401\",\n            message=\"'os' imported but unused\",\n            severity=ErrorSeverity.ERROR,\n            linter=\"flake8\"\n        )\n\n        analysis = analyzer._analyze_error(error, \"import os\\n\")\n        assert analysis.category == ErrorCategory.UNUSED\n        assert analysis.fixable == True\n        assert analysis.complexity.value == \"simple\"\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#pattern-matcher-tests","title":"Pattern Matcher Tests","text":"<pre><code># tests/unit/test_pattern_matcher.py\nimport pytest\nfrom aider_lint_fixer.pattern_matcher import SmartErrorClassifier\n\nclass TestSmartErrorClassifier:\n    def test_javascript_unused_variable(self):\n        classifier = SmartErrorClassifier()\n        result = classifier.classify_error(\n            \"'unusedVar' is defined but never used\",\n            \"javascript\",\n            \"eslint\"\n        )\n\n        assert result.fixable == True\n        assert result.confidence &gt; 0.8\n        assert result.method == \"pattern_match\"\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#configuration-tests","title":"Configuration Tests","text":"<pre><code># tests/unit/test_config_manager.py\nimport pytest\nfrom aider_lint_fixer.config_manager import ConfigManager\n\nclass TestConfigManager:\n    def test_load_default_config(self):\n        config = ConfigManager()\n        assert config.get_profile() == \"basic\"\n        assert \"flake8\" in config.get_enabled_linters()\n\n    def test_typescript_project_detection(self):\n        config = ConfigManager(\"./fixtures/typescript_project\")\n        assert config.is_typescript_project() == True\n        assert \"eslint\" in config.get_enabled_linters()\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#integration-testing","title":"Integration Testing","text":""},{"location":"LINTER_TESTING_GUIDE/#python-project-testing","title":"Python Project Testing","text":"<pre><code># tests/integration/test_python_projects.py\nimport pytest\nimport tempfile\nimport os\nfrom pathlib import Path\nfrom aider_lint_fixer.main import main\n\nclass TestPythonIntegration:\n    def test_flake8_integration(self):\n        \"\"\"Test complete flake8 error detection and fixing flow\"\"\"\n        with tempfile.TemporaryDirectory() as tmpdir:\n            # Create test Python file with errors\n            test_file = Path(tmpdir) / \"test.py\"\n            test_file.write_text(\"\"\"\nimport os\nimport sys  # unused import\n\ndef function_with_long_line():\n    return \"this is a very long line that exceeds the maximum line length limit and should be fixed\"\n\nx=1 # missing spaces\n            \"\"\")\n\n            # Run aider-lint-fixer\n            result = main([\n                \"--dry-run\",\n                \"--linter\", \"flake8\",\n                str(tmpdir)\n            ])\n\n            assert result.total_errors &gt; 0\n            assert any(\"F401\" in e.rule_id for e in result.errors)  # unused import\n            assert any(\"E501\" in e.rule_id for e in result.errors)  # line too long\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#nodejs-project-testing","title":"Node.js Project Testing","text":"<pre><code># tests/integration/test_nodejs_projects.py\nimport pytest\nimport tempfile\nimport json\nfrom pathlib import Path\nfrom aider_lint_fixer.main import main\n\nclass TestNodeJSIntegration:\n    def test_eslint_typescript_integration(self):\n        \"\"\"Test ESLint with TypeScript project\"\"\"\n        with tempfile.TemporaryDirectory() as tmpdir:\n            # Create package.json\n            package_json = {\n                \"name\": \"test-project\",\n                \"devDependencies\": {\n                    \"eslint\": \"^8.0.0\",\n                    \"@typescript-eslint/parser\": \"^6.0.0\"\n                }\n            }\n            (Path(tmpdir) / \"package.json\").write_text(json.dumps(package_json))\n\n            # Create TypeScript file with errors\n            ts_file = Path(tmpdir) / \"src\" / \"index.ts\"\n            ts_file.parent.mkdir(exist_ok=True)\n            ts_file.write_text(\"\"\"\nlet unusedVariable = 'remove me';\nconst value = 'single quotes should be double'\nfunction noReturnType() {\n    return 42\n}\n            \"\"\")\n\n            # Create ESLint config\n            eslint_config = {\n                \"parser\": \"@typescript-eslint/parser\",\n                \"extends\": [\"@typescript-eslint/recommended\"],\n                \"rules\": {\n                    \"quotes\": [\"error\", \"double\"],\n                    \"@typescript-eslint/no-unused-vars\": \"error\"\n                }\n            }\n            (Path(tmpdir) / \".eslintrc.json\").write_text(json.dumps(eslint_config))\n\n            result = main([\n                \"--dry-run\",\n                \"--linter\", \"eslint\",\n                str(tmpdir)\n            ])\n\n            assert result.total_errors &gt; 0\n            # Should detect unused variable and quote style issues\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#ansible-project-testing","title":"Ansible Project Testing","text":"<pre><code># tests/integration/test_ansible_projects.py\nimport pytest\nimport tempfile\nimport yaml\nfrom pathlib import Path\nfrom aider_lint_fixer.main import main\n\nclass TestAnsibleIntegration:\n    def test_ansible_lint_integration(self):\n        \"\"\"Test ansible-lint integration with YAML playbooks\"\"\"\n        with tempfile.TemporaryDirectory() as tmpdir:\n            # Create ansible playbook with errors\n            playbook = {\n                \"name\": \"Test playbook\",\n                \"hosts\": \"all\",\n                \"tasks\": [\n                    {\n                        \"shell\": \"echo hello\",  # Should use command module\n                        \"name\": \"bad shell usage\"\n                    },\n                    {\n                        \"copy\": {\n                            \"src\": \"file.txt\",\n                            \"dest\": \"/tmp/file.txt\",\n                            \"mode\": \"777\"  # Too permissive\n                        }\n                    }\n                ]\n            }\n\n            playbook_file = Path(tmpdir) / \"playbook.yml\"\n            with open(playbook_file, 'w') as f:\n                yaml.dump([playbook], f)\n\n            result = main([\n                \"--dry-run\",\n                \"--linter\", \"ansible-lint\",\n                str(tmpdir)\n            ])\n\n            assert result.total_errors &gt; 0\n            # Should detect shell usage and file permissions issues\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#performance-testing","title":"Performance Testing","text":""},{"location":"LINTER_TESTING_GUIDE/#large-project-simulation","title":"Large Project Simulation","text":"<pre><code># tests/performance/test_large_projects.py\nimport pytest\nimport tempfile\nimport time\nfrom pathlib import Path\nfrom aider_lint_fixer.main import main\n\nclass TestPerformance:\n    @pytest.mark.benchmark\n    def test_large_python_project_performance(self, benchmark):\n        \"\"\"Test performance on large Python project (100+ files)\"\"\"\n        with tempfile.TemporaryDirectory() as tmpdir:\n            # Create 100 Python files with various errors\n            for i in range(100):\n                file_path = Path(tmpdir) / f\"module_{i}.py\"\n                file_path.write_text(f\"\"\"\nimport os  # unused import\nimport sys\nimport json\n\ndef function_{i}():\n    x=1+2+3+4+5  # spacing issues\n    return \"very long line that exceeds maximum length and should trigger line length error\"\n\nclass Class{i}:\n    def method(self):\n        pass\n                \"\"\")\n\n            # Benchmark the processing\n            def run_linter():\n                return main([\n                    \"--dry-run\",\n                    \"--linter\", \"flake8\",\n                    str(tmpdir)\n                ])\n\n            result = benchmark(run_linter)\n\n            # Performance assertions\n            assert result.total_errors &gt; 200  # Should find many errors\n            assert benchmark.stats.median &lt; 30.0  # Should complete in under 30 seconds\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#memory-usage-testing","title":"Memory Usage Testing","text":"<pre><code># tests/performance/test_memory_usage.py\nimport pytest\nimport psutil\nimport os\nfrom aider_lint_fixer.main import main\n\nclass TestMemoryUsage:\n    def test_memory_efficiency_large_project(self):\n        \"\"\"Test memory usage doesn't exceed reasonable limits\"\"\"\n        process = psutil.Process(os.getpid())\n        initial_memory = process.memory_info().rss / 1024 / 1024  # MB\n\n        # Run on large project\n        result = main([\n            \"--dry-run\",\n            \"./tests/fixtures/large_project\"\n        ])\n\n        final_memory = process.memory_info().rss / 1024 / 1024  # MB\n        memory_increase = final_memory - initial_memory\n\n        # Memory usage should not exceed 500MB for typical projects\n        assert memory_increase &lt; 500\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#test-fixtures","title":"Test Fixtures","text":""},{"location":"LINTER_TESTING_GUIDE/#creating-test-projects","title":"Creating Test Projects","text":"<pre><code># tests/conftest.py - Shared test fixtures\nimport pytest\nimport tempfile\nimport json\nfrom pathlib import Path\n\n@pytest.fixture\ndef python_project():\n    \"\"\"Create a temporary Python project with common errors\"\"\"\n    with tempfile.TemporaryDirectory() as tmpdir:\n        project_path = Path(tmpdir)\n\n        # Main module\n        (project_path / \"main.py\").write_text(\"\"\"\nimport os\nimport sys  # unused\n\ndef long_function_name():\n    return \"this line is way too long and exceeds the recommended maximum line length for Python code\"\n\nx=1+2  # spacing\n        \"\"\")\n\n        # Test file\n        (project_path / \"test_main.py\").write_text(\"\"\"\nimport pytest\nfrom main import long_function_name\n\ndef test_function():\n    assert long_function_name() is not None\n        \"\"\")\n\n        # Setup.py\n        (project_path / \"setup.py\").write_text(\"\"\"\nfrom setuptools import setup\n\nsetup(\n    name=\"test-project\",\n    version=\"0.1.0\"\n)\n        \"\"\")\n\n        yield project_path\n\n@pytest.fixture\ndef nodejs_project():\n    \"\"\"Create a temporary Node.js project with TypeScript\"\"\"\n    with tempfile.TemporaryDirectory() as tmpdir:\n        project_path = Path(tmpdir)\n\n        # Package.json\n        package_json = {\n            \"name\": \"test-project\",\n            \"version\": \"1.0.0\",\n            \"scripts\": {\n                \"lint\": \"eslint src/**/*.ts\"\n            },\n            \"devDependencies\": {\n                \"eslint\": \"^8.0.0\",\n                \"@typescript-eslint/parser\": \"^6.0.0\",\n                \"@typescript-eslint/eslint-plugin\": \"^6.0.0\"\n            }\n        }\n        (project_path / \"package.json\").write_text(json.dumps(package_json, indent=2))\n\n        # TypeScript config\n        tsconfig = {\n            \"compilerOptions\": {\n                \"target\": \"ES2020\",\n                \"module\": \"commonjs\",\n                \"strict\": True\n            }\n        }\n        (project_path / \"tsconfig.json\").write_text(json.dumps(tsconfig, indent=2))\n\n        # Source file with errors\n        src_dir = project_path / \"src\"\n        src_dir.mkdir()\n        (src_dir / \"index.ts\").write_text(\"\"\"\nlet unusedVariable = 'remove me';\nconst message = 'Hello world';  // should be double quotes\nfunction getValue() {  // missing return type\n    return 42;\n}\nconsole.log(message)  // missing semicolon\n        \"\"\")\n\n        # ESLint config\n        eslintrc = {\n            \"parser\": \"@typescript-eslint/parser\",\n            \"plugins\": [\"@typescript-eslint\"],\n            \"extends\": [\n                \"eslint:recommended\",\n                \"@typescript-eslint/recommended\"\n            ],\n            \"rules\": {\n                \"quotes\": [\"error\", \"double\"],\n                \"semi\": [\"error\", \"always\"],\n                \"@typescript-eslint/no-unused-vars\": \"error\",\n                \"@typescript-eslint/explicit-function-return-type\": \"warn\"\n            }\n        }\n        (project_path / \".eslintrc.json\").write_text(json.dumps(eslintrc, indent=2))\n\n        yield project_path\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#continuous-integration-testing","title":"Continuous Integration Testing","text":""},{"location":"LINTER_TESTING_GUIDE/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/test.yml\nname: Test Suite\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        python-version: [3.11, 3.12]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -e .[dev,learning]\n\n      - name: Run unit tests\n        run: pytest tests/unit/ -v --cov=aider_lint_fixer\n\n      - name: Run integration tests\n        run: pytest tests/integration/ -v\n\n      - name: Run performance tests\n        run: pytest tests/performance/ -v --benchmark-only\n\n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#test-coverage-goals","title":"Test Coverage Goals","text":"Component Target Coverage Current Core modules 90%+ 85% Error analysis 95%+ 92% Pattern matching 85%+ 88% Integration 80%+ 76% Overall project 85%+ 83%"},{"location":"LINTER_TESTING_GUIDE/#testing-best-practices","title":"Testing Best Practices","text":""},{"location":"LINTER_TESTING_GUIDE/#1-test-organization","title":"1. Test Organization","text":"<ul> <li>Unit tests: Test individual functions and classes</li> <li>Integration tests: Test complete workflows</li> <li>Performance tests: Validate scalability</li> <li>Regression tests: Prevent bug reintroduction</li> </ul>"},{"location":"LINTER_TESTING_GUIDE/#2-mock-usage","title":"2. Mock Usage","text":"<pre><code># Example: Mocking external dependencies\n@pytest.fixture\ndef mock_aider_client(mocker):\n    mock_client = mocker.Mock()\n    mock_client.fix_error.return_value = {\"success\": True, \"fixed\": True}\n    return mock_client\n\ndef test_error_fixing_with_mock(mock_aider_client):\n    # Test error fixing logic without actual AI calls\n    pass\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#3-test-data-management","title":"3. Test Data Management","text":"<ul> <li>Use fixtures for reusable test data</li> <li>Create realistic test projects</li> <li>Include edge cases and error conditions</li> <li>Version control test data changes</li> </ul>"},{"location":"LINTER_TESTING_GUIDE/#4-debugging-tests","title":"4. Debugging Tests","text":"<pre><code># Run specific test with debug output\npytest tests/unit/test_error_analyzer.py::test_specific_function -v -s\n\n# Debug with pdb\npytest --pdb tests/unit/test_error_analyzer.py\n\n# Run with logging\npytest tests/ --log-cli-level=DEBUG\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#validation-testing","title":"Validation Testing","text":""},{"location":"LINTER_TESTING_GUIDE/#linter-compatibility-testing","title":"Linter Compatibility Testing","text":"<pre><code># Automated testing across different linter versions\n@pytest.mark.parametrize(\"linter_version\", [\n    \"flake8==6.0.0\",\n    \"flake8==7.0.0\", \n    \"eslint@8.45.0\",\n    \"eslint@9.0.0\"\n])\ndef test_linter_compatibility(linter_version):\n    # Test compatibility with different linter versions\n    pass\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#cross-platform-testing","title":"Cross-Platform Testing","text":"<pre><code>@pytest.mark.skipif(sys.platform != \"win32\", reason=\"Windows-specific test\")\ndef test_windows_path_handling():\n    # Test Windows-specific functionality\n    pass\n\n@pytest.mark.skipif(sys.platform == \"win32\", reason=\"Unix-specific test\")\ndef test_unix_path_handling():\n    # Test Unix-specific functionality\n    pass\n</code></pre>"},{"location":"LINTER_TESTING_GUIDE/#resources","title":"Resources","text":"<ul> <li>pytest Documentation</li> <li>Coverage.py Documentation</li> <li>Installation Guide</li> <li>Contributor Guide</li> <li>Node.js Linters Guide</li> </ul>"},{"location":"NODEJS_LINTERS_GUIDE/","title":"Node.js Linters Guide","text":"<p>This guide covers comprehensive support for JavaScript and TypeScript linting with aider-lint-fixer, including ESLint, Prettier, and project-specific configurations.</p>"},{"location":"NODEJS_LINTERS_GUIDE/#supported-nodejs-linters","title":"Supported Node.js Linters","text":""},{"location":"NODEJS_LINTERS_GUIDE/#eslint","title":"ESLint","text":"<ul> <li>Version Support: 8.x, 9.x</li> <li>Extensions: <code>.js</code>, <code>.jsx</code>, <code>.ts</code>, <code>.tsx</code>, <code>.mjs</code>, <code>.cjs</code></li> <li>Configuration Detection: Automatic detection of <code>.eslintrc.*</code> files</li> <li>TypeScript Support: Full integration with <code>@typescript-eslint</code></li> </ul>"},{"location":"NODEJS_LINTERS_GUIDE/#prettier","title":"Prettier","text":"<ul> <li>Version Support: 2.x, 3.x</li> <li>Integration: Works alongside ESLint for formatting</li> <li>Configuration: Auto-detects <code>.prettierrc.*</code> files</li> </ul>"},{"location":"NODEJS_LINTERS_GUIDE/#jshint","title":"JSHint","text":"<ul> <li>Version Support: 2.x</li> <li>Legacy Support: For older JavaScript projects</li> <li>Configuration: <code>.jshintrc</code> file detection</li> </ul>"},{"location":"NODEJS_LINTERS_GUIDE/#quick-start","title":"Quick Start","text":""},{"location":"NODEJS_LINTERS_GUIDE/#1-project-detection","title":"1. Project Detection","text":"<p>aider-lint-fixer automatically detects Node.js projects by looking for:</p> <pre><code># Package files\npackage.json\npackage-lock.json\nyarn.lock\n\n# TypeScript configuration\ntsconfig.json\n\n# ESLint configuration\n.eslintrc.js\n.eslintrc.json\n.eslintrc.yml\neslint.config.js\n\n# Prettier configuration\n.prettierrc\n.prettierrc.json\nprettier.config.js\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#2-basic-usage","title":"2. Basic Usage","text":"<pre><code># Automatic detection and fixing\naider-lint-fixer ./my-node-project\n\n# Specific linter\naider-lint-fixer --linter eslint ./src\n\n# TypeScript project\naider-lint-fixer --profile strict ./typescript-app\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#eslint-integration","title":"ESLint Integration","text":""},{"location":"NODEJS_LINTERS_GUIDE/#automatic-configuration-detection","title":"Automatic Configuration Detection","text":"<p>aider-lint-fixer detects and respects your existing ESLint setup:</p> <pre><code>// .eslintrc.js - Automatically detected\nmodule.exports = {\n  extends: ['@typescript-eslint/recommended'],\n  parser: '@typescript-eslint/parser',\n  plugins: ['@typescript-eslint'],\n  rules: {\n    'prefer-const': 'error',\n    'no-unused-vars': 'warn'\n  }\n};\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#supported-eslint-rules","title":"Supported ESLint Rules","text":"<p>Common rules with high fix success rates:</p> Rule Fix Rate Complexity <code>semi</code> 98% Trivial <code>quotes</code> 95% Trivial <code>indent</code> 92% Simple <code>no-unused-vars</code> 88% Simple <code>prefer-const</code> 94% Simple <code>no-trailing-spaces</code> 99% Trivial <code>max-len</code> 75% Moderate"},{"location":"NODEJS_LINTERS_GUIDE/#typescript-specific-rules","title":"TypeScript-Specific Rules","text":"<p>Enhanced support for TypeScript projects:</p> <pre><code>// Example fixes for common TypeScript issues\n// @typescript-eslint/no-unused-vars\nconst unusedVar = 'remove me'; // \u274c Removed automatically\n\n// @typescript-eslint/prefer-const\nlet unchangedValue = 'hello'; // \u274c Changed to const\n\n// @typescript-eslint/explicit-function-return-type\nfunction getValue() { // \u274c Adds return type\n  return 42;\n}\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#project-profiles","title":"Project Profiles","text":""},{"location":"NODEJS_LINTERS_GUIDE/#basic-profile-development","title":"Basic Profile (Development)","text":"<p>Optimized for development environments:</p> <pre><code>aider-lint-fixer --profile basic ./src\n</code></pre> <p>Includes: - Essential syntax errors - Code style issues - Basic TypeScript errors - Performance suggestions</p> <p>Excludes: - Strict type checking - Complex refactoring rules - Deprecated APIs (warnings only)</p>"},{"location":"NODEJS_LINTERS_GUIDE/#strict-profile-production","title":"Strict Profile (Production)","text":"<p>Comprehensive checking for production code:</p> <pre><code>aider-lint-fixer --profile strict ./src\n</code></pre> <p>Includes: - All basic profile rules - Strict TypeScript checking - Security vulnerability detection - Performance optimizations - Code complexity analysis</p>"},{"location":"NODEJS_LINTERS_GUIDE/#configuration-examples","title":"Configuration Examples","text":""},{"location":"NODEJS_LINTERS_GUIDE/#1-react-project","title":"1. React Project","text":"<pre><code>// package.json\n{\n  \"scripts\": {\n    \"lint\": \"aider-lint-fixer --profile basic ./src\",\n    \"lint:fix\": \"aider-lint-fixer --auto-fix ./src\",\n    \"lint:strict\": \"aider-lint-fixer --profile strict ./src\"\n  },\n  \"devDependencies\": {\n    \"@typescript-eslint/eslint-plugin\": \"^6.0.0\",\n    \"@typescript-eslint/parser\": \"^6.0.0\",\n    \"eslint\": \"^8.45.0\"\n  }\n}\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#2-nodejs-api-project","title":"2. Node.js API Project","text":"<pre><code>// .eslintrc.js\nmodule.exports = {\n  env: {\n    node: true,\n    es2022: true\n  },\n  extends: [\n    'eslint:recommended',\n    '@typescript-eslint/recommended'\n  ],\n  parser: '@typescript-eslint/parser',\n  plugins: ['@typescript-eslint'],\n  rules: {\n    'no-console': 'warn', // Allow console in development\n    'prefer-const': 'error'\n  }\n};\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#3-monorepo-setup","title":"3. Monorepo Setup","text":"<pre><code># Root level - lint all packages\naider-lint-fixer --recursive ./packages\n\n# Specific package\naider-lint-fixer ./packages/frontend\n\n# Different profiles per package\naider-lint-fixer --profile basic ./packages/frontend\naider-lint-fixer --profile strict ./packages/api\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#advanced-features","title":"Advanced Features","text":""},{"location":"NODEJS_LINTERS_GUIDE/#1-custom-rule-configuration","title":"1. Custom Rule Configuration","text":"<p>Override fixability for specific rules:</p> <pre><code>// .aider-lint-fixer.json\n{\n  \"linters\": {\n    \"eslint\": {\n      \"force_fix_rules\": [\n        \"semi\",\n        \"quotes\",\n        \"prefer-const\"\n      ],\n      \"skip_rules\": [\n        \"no-any\" // Too complex for auto-fix\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#2-typescript-integration","title":"2. TypeScript Integration","text":"<p>Enhanced TypeScript support:</p> <pre><code># Respect tsconfig.json settings\naider-lint-fixer --typescript-project ./tsconfig.json ./src\n\n# Multiple TypeScript projects\naider-lint-fixer \\\n  --typescript-project ./frontend/tsconfig.json ./frontend/src \\\n  --typescript-project ./backend/tsconfig.json ./backend/src\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#3-performance-optimization","title":"3. Performance Optimization","text":"<p>For large Node.js projects:</p> <pre><code># Parallel processing\naider-lint-fixer --parallel 4 ./large-project\n\n# Incremental fixing (only changed files)\naider-lint-fixer --incremental ./src\n\n# Focus on specific file types\naider-lint-fixer --include \"*.ts,*.tsx\" ./src\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#common-use-cases","title":"Common Use Cases","text":""},{"location":"NODEJS_LINTERS_GUIDE/#1-legacy-javascript-migration","title":"1. Legacy JavaScript Migration","text":"<p>Converting old JavaScript to modern standards:</p> <pre><code># Step 1: Basic cleanup\naider-lint-fixer --profile basic ./legacy-js\n\n# Step 2: Modern JavaScript features\naider-lint-fixer --profile strict --rules \"prefer-const,arrow-functions\" ./legacy-js\n\n# Step 3: TypeScript migration prep\naider-lint-fixer --typescript-prep ./legacy-js\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#2-cicd-integration","title":"2. CI/CD Integration","text":"<pre><code># .github/workflows/lint.yml\nname: Lint Check\non: [push, pull_request]\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n      - run: npm install\n      - run: npx aider-lint-fixer --strict --dry-run ./src\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#3-pre-commit-integration","title":"3. Pre-commit Integration","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: aider-lint-fixer\n        name: Aider Lint Fixer\n        entry: aider-lint-fixer\n        language: system\n        files: '\\.(js|jsx|ts|tsx)$'\n        args: ['--auto-fix']\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"NODEJS_LINTERS_GUIDE/#common-issues","title":"Common Issues","text":""},{"location":"NODEJS_LINTERS_GUIDE/#1-eslint-configuration-not-found","title":"1. ESLint Configuration Not Found","text":"<pre><code># Check configuration detection\naider-lint-fixer --debug --dry-run ./src\n\n# Manually specify configuration\naider-lint-fixer --eslint-config ./.eslintrc.js ./src\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#2-typescript-parsing-errors","title":"2. TypeScript Parsing Errors","text":"<pre><code># Verify TypeScript setup\nnpx tsc --noEmit\n\n# Use TypeScript-aware mode\naider-lint-fixer --typescript ./src\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#3-large-project-performance","title":"3. Large Project Performance","text":"<pre><code># Use incremental mode\naider-lint-fixer --incremental ./large-project\n\n# Exclude node_modules and build directories\naider-lint-fixer --exclude \"**/node_modules/**,**/dist/**\" ./project\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use .eslintignore: Exclude unnecessary files</li> <li>Incremental mode: Only process changed files</li> <li>Parallel processing: Use <code>--parallel</code> for large projects</li> <li>Targeted fixing: Focus on specific rule categories</li> </ol>"},{"location":"NODEJS_LINTERS_GUIDE/#rule-categories","title":"Rule Categories","text":""},{"location":"NODEJS_LINTERS_GUIDE/#high-success-rate-90","title":"High Success Rate (&gt;90%)","text":"<ul> <li>Formatting rules (<code>semi</code>, <code>quotes</code>, <code>indent</code>)</li> <li>Simple style rules (<code>prefer-const</code>, <code>arrow-spacing</code>)</li> <li>Basic cleanup (<code>no-trailing-spaces</code>, <code>no-multiple-empty-lines</code>)</li> </ul>"},{"location":"NODEJS_LINTERS_GUIDE/#medium-success-rate-70-90","title":"Medium Success Rate (70-90%)","text":"<ul> <li>Variable usage (<code>no-unused-vars</code>, <code>no-undef</code>)</li> <li>Import/export organization</li> <li>Basic TypeScript annotations</li> </ul>"},{"location":"NODEJS_LINTERS_GUIDE/#complex-rules-70","title":"Complex Rules (&lt;70%)","text":"<ul> <li>Logic changes (<code>no-implicit-any</code>, <code>strict-boolean-expressions</code>)</li> <li>Architectural refactoring</li> <li>Complex type inference</li> </ul>"},{"location":"NODEJS_LINTERS_GUIDE/#integration-with-other-tools","title":"Integration with Other Tools","text":""},{"location":"NODEJS_LINTERS_GUIDE/#prettier-integration","title":"Prettier Integration","text":"<pre><code># Run Prettier first, then ESLint\nprettier --write ./src &amp;&amp; aider-lint-fixer ./src\n\n# Or use combined profile\naider-lint-fixer --profile prettier-eslint ./src\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#webpackvite-integration","title":"Webpack/Vite Integration","text":"<p>Works seamlessly with build tools:</p> <pre><code>// webpack.config.js - No special configuration needed\n// Vite.config.js - Standard ESLint plugin integration\n</code></pre>"},{"location":"NODEJS_LINTERS_GUIDE/#resources","title":"Resources","text":"<ul> <li>ESLint Official Rules</li> <li>TypeScript ESLint Rules</li> <li>Installation Guide</li> <li>Linter Testing Guide</li> </ul>"},{"location":"adrs/","title":"Architectural Decision Records (ADRs)","text":"<p>This directory contains Architectural Decision Records for the aider-lint-fixer project.</p>"},{"location":"adrs/#what-are-adrs","title":"What are ADRs?","text":"<p>Architectural Decision Records (ADRs) are documents that capture important architectural decisions made along with their context and consequences. They help teams understand why certain decisions were made and provide historical context for future changes.</p>"},{"location":"adrs/#adr-format","title":"ADR Format","text":"<p>We use the MADR (Markdown Architectural Decision Records) format for consistency and readability.</p>"},{"location":"adrs/#adr-lifecycle","title":"ADR Lifecycle","text":"<ul> <li>Proposed: The ADR is proposed and under discussion</li> <li>Accepted: The ADR has been accepted and should be implemented</li> <li>Deprecated: The ADR is no longer relevant but kept for historical context</li> <li>Superseded: The ADR has been replaced by a newer ADR</li> </ul>"},{"location":"adrs/#current-adrs","title":"Current ADRs","text":"ADR Title Status 0001 Record Architecture Decisions Accepted 0002 AI Integration Architecture Accepted 0003 Modular Plugin System Accepted 0004 Hybrid Python-JavaScript Architecture Accepted 0005 Python Linter Ecosystem Support Accepted 0006 JavaScript/TypeScript Linter Ecosystem Support Accepted 0007 Infrastructure/DevOps Linter Ecosystem Support Accepted 0008 Deployment Environments and Runtime Requirements Accepted 0009 RHEL Container Build Requirements and Subscription Management Accepted"},{"location":"adrs/#creating-new-adrs","title":"Creating New ADRs","text":"<ol> <li>Copy the <code>template.md</code> file</li> <li>Rename it with the next sequential number: <code>NNNN-title-in-kebab-case.md</code></li> <li>Fill in the template with your decision details</li> <li>Update this README with the new ADR entry</li> <li>Submit for review through the normal PR process</li> </ol>"},{"location":"adrs/#guidelines","title":"Guidelines","text":"<ul> <li>Keep ADRs concise but complete</li> <li>Include context, decision, and consequences</li> <li>Consider alternatives and trade-offs</li> <li>Update status as decisions evolve</li> <li>Reference related ADRs when relevant</li> </ul>"},{"location":"adrs/0001-record-architecture-decisions/","title":"Record Architecture Decisions","text":"<ul> <li>Status: accepted</li> <li>Deciders: Development Team</li> <li>Date: 2025-08-24</li> </ul> <p>Technical Story: Establish systematic approach to documenting architectural decisions for the aider-lint-fixer project.</p>"},{"location":"adrs/0001-record-architecture-decisions/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>The aider-lint-fixer project has grown in complexity with AI integration, modular plugin architecture, and multi-language linting support. Key architectural decisions were made without formal documentation, making it difficult for new team members to understand the rationale behind design choices and creating risk for future architectural evolution.</p>"},{"location":"adrs/0001-record-architecture-decisions/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>Need for transparent decision-making process</li> <li>Knowledge preservation for team continuity</li> <li>Historical context for future architectural changes</li> <li>Compliance with software engineering best practices</li> <li>Support for methodological pragmatism framework</li> </ul>"},{"location":"adrs/0001-record-architecture-decisions/#considered-options","title":"Considered Options","text":"<ul> <li>No formal documentation (status quo)</li> <li>Lightweight decision logs in README</li> <li>Full ADR (Architectural Decision Records) process</li> <li>Wiki-based architecture documentation</li> </ul>"},{"location":"adrs/0001-record-architecture-decisions/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"Full ADR (Architectural Decision Records) process\", because it provides structured, version-controlled documentation that integrates with our existing Git workflow and supports the methodological pragmatism approach with explicit reasoning and verification processes.</p>"},{"location":"adrs/0001-record-architecture-decisions/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>Clear historical record of architectural decisions</li> <li>Improved onboarding for new team members</li> <li>Better architectural governance and consistency</li> <li>Support for systematic verification processes</li> <li>Integration with existing documentation structure</li> </ul>"},{"location":"adrs/0001-record-architecture-decisions/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>Additional overhead for documenting decisions</li> <li>Requires discipline to maintain ADR process</li> <li>Initial time investment to document existing decisions</li> </ul>"},{"location":"adrs/0001-record-architecture-decisions/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adrs/0001-record-architecture-decisions/#no-formal-documentation-status-quo","title":"No formal documentation (status quo)","text":"<ul> <li>Good, because no additional process overhead</li> <li>Bad, because knowledge is lost when team members leave</li> <li>Bad, because decision rationale is unclear to new contributors</li> <li>Bad, because architectural inconsistencies can emerge</li> </ul>"},{"location":"adrs/0001-record-architecture-decisions/#lightweight-decision-logs-in-readme","title":"Lightweight decision logs in README","text":"<ul> <li>Good, because minimal process overhead</li> <li>Good, because centralized location</li> <li>Bad, because lacks structured format</li> <li>Bad, because becomes unwieldy as project grows</li> </ul>"},{"location":"adrs/0001-record-architecture-decisions/#full-adr-architectural-decision-records-process","title":"Full ADR (Architectural Decision Records) process","text":"<ul> <li>Good, because structured and standardized format</li> <li>Good, because version controlled with code</li> <li>Good, because supports methodological pragmatism</li> <li>Good, because widely adopted industry practice</li> <li>Bad, because requires process discipline</li> <li>Bad, because initial setup effort</li> </ul>"},{"location":"adrs/0001-record-architecture-decisions/#wiki-based-architecture-documentation","title":"Wiki-based architecture documentation","text":"<ul> <li>Good, because easy to edit and maintain</li> <li>Good, because supports rich formatting</li> <li>Bad, because separate from code repository</li> <li>Bad, because lacks version control integration</li> <li>Bad, because can become stale</li> </ul>"},{"location":"adrs/0001-record-architecture-decisions/#links","title":"Links","text":"<ul> <li>MADR Template - Markdown Architectural Decision Records format</li> <li>ADR GitHub Organization - Community resources for ADRs</li> </ul>"},{"location":"adrs/0002-ai-integration-architecture/","title":"AI Integration Architecture","text":"<ul> <li>Status: accepted</li> <li>Deciders: Development Team</li> <li>Date: 2025-08-24</li> </ul> <p>Technical Story: Design architecture for integrating AI-powered code fixing capabilities using aider.chat.</p>"},{"location":"adrs/0002-ai-integration-architecture/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>The aider-lint-fixer project requires AI capabilities to automatically fix lint errors detected in codebases. The system needs to integrate with aider.chat for LLM communication while maintaining modularity, error handling, and support for different AI providers.</p>"},{"location":"adrs/0002-ai-integration-architecture/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>Need for intelligent code fixing beyond simple pattern matching</li> <li>Integration with aider.chat ecosystem</li> <li>Support for multiple LLM providers</li> <li>Error classification and analysis capabilities</li> <li>Maintainable and testable AI integration layer</li> </ul>"},{"location":"adrs/0002-ai-integration-architecture/#considered-options","title":"Considered Options","text":"<ul> <li>Direct LLM API integration (OpenAI, Anthropic, etc.)</li> <li>aider.chat integration with wrapper layer</li> <li>Custom AI pipeline with multiple providers</li> <li>Rule-based fixing with AI fallback</li> </ul>"},{"location":"adrs/0002-ai-integration-architecture/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"aider.chat integration with wrapper layer\", because it leverages proven AI coding capabilities while providing abstraction for testing and future flexibility.</p>"},{"location":"adrs/0002-ai-integration-architecture/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>Proven AI coding capabilities from aider.chat</li> <li>Abstraction layer allows for testing and mocking</li> <li>Support for multiple LLM providers through aider</li> <li>Reduced complexity in AI prompt engineering</li> <li>Community support and ongoing development</li> </ul>"},{"location":"adrs/0002-ai-integration-architecture/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>Dependency on external aider.chat library</li> <li>Potential version compatibility issues</li> <li>Limited control over AI prompt strategies</li> <li>Additional abstraction layer complexity</li> </ul>"},{"location":"adrs/0002-ai-integration-architecture/#architecture-components","title":"Architecture Components","text":""},{"location":"adrs/0002-ai-integration-architecture/#aiderintegration-class","title":"AiderIntegration Class","text":"<ul> <li>Primary interface for AI communication</li> <li>Handles aider.chat session management</li> <li>Provides error handling and retry logic</li> <li>Supports configuration for different LLM providers</li> </ul>"},{"location":"adrs/0002-ai-integration-architecture/#erroranalyzer-class","title":"ErrorAnalyzer Class","text":"<ul> <li>Analyzes lint errors for AI fixing suitability</li> <li>Classifies error types and complexity</li> <li>Provides context enrichment for AI prompts</li> <li>Tracks fixing success rates</li> </ul>"},{"location":"adrs/0002-ai-integration-architecture/#smarterrorclassifier-class","title":"SmartErrorClassifier Class","text":"<ul> <li>Pattern matching for common error types</li> <li>Machine learning-based error categorization</li> <li>Confidence scoring for fix recommendations</li> <li>Learning from successful fixes</li> </ul>"},{"location":"adrs/0002-ai-integration-architecture/#integration-flow","title":"Integration Flow","text":"<ol> <li>Error Detection: Linters identify code issues</li> <li>Error Analysis: ErrorAnalyzer classifies and enriches errors</li> <li>AI Processing: AiderIntegration sends context to aider.chat</li> <li>Fix Generation: AI generates code fixes</li> <li>Validation: Fixes are validated before application</li> <li>Learning: Results feed back into classifier</li> </ol>"},{"location":"adrs/0002-ai-integration-architecture/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adrs/0002-ai-integration-architecture/#direct-llm-api-integration","title":"Direct LLM API integration","text":"<ul> <li>Good, because full control over prompts and responses</li> <li>Good, because no additional dependencies</li> <li>Bad, because requires extensive prompt engineering</li> <li>Bad, because lacks proven coding-specific capabilities</li> <li>Bad, because requires handling multiple provider APIs</li> </ul>"},{"location":"adrs/0002-ai-integration-architecture/#aiderchat-integration-with-wrapper-layer","title":"aider.chat integration with wrapper layer","text":"<ul> <li>Good, because proven AI coding capabilities</li> <li>Good, because abstraction allows testing</li> <li>Good, because supports multiple LLM providers</li> <li>Good, because active community development</li> <li>Bad, because external dependency</li> <li>Bad, because limited prompt customization</li> </ul>"},{"location":"adrs/0002-ai-integration-architecture/#custom-ai-pipeline-with-multiple-providers","title":"Custom AI pipeline with multiple providers","text":"<ul> <li>Good, because maximum flexibility</li> <li>Good, because provider independence</li> <li>Bad, because significant development overhead</li> <li>Bad, because requires AI expertise</li> <li>Bad, because maintenance burden</li> </ul>"},{"location":"adrs/0002-ai-integration-architecture/#rule-based-fixing-with-ai-fallback","title":"Rule-based fixing with AI fallback","text":"<ul> <li>Good, because fast for common cases</li> <li>Good, because predictable behavior</li> <li>Bad, because limited to known patterns</li> <li>Bad, because requires extensive rule maintenance</li> <li>Bad, because poor handling of complex cases</li> </ul>"},{"location":"adrs/0002-ai-integration-architecture/#links","title":"Links","text":"<ul> <li>aider.chat Documentation - AI pair programming tool</li> <li>ADR-0003 - Related plugin architecture decisions</li> </ul>"},{"location":"adrs/0003-modular-plugin-system/","title":"Modular Plugin System","text":"<ul> <li>Status: accepted</li> <li>Deciders: Development Team</li> <li>Date: 2025-08-24</li> </ul> <p>Technical Story: Design modular architecture for supporting multiple linting tools and languages.</p>"},{"location":"adrs/0003-modular-plugin-system/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>The aider-lint-fixer project needs to support multiple linting tools (flake8, pylint, ansible-lint, etc.) and programming languages. A rigid, monolithic approach would make it difficult to add new linters or customize behavior for different project types.</p>"},{"location":"adrs/0003-modular-plugin-system/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>Support for multiple linting tools and languages</li> <li>Easy extensibility for new linters</li> <li>Consistent interface across different linter implementations</li> <li>Testability and maintainability</li> <li>Configuration flexibility per linter type</li> </ul>"},{"location":"adrs/0003-modular-plugin-system/#considered-options","title":"Considered Options","text":"<ul> <li>Monolithic linter with conditional logic</li> <li>Plugin system with base class inheritance</li> <li>Composition-based plugin architecture</li> <li>External plugin system with discovery</li> </ul>"},{"location":"adrs/0003-modular-plugin-system/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"Plugin system with base class inheritance\", because it provides clear structure, enforces consistent interfaces, and allows for easy testing while maintaining simplicity.</p>"},{"location":"adrs/0003-modular-plugin-system/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>Clear separation of concerns per linter type</li> <li>Consistent interface across all linters</li> <li>Easy to add new linter support</li> <li>Testable in isolation</li> <li>Configuration can be linter-specific</li> </ul>"},{"location":"adrs/0003-modular-plugin-system/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>Additional abstraction complexity</li> <li>Potential code duplication across similar linters</li> <li>Base class changes affect all plugins</li> </ul>"},{"location":"adrs/0003-modular-plugin-system/#architecture-design","title":"Architecture Design","text":""},{"location":"adrs/0003-modular-plugin-system/#base-linter-class","title":"Base Linter Class","text":"<pre><code>class BaseLinter:\n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n\n    def detect_issues(self, file_path: str) -&gt; List[LintIssue]:\n        \"\"\"Detect lint issues in the given file.\"\"\"\n        raise NotImplementedError\n\n    def can_handle_file(self, file_path: str) -&gt; bool:\n        \"\"\"Check if this linter can handle the file type.\"\"\"\n        raise NotImplementedError\n\n    def get_fix_suggestions(self, issue: LintIssue) -&gt; List[FixSuggestion]:\n        \"\"\"Get AI-powered fix suggestions for the issue.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"adrs/0003-modular-plugin-system/#linter-implementations","title":"Linter Implementations","text":"<ul> <li><code>PythonFlake8Linter</code>: Handles Python files with flake8</li> <li><code>PythonPylintLinter</code>: Handles Python files with pylint</li> <li><code>AnsibleLintLinter</code>: Handles Ansible YAML files</li> <li><code>JavaScriptESLintLinter</code>: Handles JavaScript/TypeScript files</li> </ul>"},{"location":"adrs/0003-modular-plugin-system/#plugin-discovery","title":"Plugin Discovery","text":"<ul> <li>Automatic discovery of linter classes in <code>aider_lint_fixer/linters/</code></li> <li>Registration system for third-party plugins</li> <li>Configuration-driven linter selection</li> </ul>"},{"location":"adrs/0003-modular-plugin-system/#integration-points","title":"Integration Points","text":""},{"location":"adrs/0003-modular-plugin-system/#with-ai-system","title":"With AI System","text":"<ul> <li>Each linter provides context-specific information for AI prompts</li> <li>Linter-specific fix validation logic</li> <li>Error classification tailored to linter type</li> </ul>"},{"location":"adrs/0003-modular-plugin-system/#with-configuration-system","title":"With Configuration System","text":"<ul> <li>Per-linter configuration sections</li> <li>Global configuration inheritance</li> <li>Environment-specific overrides</li> </ul>"},{"location":"adrs/0003-modular-plugin-system/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adrs/0003-modular-plugin-system/#monolithic-linter-with-conditional-logic","title":"Monolithic linter with conditional logic","text":"<ul> <li>Good, because simple implementation</li> <li>Good, because no abstraction overhead</li> <li>Bad, because becomes unwieldy with multiple linters</li> <li>Bad, because difficult to test individual linter logic</li> <li>Bad, because tight coupling between linter types</li> </ul>"},{"location":"adrs/0003-modular-plugin-system/#plugin-system-with-base-class-inheritance","title":"Plugin system with base class inheritance","text":"<ul> <li>Good, because clear structure and interfaces</li> <li>Good, because easy to add new linters</li> <li>Good, because testable in isolation</li> <li>Good, because consistent behavior across linters</li> <li>Bad, because additional abstraction complexity</li> <li>Bad, because base class changes affect all plugins</li> </ul>"},{"location":"adrs/0003-modular-plugin-system/#composition-based-plugin-architecture","title":"Composition-based plugin architecture","text":"<ul> <li>Good, because flexible composition of behaviors</li> <li>Good, because avoids inheritance issues</li> <li>Bad, because more complex to implement</li> <li>Bad, because less clear interface contracts</li> <li>Bad, because potential for inconsistent implementations</li> </ul>"},{"location":"adrs/0003-modular-plugin-system/#external-plugin-system-with-discovery","title":"External plugin system with discovery","text":"<ul> <li>Good, because maximum extensibility</li> <li>Good, because third-party plugin support</li> <li>Bad, because complex plugin discovery mechanism</li> <li>Bad, because security concerns with external plugins</li> <li>Bad, because dependency management complexity</li> </ul>"},{"location":"adrs/0003-modular-plugin-system/#links","title":"Links","text":"<ul> <li>ADR-0002 - AI integration that works with this plugin system</li> <li>ADR-0004 - Python-first approach influences plugin priorities</li> </ul>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/","title":"ADR 0004: Hybrid Python-JavaScript Linter Architecture","text":"<p>Status: Accepted Date: 2024-08-24 Deciders: Development Team  </p>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#context","title":"Context","text":"<p>aider-lint-fixer needs to support multiple programming languages and their associated linting tools. The primary languages in scope are Python and JavaScript/TypeScript, each with distinct ecosystems, tooling, and best practices. A unified architecture must accommodate both language ecosystems while maintaining performance, extensibility, and ease of use.</p>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#problem-statement","title":"Problem Statement","text":"<p>Modern development projects increasingly use multiple programming languages: - Python: Ansible playbooks, automation scripts, backend services - JavaScript/TypeScript: Frontend applications, Node.js services, build tools - Mixed Projects: Full-stack applications, DevOps toolchains, documentation sites</p> <p>Each language ecosystem has mature linting tools with different: - Configuration formats (YAML, JSON, TOML, INI) - Execution models (CLI tools, language servers, plugins) - Output formats (JSON, XML, custom text formats) - Installation methods (pip, npm, system packages)</p>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#decision","title":"Decision","text":"<p>We will implement a hybrid architecture that provides unified orchestration while preserving language-specific optimizations.</p>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#core-architecture-components","title":"Core Architecture Components","text":""},{"location":"adrs/0004-hybrid-python-javascript-architecture/#1-unified-plugin-interface","title":"1. Unified Plugin Interface","text":"<pre><code>class LinterPlugin(ABC):\n    \"\"\"Abstract base class for all linter plugins\"\"\"\n\n    @abstractmethod\n    def detect_files(self, workspace: Path) -&gt; List[Path]:\n        \"\"\"Detect files this linter can process\"\"\"\n\n    @abstractmethod\n    def run_linter(self, files: List[Path], config: Dict) -&gt; LinterResult:\n        \"\"\"Execute linter and return structured results\"\"\"\n\n    @abstractmethod\n    def get_default_config(self) -&gt; Dict:\n        \"\"\"Return default configuration for this linter\"\"\"\n</code></pre>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#2-language-specific-implementations","title":"2. Language-Specific Implementations","text":"<p>Python Linter Ecosystem: - Base Class: <code>PythonLinterBase</code> - Implementations: <code>Flake8Linter</code>, <code>PylintLinter</code>, <code>MypyLinter</code> - Package Management: pip-based installation and virtual environments - Configuration: pyproject.toml, setup.cfg, .flake8 files</p> <p>JavaScript Linter Ecosystem: - Base Class: <code>JavaScriptLinterBase</code> - Implementations: <code>ESLintLinter</code>, <code>JSHintLinter</code>, <code>PrettierLinter</code> - Package Management: npm/yarn-based installation - Configuration: .eslintrc.js, package.json, prettier.config.js</p>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#3-orchestration-layer","title":"3. Orchestration Layer","text":"<pre><code>class LinterOrchestrator:\n    \"\"\"Coordinates execution across multiple language ecosystems\"\"\"\n\n    def __init__(self):\n        self.python_linters = []\n        self.javascript_linters = []\n        self.ansible_linters = []\n\n    def discover_linters(self, workspace: Path) -&gt; Dict[str, List[LinterPlugin]]:\n        \"\"\"Auto-detect applicable linters based on project structure\"\"\"\n\n    def execute_parallel(self, linter_groups: Dict) -&gt; CombinedResults:\n        \"\"\"Execute linter groups in parallel for performance\"\"\"\n</code></pre>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#integration-patterns","title":"Integration Patterns","text":""},{"location":"adrs/0004-hybrid-python-javascript-architecture/#1-configuration-unification","title":"1. Configuration Unification","text":"<pre><code># aider-lint-config.yaml\nlinters:\n  python:\n    - name: flake8\n      enabled: true\n      config_file: .flake8\n    - name: mypy\n      enabled: true\n      strict_mode: true\n\n  javascript:\n    - name: eslint\n      enabled: true\n      config_file: .eslintrc.js\n    - name: prettier\n      enabled: true\n      check_only: true\n\nprofiles:\n  development:\n    strict: false\n    auto_fix: true\n\n  ci:\n    strict: true\n    fail_fast: true\n</code></pre>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#2-result-normalization","title":"2. Result Normalization","text":"<pre><code>@dataclass\nclass LinterIssue:\n    \"\"\"Normalized issue representation across all linters\"\"\"\n    file_path: Path\n    line: int\n    column: int\n    severity: Severity  # ERROR, WARNING, INFO\n    rule_id: str\n    message: str\n    linter_name: str\n    fixable: bool = False\n\n@dataclass\nclass LinterResult:\n    \"\"\"Normalized result container\"\"\"\n    issues: List[LinterIssue]\n    execution_time: float\n    linter_version: str\n    config_used: Dict\n</code></pre>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#3-dependency-management","title":"3. Dependency Management","text":"<p>Python Dependencies: <pre><code># Managed via pip and virtual environments\nPYTHON_LINTERS = {\n    'flake8': 'flake8&gt;=6.0.0',\n    'pylint': 'pylint&gt;=2.17.0',\n    'mypy': 'mypy&gt;=1.5.0'\n}\n</code></pre></p> <p>JavaScript Dependencies: <pre><code># Managed via npm with package.json\nJAVASCRIPT_LINTERS = {\n    'eslint': '^8.45.0',\n    'jshint': '^2.13.6',\n    'prettier': '^3.0.0'\n}\n</code></pre></p>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#rationale","title":"Rationale","text":""},{"location":"adrs/0004-hybrid-python-javascript-architecture/#why-hybrid-architecture","title":"Why Hybrid Architecture?","text":"<ol> <li>Language Ecosystem Respect: Each language has mature tooling that works best within its native environment</li> <li>Performance Optimization: Language-specific optimizations (e.g., Node.js for JavaScript tools)</li> <li>Configuration Familiarity: Developers can use existing configuration files</li> <li>Extensibility: Easy to add new linters within each ecosystem</li> <li>Maintenance: Separate concerns reduce complexity</li> </ol>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#alternative-approaches-considered","title":"Alternative Approaches Considered","text":""},{"location":"adrs/0004-hybrid-python-javascript-architecture/#1-single-language-implementation","title":"1. Single Language Implementation","text":"<p>Rejected: Would require reimplementing mature linting logic, losing ecosystem benefits</p>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#2-shell-script-orchestration","title":"2. Shell Script Orchestration","text":"<p>Rejected: Poor error handling, difficult testing, limited cross-platform support</p>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#3-docker-only-approach","title":"3. Docker-Only Approach","text":"<p>Rejected: Performance overhead, complexity for simple use cases</p>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"adrs/0004-hybrid-python-javascript-architecture/#phase-1-core-infrastructure","title":"Phase 1: Core Infrastructure","text":"<ul> <li>Implement abstract base classes and interfaces</li> <li>Create Python linter base class and core implementations</li> <li>Develop result normalization and aggregation</li> </ul>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#phase-2-javascript-integration","title":"Phase 2: JavaScript Integration","text":"<ul> <li>Implement JavaScript linter base class</li> <li>Add ESLint, JSHint, and Prettier support</li> <li>Create npm dependency management</li> </ul>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#phase-3-advanced-features","title":"Phase 3: Advanced Features","text":"<ul> <li>Parallel execution optimization</li> <li>Configuration file auto-discovery</li> <li>Auto-fix capabilities across languages</li> </ul>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#phase-4-ecosystem-extensions","title":"Phase 4: Ecosystem Extensions","text":"<ul> <li>Additional Python linters (bandit, black, isort)</li> <li>TypeScript-specific tooling</li> <li>YAML and Markdown linters</li> </ul>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#consequences","title":"Consequences","text":""},{"location":"adrs/0004-hybrid-python-javascript-architecture/#positive","title":"Positive","text":"<ul> <li>Unified Experience: Single command to lint multi-language projects</li> <li>Best-of-Breed Tools: Leverage mature, language-specific linters</li> <li>Performance: Parallel execution across language ecosystems</li> <li>Extensibility: Clear plugin architecture for new linters</li> <li>Configuration Flexibility: Support both unified and language-specific configs</li> </ul>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#negative","title":"Negative","text":"<ul> <li>Complexity: More complex than single-language solutions</li> <li>Dependencies: Requires both Python and Node.js environments</li> <li>Maintenance: Need to track multiple ecosystem changes</li> <li>Installation: More complex setup for full functionality</li> </ul>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#risks-and-mitigations","title":"Risks and Mitigations","text":"Risk Impact Mitigation Dependency conflicts High Use virtual environments and version pinning Performance degradation Medium Implement parallel execution and caching Configuration complexity Medium Provide sensible defaults and auto-discovery Ecosystem fragmentation Low Monitor and adapt to tooling changes"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#validation","title":"Validation","text":""},{"location":"adrs/0004-hybrid-python-javascript-architecture/#success-criteria","title":"Success Criteria","text":"<ol> <li>Functionality: Successfully lint Python and JavaScript files in mixed projects</li> <li>Performance: &lt;2x overhead compared to running linters individually</li> <li>Usability: Single configuration file for multi-language projects</li> <li>Extensibility: Add new linter with &lt;50 lines of code</li> </ol>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit Tests: Each linter plugin independently</li> <li>Integration Tests: Multi-language project scenarios</li> <li>Performance Tests: Large codebases with mixed languages</li> <li>Compatibility Tests: Various Python and Node.js versions</li> </ul>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#related-adrs","title":"Related ADRs","text":"<ul> <li>ADR 0001: Record Architecture Decisions</li> <li>ADR 0002: AI Integration Architecture</li> <li>ADR 0003: Modular Plugin System</li> <li>ADR 0005: Python Linter Ecosystem</li> <li>ADR 0006: JavaScript/TypeScript Linter Ecosystem</li> </ul>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#implementation-evidence","title":"Implementation Evidence","text":""},{"location":"adrs/0004-hybrid-python-javascript-architecture/#file-structure","title":"File Structure","text":"<pre><code>aider_lint_fixer/\n\u251c\u2500\u2500 linters/\n\u2502   \u251c\u2500\u2500 base.py              # Abstract base classes\n\u2502   \u251c\u2500\u2500 python/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 base.py          # PythonLinterBase\n\u2502   \u2502   \u251c\u2500\u2500 flake8.py        # Flake8Linter\n\u2502   \u2502   \u251c\u2500\u2500 pylint.py        # PylintLinter\n\u2502   \u2502   \u2514\u2500\u2500 mypy.py          # MypyLinter\n\u2502   \u251c\u2500\u2500 javascript/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 base.py          # JavaScriptLinterBase\n\u2502   \u2502   \u251c\u2500\u2500 eslint.py        # ESLintLinter\n\u2502   \u2502   \u251c\u2500\u2500 jshint.py        # JSHintLinter\n\u2502   \u2502   \u2514\u2500\u2500 prettier.py      # PrettierLinter\n\u2502   \u2514\u2500\u2500 orchestrator.py      # LinterOrchestrator\n\u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 defaults.py          # Default configurations\n\u2502   \u2514\u2500\u2500 loader.py            # Configuration loading\n\u2514\u2500\u2500 results/\n    \u251c\u2500\u2500 normalizer.py        # Result normalization\n    \u2514\u2500\u2500 formatter.py         # Output formatting\n</code></pre>"},{"location":"adrs/0004-hybrid-python-javascript-architecture/#configuration-examples","title":"Configuration Examples","text":"<p>Unified Configuration: <pre><code># .aider-lint.yaml\nlinters:\n  - flake8\n  - eslint\n  - ansible-lint\n\nprofiles:\n  strict:\n    python:\n      flake8:\n        max-line-length: 88\n    javascript:\n      eslint:\n        rules:\n          semi: error\n</code></pre></p> <p>Language-Specific Fallback: <pre><code># Automatically discovers and uses:\n# - .flake8, pyproject.toml for Python\n# - .eslintrc.js, package.json for JavaScript\n# - .ansible-lint for Ansible\n</code></pre></p> <p>This hybrid architecture provides the foundation for supporting multiple programming languages while maintaining the flexibility and performance characteristics needed for modern development workflows.</p>"},{"location":"adrs/0004-python-ecosystem-focus/","title":"Hybrid Python-JavaScript Architecture","text":"<ul> <li>Status: accepted</li> <li>Deciders: Development Team</li> <li>Date: 2025-08-24</li> </ul> <p>Technical Story: Establish hybrid Python-JavaScript architecture for aider-lint-fixer to support comprehensive multi-language linting capabilities.</p>"},{"location":"adrs/0004-python-ecosystem-focus/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>The aider-lint-fixer project supports multiple programming languages and their respective linting tools. While the core AI integration and orchestration is Python-based, comprehensive JavaScript/TypeScript linting support requires deep integration with Node.js ecosystem tools like ESLint, Prettier, and JSHint.</p>"},{"location":"adrs/0004-python-ecosystem-focus/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>Multi-language linting support requirements</li> <li>Integration with existing JavaScript/TypeScript toolchains</li> <li>Leveraging best-in-class linters for each ecosystem</li> <li>Maintaining consistent Python-based AI integration</li> <li>Supporting diverse development environments</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#considered-options","title":"Considered Options","text":"<ul> <li>Pure Python implementation with subprocess calls</li> <li>Hybrid Python-JavaScript architecture</li> <li>Separate Python and Node.js tools</li> <li>Language-agnostic approach with multiple runtimes</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"Hybrid Python-JavaScript architecture\", because it provides the best balance of Python-based AI capabilities with native JavaScript ecosystem integration for optimal linting results.</p>"},{"location":"adrs/0004-python-ecosystem-focus/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>Native JavaScript/TypeScript linting with ESLint, Prettier, JSHint</li> <li>Python-based AI integration and orchestration</li> <li>Best-in-class tools for each language ecosystem</li> <li>Comprehensive multi-language project support</li> <li>Flexible architecture supporting diverse development workflows</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>Increased complexity with dual runtime requirements</li> <li>Dependency management across Python and Node.js ecosystems</li> <li>Potential version compatibility issues between ecosystems</li> <li>Higher setup complexity for development environments</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#architecture-components","title":"Architecture Components","text":""},{"location":"adrs/0004-python-ecosystem-focus/#python-core-orchestration-layer","title":"Python Core (Orchestration Layer)","text":"<ul> <li>Python Version: 3.11+ (as defined in pyproject.toml)</li> <li>Package Management: pip with pyproject.toml</li> <li>AI Integration: aider-chat library for LLM communication</li> <li>Core Classes: AiderIntegration, ErrorAnalyzer, SmartErrorClassifier</li> <li>Plugin System: Base linter classes with inheritance</li> <li>Configuration: ConfigManager with YAML support</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#javascriptnodejs-integration-linting-layer","title":"JavaScript/Node.js Integration (Linting Layer)","text":"<ul> <li>ESLint: Full integration with v8.x/9.x support</li> <li>TypeScript: Native support via @typescript-eslint</li> <li>Prettier: Code formatting integration</li> <li>JSHint: Legacy JavaScript project support</li> <li>Configuration Detection: Automatic .eslintrc.*, package.json detection</li> <li>Execution: npx/npm script integration with JSON output parsing</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#supported-linters-by-ecosystem","title":"Supported Linters by Ecosystem","text":""},{"location":"adrs/0004-python-ecosystem-focus/#python-ecosystem","title":"Python Ecosystem","text":"<ul> <li>flake8: Style and error checking</li> <li>pylint: Comprehensive code analysis</li> <li>mypy: Static type checking</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#javascripttypescript-ecosystem","title":"JavaScript/TypeScript Ecosystem","text":"<ul> <li>ESLint: Primary linting with extensive rule support</li> <li>Prettier: Code formatting (integrated with ESLint)</li> <li>JSHint: Legacy project support</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#infrastructuredevops","title":"Infrastructure/DevOps","text":"<ul> <li>ansible-lint: Ansible playbook and role validation</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"adrs/0004-python-ecosystem-focus/#dependency-management","title":"Dependency Management","text":"<ul> <li>Primary dependencies in pyproject.toml</li> <li>Optional dependencies grouped by functionality (dev, linters, learning)</li> <li>Pin major versions for stability</li> <li>Regular dependency audits for security</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#code-organization","title":"Code Organization","text":"<ul> <li>Main Package: <code>aider_lint_fixer/</code> (Python orchestration)</li> <li>Plugin System: <code>aider_lint_fixer/linters/</code> with language-specific implementations</li> <li>Configuration: YAML format with per-linter sections</li> <li>Tests: Mirror source structure with integration tests for both ecosystems</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#integration-patterns","title":"Integration Patterns","text":"<ul> <li>ESLint Integration: Native npx/npm execution with JSON output parsing</li> <li>Configuration Detection: Automatic discovery of .eslintrc.*, tsconfig.json, package.json</li> <li>TypeScript Support: Dynamic extension detection based on project setup</li> <li>Error Classification: Language-aware error analysis and fix suggestions</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adrs/0004-python-ecosystem-focus/#pure-python-implementation-with-subprocess-calls","title":"Pure Python implementation with subprocess calls","text":"<ul> <li>Good, because single runtime environment</li> <li>Good, because consistent Python development practices</li> <li>Good, because simplified deployment</li> <li>Bad, because limited JavaScript ecosystem integration</li> <li>Bad, because subprocess overhead and complexity</li> <li>Bad, because difficult configuration detection for JS tools</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#hybrid-python-javascript-architecture_1","title":"Hybrid Python-JavaScript architecture","text":"<ul> <li>Good, because native JavaScript/TypeScript tooling integration</li> <li>Good, because best-in-class linters for each ecosystem</li> <li>Good, because comprehensive multi-language support</li> <li>Good, because leverages existing developer toolchains</li> <li>Bad, because dual runtime complexity</li> <li>Bad, because increased setup requirements</li> <li>Bad, because cross-ecosystem dependency management</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#separate-python-and-nodejs-tools","title":"Separate Python and Node.js tools","text":"<ul> <li>Good, because clear separation of concerns</li> <li>Good, because independent versioning and deployment</li> <li>Bad, because fragmented user experience</li> <li>Bad, because duplicate configuration and setup</li> <li>Bad, because no shared AI integration benefits</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#language-agnostic-approach-with-multiple-runtimes","title":"Language-agnostic approach with multiple runtimes","text":"<ul> <li>Good, because maximum flexibility for future languages</li> <li>Good, because pluggable architecture</li> <li>Bad, because excessive complexity for current requirements</li> <li>Bad, because maintenance burden across multiple ecosystems</li> <li>Bad, because unclear technology focus</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#migration-actions","title":"Migration Actions","text":""},{"location":"adrs/0004-python-ecosystem-focus/#documentation-updates","title":"Documentation Updates","text":"<ul> <li>\u2705 Ecosystem analysis corrected to reflect Python focus</li> <li>\u2705 ADRs document Python-first architecture</li> <li>\ud83d\udd04 Update any remaining Node.js references in documentation</li> <li>\ud83d\udd04 Ensure all code examples use Python syntax</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#development-process","title":"Development Process","text":"<ul> <li>\u2705 pyproject.toml defines complete Python toolchain</li> <li>\u2705 GitHub Actions workflows support Python testing</li> <li>\ud83d\udd04 Validate all development scripts use Python</li> <li>\ud83d\udd04 Ensure container images are Python-based</li> </ul>"},{"location":"adrs/0004-python-ecosystem-focus/#links","title":"Links","text":"<ul> <li>ADR-0002 - AI integration using Python aider-chat library</li> <li>ADR-0003 - Python-based plugin architecture</li> <li>Project Configuration - Complete Python project configuration in pyproject.toml</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/","title":"Python Linter Ecosystem Support","text":"<ul> <li>Status: accepted</li> <li>Deciders: Development Team</li> <li>Date: 2025-08-24</li> </ul> <p>Technical Story: Define comprehensive Python linting support with flake8, pylint, and mypy integration.</p>"},{"location":"adrs/0005-python-linter-ecosystem/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>Python projects require multiple complementary linting tools to ensure code quality, style consistency, and type safety. Each tool serves different purposes and provides unique value in the development workflow.</p>"},{"location":"adrs/0005-python-linter-ecosystem/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>Comprehensive Python code quality coverage</li> <li>Integration with existing Python development workflows</li> <li>Support for different Python project types and complexity levels</li> <li>Compatibility with modern Python features (3.11+)</li> <li>AI-assisted fixing capabilities for Python-specific issues</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/#considered-options","title":"Considered Options","text":"<ul> <li>Single linter approach (flake8 only)</li> <li>Comprehensive multi-linter approach (flake8 + pylint + mypy)</li> <li>Configurable linter selection based on project needs</li> <li>External tool integration without built-in support</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"Comprehensive multi-linter approach (flake8 + pylint + mypy)\", because each tool provides complementary analysis that together ensures comprehensive Python code quality.</p>"},{"location":"adrs/0005-python-linter-ecosystem/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>Complete coverage of Python code quality aspects</li> <li>Flexibility to enable/disable specific linters per project</li> <li>Leverages existing Python developer toolchain knowledge</li> <li>High success rate for AI-assisted fixes on Python code</li> <li>Support for both style and semantic error detection</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>Increased complexity with multiple tool configurations</li> <li>Potential for conflicting rules between linters</li> <li>Higher resource usage when running all linters</li> <li>Learning curve for teams unfamiliar with specific tools</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/#python-linter-implementations","title":"Python Linter Implementations","text":""},{"location":"adrs/0005-python-linter-ecosystem/#flake8-style-and-error-checking","title":"flake8 (Style and Error Checking)","text":"<ul> <li>Purpose: PEP 8 style guide enforcement and basic error detection</li> <li>Strengths: Fast execution, widely adopted, extensive plugin ecosystem</li> <li>Fix Success Rate: 85-95% for style issues</li> <li>Configuration: <code>.flake8</code>, <code>setup.cfg</code>, <code>pyproject.toml</code> support</li> <li>Integration: Direct subprocess execution with structured output parsing</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/#pylint-comprehensive-code-analysis","title":"pylint (Comprehensive Code Analysis)","text":"<ul> <li>Purpose: Advanced static analysis, code complexity, and quality metrics</li> <li>Strengths: Deep analysis, refactoring suggestions, code smell detection</li> <li>Fix Success Rate: 60-80% (varies by rule complexity)</li> <li>Configuration: <code>.pylintrc</code>, <code>pyproject.toml</code> support</li> <li>Integration: JSON output format for structured error parsing</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/#mypy-static-type-checking","title":"mypy (Static Type Checking)","text":"<ul> <li>Purpose: Type annotation validation and type safety enforcement</li> <li>Strengths: Catches type-related bugs, supports gradual typing</li> <li>Fix Success Rate: 70-85% for type annotation issues</li> <li>Configuration: <code>mypy.ini</code>, <code>pyproject.toml</code> support</li> <li>Integration: Structured output with precise error locations</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"adrs/0005-python-linter-ecosystem/#plugin-architecture","title":"Plugin Architecture","text":"<pre><code>class PythonFlake8Linter(BaseLinter):\n    def build_command(self, file_paths: List[str]) -&gt; List[str]:\n        return [\"flake8\", \"--format=json\"] + file_paths\n\n    def parse_output(self, stdout: str) -&gt; List[LintError]:\n        # Parse flake8 output into structured errors\n        pass\n\nclass PythonPylintLinter(BaseLinter):\n    def build_command(self, file_paths: List[str]) -&gt; List[str]:\n        return [\"pylint\", \"--output-format=json\"] + file_paths\n</code></pre>"},{"location":"adrs/0005-python-linter-ecosystem/#configuration-management","title":"Configuration Management","text":"<ul> <li>Project Detection: Automatic detection via <code>pyproject.toml</code>, <code>setup.py</code>, <code>requirements.txt</code></li> <li>Configuration Hierarchy: Project-specific \u2192 User-specific \u2192 Default configurations</li> <li>Rule Customization: Per-project rule enabling/disabling</li> <li>Profile Support: Basic, strict, and custom profiles</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/#ai-integration-points","title":"AI Integration Points","text":"<ul> <li>Error Classification: Python-specific error categorization for better AI context</li> <li>Fix Suggestions: Linter-aware fix generation with Python syntax understanding</li> <li>Validation: Post-fix validation using the same linters to ensure correctness</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adrs/0005-python-linter-ecosystem/#single-linter-approach-flake8-only","title":"Single linter approach (flake8 only)","text":"<ul> <li>Good, because simple setup and configuration</li> <li>Good, because fast execution and minimal resource usage</li> <li>Good, because widely known and adopted</li> <li>Bad, because limited analysis depth</li> <li>Bad, because misses type-related issues</li> <li>Bad, because no advanced code quality metrics</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/#comprehensive-multi-linter-approach","title":"Comprehensive multi-linter approach","text":"<ul> <li>Good, because complete Python code quality coverage</li> <li>Good, because leverages best-in-class tools for each purpose</li> <li>Good, because flexible configuration per project needs</li> <li>Good, because high AI fix success rates across different issue types</li> <li>Bad, because increased setup complexity</li> <li>Bad, because potential rule conflicts between tools</li> <li>Bad, because higher resource usage</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/#configurable-linter-selection","title":"Configurable linter selection","text":"<ul> <li>Good, because flexibility to choose tools per project</li> <li>Good, because can start simple and add complexity</li> <li>Bad, because inconsistent experience across projects</li> <li>Bad, because requires deep knowledge of each tool's strengths</li> <li>Bad, because complex configuration management</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/#external-tool-integration","title":"External tool integration","text":"<ul> <li>Good, because no maintenance burden for linter implementations</li> <li>Good, because always uses latest tool versions</li> <li>Bad, because limited control over output format and parsing</li> <li>Bad, because difficult AI integration without structured data</li> <li>Bad, because inconsistent user experience</li> </ul>"},{"location":"adrs/0005-python-linter-ecosystem/#links","title":"Links","text":"<ul> <li>ADR-0002 - AI integration that works with Python linters</li> <li>ADR-0003 - Plugin architecture supporting Python linters</li> <li>ADR-0004 - Overall hybrid architecture decision</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/","title":"JavaScript/TypeScript Linter Ecosystem Support","text":"<ul> <li>Status: accepted</li> <li>Deciders: Development Team</li> <li>Date: 2025-08-24</li> </ul> <p>Technical Story: Define comprehensive JavaScript and TypeScript linting support with ESLint, Prettier, and JSHint integration.</p>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>JavaScript and TypeScript projects require specialized linting tools that understand the dynamic nature of JavaScript, modern ES features, and TypeScript's type system. Native integration with the Node.js ecosystem is essential for optimal results.</p>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>Native JavaScript/TypeScript ecosystem integration</li> <li>Support for modern ES features and TypeScript syntax</li> <li>Integration with existing Node.js development workflows</li> <li>Automatic configuration detection for seamless developer experience</li> <li>High-quality AI-assisted fixes for JavaScript-specific patterns</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#considered-options","title":"Considered Options","text":"<ul> <li>Python-based JavaScript parsing with subprocess calls</li> <li>Native Node.js integration with ESLint, Prettier, JSHint</li> <li>Hybrid approach with selective tool integration</li> <li>External service integration for JavaScript linting</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"Native Node.js integration with ESLint, Prettier, JSHint\", because it provides the best JavaScript/TypeScript analysis quality and leverages the mature Node.js tooling ecosystem.</p>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>Native JavaScript/TypeScript syntax understanding</li> <li>Automatic configuration detection (.eslintrc.*, tsconfig.json, package.json)</li> <li>Integration with existing developer toolchains (npm scripts, npx)</li> <li>High fix success rates for JavaScript-specific issues</li> <li>Support for modern frameworks (React, Vue, Angular)</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>Requires Node.js runtime alongside Python</li> <li>Increased complexity in dependency management</li> <li>Version compatibility management across Node.js ecosystem</li> <li>Additional setup requirements for development environments</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#javascripttypescript-linter-implementations","title":"JavaScript/TypeScript Linter Implementations","text":""},{"location":"adrs/0006-javascript-typescript-ecosystem/#eslint-primary-javascripttypescript-linting","title":"ESLint (Primary JavaScript/TypeScript Linting)","text":"<ul> <li>Version Support: 8.x, 9.x with backward compatibility</li> <li>Extensions: <code>.js</code>, <code>.jsx</code>, <code>.ts</code>, <code>.tsx</code>, <code>.mjs</code>, <code>.cjs</code></li> <li>TypeScript Integration: Full <code>@typescript-eslint</code> parser and plugin support</li> <li>Configuration Detection: Automatic <code>.eslintrc.*</code>, <code>eslint.config.js</code>, <code>package.json</code> detection</li> <li>Execution: npx/npm script integration with JSON output parsing</li> <li>Fix Success Rate: 90-95% for formatting rules, 70-85% for logic rules</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#prettier-code-formatting","title":"Prettier (Code Formatting)","text":"<ul> <li>Version Support: 2.x, 3.x</li> <li>Purpose: Opinionated code formatting for consistency</li> <li>Integration: Works alongside ESLint with conflict resolution</li> <li>Configuration: Auto-detects <code>.prettierrc.*</code>, <code>prettier.config.js</code></li> <li>Fix Success Rate: 98% for formatting issues</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#jshint-legacy-javascript-support","title":"JSHint (Legacy JavaScript Support)","text":"<ul> <li>Version Support: 2.x</li> <li>Purpose: Support for older JavaScript projects and legacy codebases</li> <li>Configuration: <code>.jshintrc</code> file detection</li> <li>Use Case: Projects not yet migrated to ESLint</li> <li>Fix Success Rate: 75-85% for basic JavaScript issues</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#implementation-architecture","title":"Implementation Architecture","text":""},{"location":"adrs/0006-javascript-typescript-ecosystem/#eslintlinter-class","title":"ESLintLinter Class","text":"<pre><code>class ESLintLinter(BaseLinter):\n    def is_available(self) -&gt; bool:\n        # Try npx first, then global eslint\n        return self._check_npx_eslint() or self._check_global_eslint()\n\n    def build_command(self, file_paths: List[str]) -&gt; List[str]:\n        command = [\"npx\", \"eslint\"] if self._has_npx() else [\"eslint\"]\n        command.extend([\"--format=json\"])\n\n        # Auto-detect configuration\n        config_file = self._detect_eslint_config()\n        if config_file:\n            command.extend([\"--config\", config_file])\n\n        return command + file_paths\n</code></pre>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#typescript-support-detection","title":"TypeScript Support Detection","text":"<ul> <li>tsconfig.json: Automatic TypeScript project detection</li> <li>Package Dependencies: Detection of TypeScript-related packages</li> <li>File Extensions: Dynamic <code>.ts</code>, <code>.tsx</code> support based on project setup</li> <li>Parser Integration: Automatic <code>@typescript-eslint/parser</code> usage</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#configuration-auto-detection","title":"Configuration Auto-Detection","text":"<pre><code>def _detect_eslint_config(self) -&gt; Optional[str]:\n    config_files = [\n        \".eslintrc.js\", \".eslintrc.cjs\", \".eslintrc.yaml\",\n        \".eslintrc.yml\", \".eslintrc.json\", \".eslintrc\"\n    ]\n\n    # Check for package.json eslintConfig\n    if self._has_package_json_config():\n        return \"package.json\"\n\n    return self._find_first_existing(config_files)\n</code></pre>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#integration-patterns","title":"Integration Patterns","text":""},{"location":"adrs/0006-javascript-typescript-ecosystem/#npm-script-integration","title":"npm Script Integration","text":"<ul> <li>Detection: Automatic detection of <code>npm run lint</code> scripts</li> <li>Execution: Preference for project-defined lint scripts</li> <li>Output Parsing: JSON format extraction from npm script output</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#project-type-detection","title":"Project Type Detection","text":"<ul> <li>React Projects: Automatic React plugin detection and configuration</li> <li>Node.js APIs: Server-side JavaScript linting profiles</li> <li>TypeScript Projects: Enhanced type-aware linting rules</li> <li>Monorepos: Multi-package linting support</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#ai-integration-points","title":"AI Integration Points","text":"<ul> <li>Context Enrichment: JavaScript-specific error context for AI prompts</li> <li>Framework Awareness: React, Vue, Angular-specific fix patterns</li> <li>Modern Syntax: ES6+, TypeScript syntax understanding for fixes</li> <li>Configuration Respect: AI fixes respect project ESLint configuration</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adrs/0006-javascript-typescript-ecosystem/#python-based-javascript-parsing","title":"Python-based JavaScript parsing","text":"<ul> <li>Good, because single runtime environment</li> <li>Good, because consistent with Python core architecture</li> <li>Bad, because limited JavaScript ecosystem understanding</li> <li>Bad, because poor TypeScript support</li> <li>Bad, because misses modern JavaScript features</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#native-nodejs-integration","title":"Native Node.js integration","text":"<ul> <li>Good, because best-in-class JavaScript/TypeScript analysis</li> <li>Good, because leverages existing developer toolchains</li> <li>Good, because automatic configuration detection</li> <li>Good, because high fix success rates</li> <li>Bad, because dual runtime complexity</li> <li>Bad, because Node.js dependency requirement</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#hybrid-approach-with-selective-tools","title":"Hybrid approach with selective tools","text":"<ul> <li>Good, because flexibility to choose integration depth</li> <li>Good, because can optimize per use case</li> <li>Bad, because inconsistent developer experience</li> <li>Bad, because complex configuration management</li> <li>Bad, because partial ecosystem benefits</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#external-service-integration","title":"External service integration","text":"<ul> <li>Good, because no local Node.js requirement</li> <li>Good, because always up-to-date tooling</li> <li>Bad, because network dependency and latency</li> <li>Bad, because limited configuration control</li> <li>Bad, because potential privacy concerns</li> </ul>"},{"location":"adrs/0006-javascript-typescript-ecosystem/#links","title":"Links","text":"<ul> <li>ADR-0002 - AI integration supporting JavaScript linters</li> <li>ADR-0003 - Plugin architecture for JavaScript linters</li> <li>ADR-0004 - Hybrid architecture enabling Node.js integration</li> <li>Node.js Linters Guide - Comprehensive implementation documentation</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/","title":"JavaScript/TypeScript Linter Ecosystem Support","text":"<ul> <li>Status: accepted</li> <li>Deciders: Development Team</li> <li>Date: 2025-08-24</li> </ul> <p>Technical Story: Define comprehensive JavaScript and TypeScript linting support with ESLint, Prettier, and JSHint integration.</p>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>JavaScript and TypeScript projects require specialized linting tools that understand the dynamic nature of JavaScript, modern ES features, and TypeScript's type system. Native integration with the Node.js ecosystem is essential for optimal results.</p>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>Native JavaScript/TypeScript ecosystem integration</li> <li>Support for modern ES features and TypeScript syntax</li> <li>Integration with existing Node.js development workflows</li> <li>Automatic configuration detection for seamless developer experience</li> <li>High-quality AI-assisted fixes for JavaScript-specific patterns</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#considered-options","title":"Considered Options","text":"<ul> <li>Python-based JavaScript parsing with subprocess calls</li> <li>Native Node.js integration with ESLint, Prettier, JSHint</li> <li>Hybrid approach with selective tool integration</li> <li>External service integration for JavaScript linting</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"Native Node.js integration with ESLint, Prettier, JSHint\", because it provides the best JavaScript/TypeScript analysis quality and leverages the mature Node.js tooling ecosystem.</p>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>Native JavaScript/TypeScript syntax understanding</li> <li>Automatic configuration detection (.eslintrc.*, tsconfig.json, package.json)</li> <li>Integration with existing developer toolchains (npm scripts, npx)</li> <li>High fix success rates for JavaScript-specific issues</li> <li>Support for modern frameworks (React, Vue, Angular)</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>Requires Node.js runtime alongside Python</li> <li>Increased complexity in dependency management</li> <li>Version compatibility management across Node.js ecosystem</li> <li>Additional setup requirements for development environments</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#javascripttypescript-linter-implementations","title":"JavaScript/TypeScript Linter Implementations","text":""},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#eslint-primary-javascripttypescript-linting","title":"ESLint (Primary JavaScript/TypeScript Linting)","text":"<ul> <li>Version Support: 8.x, 9.x with backward compatibility</li> <li>Extensions: <code>.js</code>, <code>.jsx</code>, <code>.ts</code>, <code>.tsx</code>, <code>.mjs</code>, <code>.cjs</code></li> <li>TypeScript Integration: Full <code>@typescript-eslint</code> parser and plugin support</li> <li>Configuration Detection: Automatic <code>.eslintrc.*</code>, <code>eslint.config.js</code>, <code>package.json</code> detection</li> <li>Execution: npx/npm script integration with JSON output parsing</li> <li>Fix Success Rate: 90-95% for formatting rules, 70-85% for logic rules</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#prettier-code-formatting","title":"Prettier (Code Formatting)","text":"<ul> <li>Version Support: 2.x, 3.x</li> <li>Purpose: Opinionated code formatting for consistency</li> <li>Integration: Works alongside ESLint with conflict resolution</li> <li>Configuration: Auto-detects <code>.prettierrc.*</code>, <code>prettier.config.js</code></li> <li>Fix Success Rate: 98% for formatting issues</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#jshint-legacy-javascript-support","title":"JSHint (Legacy JavaScript Support)","text":"<ul> <li>Version Support: 2.x</li> <li>Purpose: Support for older JavaScript projects and legacy codebases</li> <li>Configuration: <code>.jshintrc</code> file detection</li> <li>Use Case: Projects not yet migrated to ESLint</li> <li>Fix Success Rate: 75-85% for basic JavaScript issues</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#implementation-architecture","title":"Implementation Architecture","text":""},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#eslintlinter-class","title":"ESLintLinter Class","text":"<pre><code>class ESLintLinter(BaseLinter):\n    def is_available(self) -&gt; bool:\n        # Try npx first, then global eslint\n        return self._check_npx_eslint() or self._check_global_eslint()\n\n    def build_command(self, file_paths: List[str]) -&gt; List[str]:\n        command = [\"npx\", \"eslint\"] if self._has_npx() else [\"eslint\"]\n        command.extend([\"--format=json\"])\n\n        # Auto-detect configuration\n        config_file = self._detect_eslint_config()\n        if config_file:\n            command.extend([\"--config\", config_file])\n\n        return command + file_paths\n</code></pre>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#typescript-support-detection","title":"TypeScript Support Detection","text":"<ul> <li>tsconfig.json: Automatic TypeScript project detection</li> <li>Package Dependencies: Detection of TypeScript-related packages</li> <li>File Extensions: Dynamic <code>.ts</code>, <code>.tsx</code> support based on project setup</li> <li>Parser Integration: Automatic <code>@typescript-eslint/parser</code> usage</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#configuration-auto-detection","title":"Configuration Auto-Detection","text":"<pre><code>def _detect_eslint_config(self) -&gt; Optional[str]:\n    config_files = [\n        \".eslintrc.js\", \".eslintrc.cjs\", \".eslintrc.yaml\",\n        \".eslintrc.yml\", \".eslintrc.json\", \".eslintrc\"\n    ]\n\n    # Check for package.json eslintConfig\n    if self._has_package_json_config():\n        return \"package.json\"\n\n    return self._find_first_existing(config_files)\n</code></pre>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#integration-patterns","title":"Integration Patterns","text":""},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#npm-script-integration","title":"npm Script Integration","text":"<ul> <li>Detection: Automatic detection of <code>npm run lint</code> scripts</li> <li>Execution: Preference for project-defined lint scripts</li> <li>Output Parsing: JSON format extraction from npm script output</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#project-type-detection","title":"Project Type Detection","text":"<ul> <li>React Projects: Automatic React plugin detection and configuration</li> <li>Node.js APIs: Server-side JavaScript linting profiles</li> <li>TypeScript Projects: Enhanced type-aware linting rules</li> <li>Monorepos: Multi-package linting support</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#ai-integration-points","title":"AI Integration Points","text":"<ul> <li>Context Enrichment: JavaScript-specific error context for AI prompts</li> <li>Framework Awareness: React, Vue, Angular-specific fix patterns</li> <li>Modern Syntax: ES6+, TypeScript syntax understanding for fixes</li> <li>Configuration Respect: AI fixes respect project ESLint configuration</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#python-based-javascript-parsing","title":"Python-based JavaScript parsing","text":"<ul> <li>Good, because single runtime environment</li> <li>Good, because consistent with Python core architecture</li> <li>Bad, because limited JavaScript ecosystem understanding</li> <li>Bad, because poor TypeScript support</li> <li>Bad, because misses modern JavaScript features</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#native-nodejs-integration","title":"Native Node.js integration","text":"<ul> <li>Good, because best-in-class JavaScript/TypeScript analysis</li> <li>Good, because leverages existing developer toolchains</li> <li>Good, because automatic configuration detection</li> <li>Good, because high fix success rates</li> <li>Bad, because dual runtime complexity</li> <li>Bad, because Node.js dependency requirement</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#hybrid-approach-with-selective-tools","title":"Hybrid approach with selective tools","text":"<ul> <li>Good, because flexibility to choose integration depth</li> <li>Good, because can optimize per use case</li> <li>Bad, because inconsistent developer experience</li> <li>Bad, because complex configuration management</li> <li>Bad, because partial ecosystem benefits</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#external-service-integration","title":"External service integration","text":"<ul> <li>Good, because no local Node.js requirement</li> <li>Good, because always up-to-date tooling</li> <li>Bad, because network dependency and latency</li> <li>Bad, because limited configuration control</li> <li>Bad, because potential privacy concerns</li> </ul>"},{"location":"adrs/0006-javascript-typescript-linter-ecosystem/#links","title":"Links","text":"<ul> <li>ADR-0002 - AI integration supporting JavaScript linters</li> <li>ADR-0003 - Plugin architecture for JavaScript linters</li> <li>ADR-0004 - Hybrid architecture enabling Node.js integration</li> <li>Node.js Linters Guide - Comprehensive implementation documentation</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/","title":"Infrastructure/DevOps Linter Ecosystem Support","text":"<ul> <li>Status: accepted</li> <li>Deciders: Development Team</li> <li>Date: 2025-08-24</li> </ul> <p>Technical Story: Define comprehensive infrastructure and DevOps linting support with ansible-lint and related tooling.</p>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>Infrastructure-as-Code and DevOps workflows require specialized linting tools that understand configuration management syntax, deployment patterns, and infrastructure best practices. Ansible is a primary focus given its widespread adoption.</p>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>Infrastructure-as-Code quality and security validation</li> <li>DevOps workflow integration and automation support</li> <li>Configuration management best practices enforcement</li> <li>Security vulnerability detection in infrastructure code</li> <li>AI-assisted fixes for infrastructure configuration issues</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#considered-options","title":"Considered Options","text":"<ul> <li>Ansible-only linting support</li> <li>Multi-tool infrastructure linting (ansible-lint + terraform + kubernetes)</li> <li>Generic YAML/configuration file linting</li> <li>External service integration for infrastructure validation</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"Ansible-only linting support with extensible architecture\", because Ansible is the most commonly used configuration management tool, while maintaining plugin architecture for future expansion.</p>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>Comprehensive Ansible playbook and role validation</li> <li>Security best practices enforcement for infrastructure code</li> <li>Integration with existing Ansible development workflows</li> <li>High-quality AI fixes for common Ansible patterns</li> <li>Foundation for expanding to other infrastructure tools</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>Limited to Ansible ecosystem initially</li> <li>Requires Ansible knowledge for optimal configuration</li> <li>May not cover all infrastructure-as-code scenarios</li> <li>Additional tool dependency in development environment</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#infrastructure-linter-implementation","title":"Infrastructure Linter Implementation","text":""},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#ansible-lint-ansible-configuration-validation","title":"ansible-lint (Ansible Configuration Validation)","text":"<ul> <li>Version Support: 24.x, 25.x with backward compatibility</li> <li>File Types: Playbooks (<code>.yml</code>, <code>.yaml</code>), roles, inventory files</li> <li>Rule Categories: Security, best practices, deprecated features, syntax</li> <li>Configuration: <code>.ansible-lint</code>, <code>ansible-lint.yml</code> detection</li> <li>Integration: JSON output format for structured error parsing</li> <li>Fix Success Rate: 80-90% for syntax and style issues, 60-75% for logic issues</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#implementation-architecture","title":"Implementation Architecture","text":""},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#ansiblelintlinter-class","title":"AnsibleLintLinter Class","text":"<pre><code>class AnsibleLintLinter(BaseLinter):\n    def is_available(self) -&gt; bool:\n        try:\n            result = self.run_command([\"ansible-lint\", \"--version\"])\n            return result.returncode == 0\n        except Exception:\n            return False\n\n    def build_command(self, file_paths: List[str]) -&gt; List[str]:\n        command = [\"ansible-lint\", \"--format=json\", \"--parseable\"]\n\n        # Auto-detect configuration\n        config_file = self._detect_ansible_lint_config()\n        if config_file:\n            command.extend([\"-c\", config_file])\n\n        return command + file_paths\n</code></pre>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#ansible-project-detection","title":"Ansible Project Detection","text":"<ul> <li>Playbook Detection: Presence of <code>*.yml</code> files with Ansible syntax</li> <li>Role Structure: Standard Ansible role directory structure</li> <li>Inventory Files: Ansible inventory file patterns</li> <li>Configuration Files: <code>ansible.cfg</code>, <code>.ansible-lint</code> presence</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#rule-categories-and-fix-patterns","title":"Rule Categories and Fix Patterns","text":""},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#security-rules-high-priority","title":"Security Rules (High Priority)","text":"<ul> <li>no-log-passwords: Sensitive data exposure prevention</li> <li>risky-file-permissions: File permission security validation</li> <li>command-instead-of-module: Security-focused module usage</li> <li>Fix Success Rate: 85-95%</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#best-practices-rules","title":"Best Practices Rules","text":"<ul> <li>yaml-indentation: YAML formatting consistency</li> <li>name-templating: Task naming conventions</li> <li>package-latest: Version pinning recommendations</li> <li>Fix Success Rate: 90-95%</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#deprecated-features","title":"Deprecated Features","text":"<ul> <li>deprecated-module: Module migration suggestions</li> <li>deprecated-command-syntax: Syntax modernization</li> <li>Fix Success Rate: 70-85%</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#ai-integration-patterns","title":"AI Integration Patterns","text":""},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#context-aware-fixes","title":"Context-Aware Fixes","text":"<ul> <li>Ansible Module Knowledge: Understanding of module parameters and usage</li> <li>Playbook Structure: Awareness of Ansible playbook organization</li> <li>Role Dependencies: Understanding of role relationships and variables</li> <li>Security Context: Infrastructure security best practices</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#fix-validation","title":"Fix Validation","text":"<ul> <li>Syntax Validation: Post-fix Ansible syntax checking</li> <li>Idempotency Checks: Ensuring fixes maintain Ansible idempotency</li> <li>Security Review: Automated security impact assessment of fixes</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#configuration-management","title":"Configuration Management","text":""},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#project-specific-configuration","title":"Project-Specific Configuration","text":"<pre><code># .ansible-lint\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n\nskip_list:\n  - yaml[line-length]  # Allow longer lines in specific contexts\n  - name[casing]       # Project-specific naming conventions\n\nrules:\n  command-instead-of-module:\n    severity: error\n  package-latest:\n    severity: warning\n</code></pre>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#profile-support","title":"Profile Support","text":"<ul> <li>Basic Profile: Essential security and syntax checks</li> <li>Strict Profile: Comprehensive best practices enforcement</li> <li>Security Profile: Focus on security-related rules only</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#future-extensibility","title":"Future Extensibility","text":""},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#planned-infrastructure-tools","title":"Planned Infrastructure Tools","text":"<ul> <li>Terraform: HashiCorp Configuration Language (HCL) linting</li> <li>Kubernetes: YAML manifest validation and best practices</li> <li>Docker: Dockerfile linting and security scanning</li> <li>CloudFormation: AWS template validation</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#plugin-architecture-extension","title":"Plugin Architecture Extension","text":"<pre><code>class TerraformLinter(BaseLinter):\n    # Future implementation for Terraform support\n    pass\n\nclass KubernetesLinter(BaseLinter):\n    # Future implementation for Kubernetes manifest linting\n    pass\n</code></pre>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#ansible-only-linting-support","title":"Ansible-only linting support","text":"<ul> <li>Good, because focused implementation with high quality</li> <li>Good, because covers most common infrastructure automation use cases</li> <li>Good, because mature tooling with established best practices</li> <li>Good, because strong AI fix success rates for Ansible patterns</li> <li>Bad, because limited to Ansible ecosystem</li> <li>Bad, because doesn't cover other infrastructure tools</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#multi-tool-infrastructure-linting","title":"Multi-tool infrastructure linting","text":"<ul> <li>Good, because comprehensive infrastructure coverage</li> <li>Good, because supports diverse DevOps toolchains</li> <li>Bad, because significant implementation complexity</li> <li>Bad, because maintenance burden across multiple tools</li> <li>Bad, because potential quality dilution across tools</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#generic-yamlconfiguration-linting","title":"Generic YAML/configuration linting","text":"<ul> <li>Good, because broad applicability across tools</li> <li>Good, because simple implementation</li> <li>Bad, because lacks domain-specific knowledge</li> <li>Bad, because poor fix quality for infrastructure patterns</li> <li>Bad, because misses security and best practice validation</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#external-service-integration","title":"External service integration","text":"<ul> <li>Good, because no local tool dependencies</li> <li>Good, because always up-to-date rule sets</li> <li>Bad, because network dependency and latency</li> <li>Bad, because limited customization options</li> <li>Bad, because potential security concerns with infrastructure code</li> </ul>"},{"location":"adrs/0007-infrastructure-devops-linter-ecosystem/#links","title":"Links","text":"<ul> <li>ADR-0002 - AI integration supporting infrastructure linters</li> <li>ADR-0003 - Plugin architecture for infrastructure tools</li> <li>ADR-0004 - Architecture supporting diverse tooling</li> </ul>"},{"location":"adrs/0008-deployment-environments/","title":"Deployment Environments and Runtime Requirements","text":"<ul> <li>Status: accepted</li> <li>Deciders: Development Team</li> <li>Date: 2025-08-24</li> </ul> <p>Technical Story: Define supported deployment environments and runtime requirements for aider-lint-fixer across different operational contexts.</p>"},{"location":"adrs/0008-deployment-environments/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>The aider-lint-fixer tool needs to run in diverse environments ranging from local development to enterprise CI/CD pipelines. Different environments have varying constraints, security requirements, and available runtimes. Clear environment support decisions are needed to ensure consistent operation and proper resource allocation.</p>"},{"location":"adrs/0008-deployment-environments/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>Multi-environment deployment requirements (local, CI/CD, enterprise)</li> <li>Python 3.11+ requirement vs. system Python availability</li> <li>Container security and isolation needs</li> <li>Enterprise compatibility (RHEL 9, air-gapped systems)</li> <li>CI/CD integration requirements</li> <li>Development workflow efficiency</li> </ul>"},{"location":"adrs/0008-deployment-environments/#considered-options","title":"Considered Options","text":"<ul> <li>Local installation only (pip/pyproject.toml)</li> <li>Container-first approach (Docker/Podman)</li> <li>Hybrid approach (local + containerized options)</li> <li>Cloud-native deployment (serverless functions)</li> </ul>"},{"location":"adrs/0008-deployment-environments/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"Hybrid approach (local + containerized options)\", because it provides maximum flexibility while addressing the Python 3.11+ requirement constraint and enterprise security needs.</p>"},{"location":"adrs/0008-deployment-environments/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>Flexible deployment options for different use cases</li> <li>Addresses Python version compatibility issues (RHEL 9 ships with Python 3.9)</li> <li>Container isolation for security and consistency</li> <li>Enterprise-friendly with RHEL/UBI base images</li> <li>CI/CD ready with pre-built images</li> </ul>"},{"location":"adrs/0008-deployment-environments/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>Increased complexity with multiple deployment paths</li> <li>Container runtime dependency for some environments</li> <li>Maintenance overhead for multiple environment configurations</li> <li>Potential inconsistencies between local and containerized execution</li> </ul>"},{"location":"adrs/0008-deployment-environments/#supported-deployment-environments","title":"Supported Deployment Environments","text":""},{"location":"adrs/0008-deployment-environments/#1-local-development-environment","title":"1. Local Development Environment","text":"<p>Requirements: - Python 3.11+ (required for aider-chat compatibility) - Node.js 16+ (for JavaScript/TypeScript linting) - Git (for aider integration)</p> <p>Installation Methods: <pre><code># pip installation\npip install aider-lint-fixer[all]\n\n# Development installation\npip install -e \".[all]\"\n\n# Conda/mamba (future support)\nconda install -c conda-forge aider-lint-fixer\n</code></pre></p> <p>Supported Platforms: - macOS 11+ (Intel/Apple Silicon) - Linux (Ubuntu 20.04+, RHEL 9+, Fedora 36+) - Windows 10+ (WSL2 recommended)</p>"},{"location":"adrs/0008-deployment-environments/#2-containerized-development-podman","title":"2. Containerized Development (Podman)","text":"<p>Base Image: Red Hat UBI 9 with Python 3.11 Container Runtime: Podman (recommended for development)</p> <p>Features: - All linters pre-installed (Python, JavaScript, Infrastructure) - Development tools (black, isort, mypy, pytest, vim) - Live code mounting for real-time development - Non-root user execution for security</p> <p>Usage: <pre><code># Interactive development\n./scripts/containers/dev-container.sh run\n\n# Execute specific commands\n./scripts/containers/dev-container.sh exec 'make test'\n</code></pre></p>"},{"location":"adrs/0008-deployment-environments/#3-productionci-containerized-docker","title":"3. Production/CI Containerized (Docker)","text":"<p>Default Container Strategy (macOS/Ubuntu): The default container (<code>Dockerfile</code>) provides the latest ansible-lint and linting tools, optimized for general development on macOS and Ubuntu:</p> <pre><code># Build default container with latest tools\ndocker build -t aider-lint-fixer:latest .\n\n# Run with mounted project directory\ndocker run --rm -v $(pwd):/workspace:ro \\\n  aider-lint-fixer:latest \\\n  --linters flake8,eslint --dry-run\n\n# CI/CD integration\n./scripts/containers/docker-run.sh --ci --max-files 20\n</code></pre> <p>Key Benefits: - Latest ansible-lint with newest rules and features - No subscription requirements or licensing constraints - Simplified build process for development teams - Optimized for macOS and Ubuntu development workflows</p>"},{"location":"adrs/0008-deployment-environments/#4-enterprise-environments","title":"4. Enterprise Environments","text":"<p>RHEL Version-Specific Container Strategy:</p> <p>Due to fundamental ansible-core version incompatibilities between RHEL versions, separate container build templates are required:</p> <p>RHEL Users: Customer-Build Required</p> <p>For RHEL environments, users must build their own containers due to subscription requirements:</p> <p>RHEL 9 Environment: - ansible-core 2.14 (frozen for RHEL 9 lifecycle until May 2032) - Python 3.9 system dependency - UBI 9 base image with customer subscription required - Customer-build strategy: <code>Dockerfile.rhel9</code></p> <p>RHEL 10 Environment: - ansible-core 2.16+ (modern version with latest features) - Python 3.12 system dependency - UBI 10 base image with customer subscription required - Customer-build strategy: <code>Dockerfile.rhel10</code></p> <p>Why Separate Strategy: - Default container uses latest ansible-lint for optimal development experience - RHEL requires specific ansible-core versions tied to OS lifecycle - Subscription licensing prevents distribution of pre-built RHEL containers - Customer-build ensures compliance and version compatibility</p> <p>Customer Build Requirements: - RHEL subscription needed for ansible-core installation - Cannot distribute pre-built containers due to licensing constraints - Customers must build containers using their own subscriptions</p> <p>Automated Build Scripts: We provide comprehensive build automation to simplify the customer build process:</p> <ul> <li>RHEL 9: <code>scripts/containers/build-rhel9.sh</code></li> <li>Interactive credential prompting</li> <li>Validation and security scanning</li> <li> <p>Dry-run capabilities for testing</p> </li> <li> <p>RHEL 10: <code>scripts/containers/build-rhel10.sh</code></p> </li> <li>Enhanced security scanning with Trivy/Grype</li> <li>RHEL 10 specific optimizations</li> <li>Modern container features validation</li> </ul> <p>Manual Build Process:</p> <pre><code># RHEL 9 Template (Dockerfile.rhel9)\nFROM registry.redhat.io/ubi9/ubi:latest\nRUN subscription-manager register --username=$RHEL_USER --password=$RHEL_PASS\nRUN dnf install -y ansible-core python3-pip  # Gets 2.14.x\nRUN pip install aider-lint-fixer\nRUN subscription-manager unregister\n\n# RHEL 10 Template (Dockerfile.rhel10)\nFROM registry.redhat.io/ubi10/ubi:latest\nRUN subscription-manager register --username=$RHEL_USER --password=$RHEL_PASS\nRUN dnf install -y ansible-core python3-pip  # Gets 2.16.x+\nRUN pip install aider-lint-fixer\nRUN subscription-manager unregister\n</code></pre> <p>Enterprise Build Process: <pre><code># Customer builds with their subscription\ndocker build -f Dockerfile.rhel9 -t customer/aider-lint-fixer:rhel9 \\\n  --build-arg RHEL_USER=customer --build-arg RHEL_PASS=password .\n</code></pre></p> <p>Security Features: - Non-root container execution - Read-only source code mounts - Customer-controlled subscription usage - Clear licensing compliance</p>"},{"location":"adrs/0008-deployment-environments/#5-cicd-pipeline-integration","title":"5. CI/CD Pipeline Integration","text":"<p>GitHub Actions: <pre><code>- name: Run aider-lint-fixer\n  uses: docker://quay.io/takinosh/aider-lint-fixer:latest\n  with:\n    args: '--linters flake8,eslint --ci --max-files 10'\n  env:\n    DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}\n</code></pre></p> <p>GitLab CI: <pre><code>aider-lint-fixer:\n  stage: quality\n  image: quay.io/takinosh/aider-lint-fixer:latest\n  script:\n    - aider-lint-fixer . --linters flake8,eslint --ci\n</code></pre></p> <p>Jenkins: <pre><code>docker.image('quay.io/takinosh/aider-lint-fixer:latest').inside {\n    sh 'aider-lint-fixer . --linters flake8,eslint --ci'\n}\n</code></pre></p>"},{"location":"adrs/0008-deployment-environments/#runtime-requirements-by-environment","title":"Runtime Requirements by Environment","text":""},{"location":"adrs/0008-deployment-environments/#minimum-system-requirements","title":"Minimum System Requirements","text":"<ul> <li>CPU: 1 core (2+ recommended for parallel processing)</li> <li>Memory: 512MB (1GB+ recommended for large projects)</li> <li>Storage: 100MB for tool + 500MB for dependencies</li> <li>Network: Internet access for AI API calls (unless using local models)</li> </ul>"},{"location":"adrs/0008-deployment-environments/#python-runtime-requirements","title":"Python Runtime Requirements","text":"<ul> <li>Version: Python 3.11+ (strict requirement)</li> <li>Dependencies: See pyproject.toml for complete list</li> <li>Virtual Environment: Recommended for local installations</li> </ul>"},{"location":"adrs/0008-deployment-environments/#nodejs-runtime-requirements-for-javascript-linting","title":"Node.js Runtime Requirements (for JavaScript linting)","text":"<ul> <li>Version: Node.js 16+ (18+ recommended)</li> <li>Package Manager: npm or yarn</li> <li>Global Packages: ESLint, Prettier, JSHint (auto-installed in containers)</li> </ul>"},{"location":"adrs/0008-deployment-environments/#container-runtime-requirements","title":"Container Runtime Requirements","text":"<ul> <li>Podman: 4.0+ (development environments)</li> <li>Docker: 20.10+ (CI/CD and production)</li> <li>Container Storage: 2GB for development image, 500MB for production</li> <li>Volume Mounts: Support for bind mounts and SELinux contexts</li> </ul>"},{"location":"adrs/0008-deployment-environments/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"adrs/0008-deployment-environments/#development-environment-variables","title":"Development Environment Variables","text":"<pre><code># API Configuration\nexport DEEPSEEK_API_KEY=your_key_here\nexport OPENAI_API_KEY=your_key_here\nexport ANTHROPIC_API_KEY=your_key_here\n\n# Tool Configuration\nexport AIDER_LINT_FIXER_LOG_LEVEL=DEBUG\nexport AIDER_LINT_FIXER_MAX_FILES=50\nexport AIDER_LINT_FIXER_NO_BANNER=false\n\n# Ansible Configuration\nexport ANSIBLE_LINT_VERSION=enterprise\nexport ANSIBLE_LOCAL_TEMP=/tmp/ansible-local\n</code></pre>"},{"location":"adrs/0008-deployment-environments/#cicd-environment-variables","title":"CI/CD Environment Variables","text":"<pre><code># CI Mode\nexport CI=true\nexport AIDER_LINT_FIXER_MAX_FILES=10\nexport AIDER_LINT_FIXER_MAX_ERRORS=5\nexport AIDER_LINT_FIXER_LOG_LEVEL=INFO\n\n# Performance Optimization\nexport AIDER_LINT_FIXER_PARALLEL=true\nexport AIDER_LINT_FIXER_CACHE_DIR=./.aider-lint-cache\n</code></pre>"},{"location":"adrs/0008-deployment-environments/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adrs/0008-deployment-environments/#local-installation-only","title":"Local installation only","text":"<ul> <li>Good, because simple setup for compatible systems</li> <li>Good, because direct access to system tools and configurations</li> <li>Good, because no container overhead</li> <li>Bad, because Python 3.11+ requirement blocks many systems</li> <li>Bad, because dependency conflicts with system packages</li> <li>Bad, because inconsistent environments across team members</li> </ul>"},{"location":"adrs/0008-deployment-environments/#container-first-approach","title":"Container-first approach","text":"<ul> <li>Good, because consistent environment across all deployments</li> <li>Good, because addresses Python version compatibility</li> <li>Good, because isolated dependencies and security</li> <li>Good, because enterprise-ready with RHEL/UBI images</li> <li>Bad, because container runtime dependency</li> <li>Bad, because potential performance overhead</li> <li>Bad, because complexity for simple local development</li> </ul>"},{"location":"adrs/0008-deployment-environments/#hybrid-approach-local-containerized","title":"Hybrid approach (local + containerized)","text":"<ul> <li>Good, because flexibility for different use cases</li> <li>Good, because addresses Python compatibility issues</li> <li>Good, because supports both development and production workflows</li> <li>Good, because enterprise and CI/CD ready</li> <li>Bad, because increased maintenance complexity</li> <li>Bad, because potential behavior differences between environments</li> <li>Bad, because documentation and support overhead</li> </ul>"},{"location":"adrs/0008-deployment-environments/#cloud-native-deployment","title":"Cloud-native deployment","text":"<ul> <li>Good, because serverless scalability</li> <li>Good, because no infrastructure management</li> <li>Bad, because vendor lock-in concerns</li> <li>Bad, because cold start latency issues</li> <li>Bad, because limited control over runtime environment</li> <li>Bad, because cost implications for frequent usage</li> </ul>"},{"location":"adrs/0008-deployment-environments/#implementation-evidence","title":"Implementation Evidence","text":""},{"location":"adrs/0008-deployment-environments/#container-infrastructure","title":"Container Infrastructure","text":"<ul> <li>\u2705 <code>Containerfile.dev</code>: RHEL UBI 9 development environment</li> <li>\u2705 <code>Dockerfile.prod</code>: Python 3.11 slim production image</li> <li>\u2705 <code>Dockerfile.rhel9</code>: RHEL 9 customer-build template with ansible-core 2.14</li> <li>\u2705 <code>Dockerfile.rhel10</code>: RHEL 10 customer-build template with ansible-core 2.16+</li> <li>\u2705 Pre-built images on quay.io registry (non-RHEL variants)</li> <li>\u2705 Multi-architecture support (amd64, arm64)</li> </ul>"},{"location":"adrs/0008-deployment-environments/#automation-scripts","title":"Automation Scripts","text":"<ul> <li>\u2705 <code>dev-container.sh</code>: Development container management</li> <li>\u2705 <code>docker-run.sh</code>: Production container execution</li> <li>\u2705 <code>setup-containers.sh</code>: Environment setup automation</li> <li>\u2705 Customer build documentation and templates</li> </ul>"},{"location":"adrs/0008-deployment-environments/#cicd-templates","title":"CI/CD Templates","text":"<ul> <li>\u2705 GitHub Actions workflow template</li> <li>\u2705 GitLab CI configuration examples</li> <li>\u2705 Jenkins pipeline examples</li> <li>\u2705 RHEL enterprise build instructions</li> </ul>"},{"location":"adrs/0008-deployment-environments/#research-validation","title":"Research Validation","text":"<ul> <li>\u2705 Testing confirmed UBI images require RHEL subscription for ansible-core</li> <li>\u2705 RHEL 9 ansible-core frozen at 2.14 for lifecycle (until May 2032)</li> <li>\u2705 RHEL 10 expected to ship with ansible-core 2.16+</li> <li>\u2705 Customer-build strategy preserves architectural benefits while ensuring licensing compliance</li> </ul>"},{"location":"adrs/0008-deployment-environments/#links","title":"Links","text":"<ul> <li>ADR-0004 - Hybrid architecture enabling multi-runtime support</li> <li>ADR-0005 - Python linter requirements</li> <li>ADR-0006 - Node.js runtime requirements</li> <li>Container Deployment Tutorial - Comprehensive container usage documentation</li> </ul>"},{"location":"adrs/0009-rhel-container-build-requirements/","title":"ADR 0009: RHEL Container Build Requirements and Subscription Management","text":""},{"location":"adrs/0009-rhel-container-build-requirements/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adrs/0009-rhel-container-build-requirements/#context","title":"Context","text":"<p>Our research into RHEL-based container support for ansible-lint revealed critical subscription and licensing constraints that fundamentally impact how containers can be built and distributed. The Universal Base Images (UBI) provided by Red Hat do not include ansible-core packages by default, requiring full RHEL subscriptions for access to AppStream repositories during container builds.</p> <p>Strategic Decision: The default container (<code>Dockerfile</code>) targets macOS and Ubuntu development with the latest ansible-lint, while RHEL users build their own containers using provided templates. This approach optimizes the developer experience for the majority of users while maintaining enterprise RHEL support.</p>"},{"location":"adrs/0009-rhel-container-build-requirements/#key-findings","title":"Key Findings","text":"<ol> <li>UBI Limitations: UBI 9 and UBI 10 images contain only base OS packages, not AppStream content like ansible-core</li> <li>Subscription Requirements: ansible-core installation requires active RHEL subscription and registration via subscription-manager</li> <li>Licensing Constraints: Cannot distribute pre-built containers with ansible-core due to Red Hat licensing requirements</li> <li>Version Incompatibilities: RHEL 9 (ansible-core 2.14) and RHEL 10 (ansible-core 2.16+) represent incompatible automation ecosystems</li> </ol>"},{"location":"adrs/0009-rhel-container-build-requirements/#enterprise-context","title":"Enterprise Context","text":"<p>Enterprise customers typically have existing RHEL subscriptions and the infrastructure to build custom containers. This customer-build approach aligns with enterprise security practices of controlling their container supply chain while ensuring licensing compliance.</p>"},{"location":"adrs/0009-rhel-container-build-requirements/#decision","title":"Decision","text":"<p>We will implement a customer-build container strategy where enterprise customers build their own containers using provided Dockerfile templates and their RHEL subscriptions.</p>"},{"location":"adrs/0009-rhel-container-build-requirements/#container-build-architecture","title":"Container Build Architecture","text":"<ol> <li>Separate RHEL Version Templates: Distinct Dockerfile templates for RHEL 9 and RHEL 10</li> <li>Customer Subscription Integration: Build process requires customer's Red Hat credentials</li> <li>Version-Specific Optimization: Each template optimized for its respective ansible-core version</li> <li>Clear Documentation: Comprehensive build instructions and subscription requirements</li> </ol>"},{"location":"adrs/0009-rhel-container-build-requirements/#implementation","title":"Implementation","text":""},{"location":"adrs/0009-rhel-container-build-requirements/#rhel-9-dockerfile-template","title":"RHEL 9 Dockerfile Template","text":"<pre><code># Dockerfile.rhel9\nFROM registry.redhat.io/ubi9/ubi:latest\n\n# Customer must provide their Red Hat credentials\nARG RHEL_USERNAME\nARG RHEL_PASSWORD\n\n# Register with Red Hat subscription manager\nRUN subscription-manager register --username=${RHEL_USERNAME} --password=${RHEL_PASSWORD}\nRUN subscription-manager attach --auto\n\n# Install ansible-core 2.14.x from AppStream\nRUN dnf update -y &amp;&amp; \\\n    dnf install -y ansible-core python3-pip &amp;&amp; \\\n    dnf clean all\n\n# Install aider-lint-fixer\nCOPY requirements.txt /tmp/\nRUN pip3 install -r /tmp/requirements.txt\nCOPY aider_lint_fixer/ /opt/aider-lint-fixer/\n\n# Security: Run as non-root user\nRUN useradd -m -u 1001 aider\nUSER 1001\n\nWORKDIR /workspace\nENTRYPOINT [\"python3\", \"/opt/aider-lint-fixer\"]\n</code></pre>"},{"location":"adrs/0009-rhel-container-build-requirements/#rhel-10-dockerfile-template","title":"RHEL 10 Dockerfile Template","text":"<pre><code># Dockerfile.rhel10\nFROM registry.redhat.io/ubi10/ubi:latest\n\n# Customer must provide their Red Hat credentials\nARG RHEL_USERNAME\nARG RHEL_PASSWORD\n\n# Register with Red Hat subscription manager\nRUN subscription-manager register --username=${RHEL_USERNAME} --password=${RHEL_PASSWORD}\nRUN subscription-manager attach --auto\n\n# Install ansible-core 2.16+ from AppStream\nRUN dnf update -y &amp;&amp; \\\n    dnf install -y ansible-core python3-pip &amp;&amp; \\\n    dnf clean all\n\n# Install aider-lint-fixer\nCOPY requirements.txt /tmp/\nRUN pip3 install -r /tmp/requirements.txt\nCOPY aider_lint_fixer/ /opt/aider-lint-fixer/\n\n# Security: Run as non-root user\nRUN useradd -m -u 1001 aider\nUSER 1001\n\nWORKDIR /workspace\nENTRYPOINT [\"python3\", \"/opt/aider-lint-fixer\"]\n</code></pre>"},{"location":"adrs/0009-rhel-container-build-requirements/#customer-build-process","title":"Customer Build Process","text":""},{"location":"adrs/0009-rhel-container-build-requirements/#automated-build-scripts","title":"Automated Build Scripts","text":"<p>We provide comprehensive build scripts that handle credential management, validation, and security best practices:</p> <p>RHEL 9 Build Script: <code>scripts/containers/build-rhel9.sh</code> <pre><code># Interactive build (prompts for credentials)\n./scripts/containers/build-rhel9.sh\n\n# Build with specific configuration\n./scripts/containers/build-rhel9.sh \\\n  --name my-company/aider-lint-fixer \\\n  --tag v1.0-rhel9 \\\n  --registry quay.io \\\n  --validate\n\n# Dry run to see build command\n./scripts/containers/build-rhel9.sh --dry-run\n</code></pre></p> <p>RHEL 10 Build Script: <code>scripts/containers/build-rhel10.sh</code> <pre><code># Interactive build (prompts for credentials)\n./scripts/containers/build-rhel10.sh\n\n# Build with security scanning\n./scripts/containers/build-rhel10.sh \\\n  --name my-company/aider-lint-fixer \\\n  --tag v2.0-rhel10 \\\n  --validate \\\n  --security-scan\n\n# Build with custom registry\n./scripts/containers/build-rhel10.sh \\\n  --registry quay.io \\\n  --username myuser \\\n  --password mypass\n</code></pre></p>"},{"location":"adrs/0009-rhel-container-build-requirements/#manual-build-commands","title":"Manual Build Commands","text":"<p>For customers preferring manual builds:</p> <pre><code># RHEL 9 Container\ndocker build \\\n  --build-arg RHEL_USERNAME=&lt;customer-username&gt; \\\n  --build-arg RHEL_PASSWORD=&lt;customer-password&gt; \\\n  -f Dockerfile.rhel9 \\\n  -t customer/aider-lint-fixer:rhel9 .\n\n# RHEL 10 Container\ndocker build \\\n  --build-arg RHEL_USERNAME=&lt;customer-username&gt; \\\n  --build-arg RHEL_PASSWORD=&lt;customer-password&gt; \\\n  -f Dockerfile.rhel10 \\\n  -t customer/aider-lint-fixer:rhel10 .\n</code></pre>"},{"location":"adrs/0009-rhel-container-build-requirements/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Credential Management: Use build secrets or environment files instead of command-line arguments</li> <li>Multi-stage Builds: Separate subscription registration from final image to avoid credential leakage</li> <li>Image Scanning: Customers should scan built images for vulnerabilities</li> <li>Registry Security: Push to private registries with proper access controls</li> </ol>"},{"location":"adrs/0009-rhel-container-build-requirements/#documentation-requirements","title":"Documentation Requirements","text":""},{"location":"adrs/0009-rhel-container-build-requirements/#customer-build-guide","title":"Customer Build Guide","text":"<ol> <li>Prerequisites: Active RHEL subscription, container build environment</li> <li>Build Instructions: Step-by-step commands with security considerations</li> <li>Version Selection: Guidance on choosing RHEL 9 vs RHEL 10</li> <li>Troubleshooting: Common subscription and build issues</li> <li>Validation: Testing built containers for functionality</li> </ol>"},{"location":"adrs/0009-rhel-container-build-requirements/#support-materials","title":"Support Materials","text":"<ol> <li>Build Scripts: </li> <li><code>scripts/containers/build-rhel9.sh</code> - Automated RHEL 9 container builds</li> <li><code>scripts/containers/build-rhel10.sh</code> - Automated RHEL 10 container builds</li> <li>Interactive credential prompting and validation</li> <li>Security scanning integration (Trivy/Grype)</li> <li> <p>Dry-run capabilities for testing</p> </li> <li> <p>CI/CD Integration: Templates for enterprise CI/CD pipelines</p> </li> <li>Version Matrix: ansible-core compatibility documentation</li> <li>Migration Guide: Transitioning between RHEL versions</li> </ol>"},{"location":"adrs/0009-rhel-container-build-requirements/#consequences","title":"Consequences","text":""},{"location":"adrs/0009-rhel-container-build-requirements/#positive","title":"Positive","text":"<ul> <li>Licensing Compliance: Customers use their own subscriptions, ensuring legal compliance</li> <li>Security Control: Customers control their container supply chain and build environment</li> <li>Version Optimization: Each container optimized for its specific RHEL version and ansible-core</li> <li>Enterprise Alignment: Matches enterprise practices of building custom containers</li> <li>Scalability: Approach scales to future RHEL versions without distribution constraints</li> </ul>"},{"location":"adrs/0009-rhel-container-build-requirements/#negative","title":"Negative","text":"<ul> <li>Customer Complexity: Requires customers to manage container builds and subscriptions</li> <li>Support Overhead: Additional support for build processes and subscription issues</li> <li>Distribution Limitations: Cannot provide ready-to-use containers for immediate testing</li> <li>Documentation Burden: Extensive documentation required for customer success</li> </ul>"},{"location":"adrs/0009-rhel-container-build-requirements/#mitigation-strategies","title":"Mitigation Strategies","text":"<ol> <li>Comprehensive Documentation: Detailed guides and troubleshooting resources</li> <li>Build Automation: Scripts and templates to simplify customer build processes</li> <li>Support Training: Prepare support team for subscription and build-related issues</li> <li>Alternative Options: Maintain pip-based installation for non-containerized deployments</li> </ol>"},{"location":"adrs/0009-rhel-container-build-requirements/#related-adrs","title":"Related ADRs","text":"<ul> <li>ADR 0008: Deployment Environments and Runtime Requirements - Updated with customer-build strategy</li> <li>ADR 0007: Infrastructure and DevOps Linter Ecosystem - ansible-lint version management</li> <li>ADR 0003: Modular Plugin System - Plugin architecture supporting multiple environments</li> </ul>"},{"location":"adrs/0009-rhel-container-build-requirements/#implementation-evidence","title":"Implementation Evidence","text":""},{"location":"adrs/0009-rhel-container-build-requirements/#research-validation","title":"Research Validation","text":"<ul> <li>UBI Testing: Confirmed ansible-core unavailability in UBI repositories</li> <li>Subscription Requirements: Validated subscription-manager registration necessity</li> <li>Version Compatibility: Documented ansible-core 2.14 vs 2.16+ incompatibilities</li> <li>Performance Analysis: UBI 10 provides 16% smaller images and modern security features</li> </ul>"},{"location":"adrs/0009-rhel-container-build-requirements/#customer-feedback-integration","title":"Customer Feedback Integration","text":"<ul> <li>Enterprise Requirements: Aligns with enterprise container build practices</li> <li>Security Preferences: Non-root execution and read-only mounts</li> <li>Subscription Management: Leverages existing customer RHEL infrastructure</li> </ul>"},{"location":"adrs/0009-rhel-container-build-requirements/#technical-validation","title":"Technical Validation","text":"<ul> <li>Build Process: Dockerfile templates and automated build scripts tested with subscription registration</li> <li>Build Scripts: Comprehensive automation with <code>scripts/containers/build-rhel9.sh</code> and <code>scripts/containers/build-rhel10.sh</code></li> <li>Security Features: Non-root user execution, credential management, and minimal attack surface</li> <li>Version Isolation: Separate containers prevent ansible-core conflicts</li> <li>Validation Tools: Built-in image validation and security scanning capabilities</li> <li>Documentation: Comprehensive build guides and troubleshooting resources</li> </ul>"},{"location":"adrs/0009-rhel-container-build-requirements/#notes","title":"Notes","text":"<p>This ADR establishes the foundation for RHEL container support while respecting Red Hat's licensing model and enterprise customer requirements. The customer-build approach ensures legal compliance while providing optimized containers for each RHEL version.</p> <p>Future considerations include monitoring Red Hat's container distribution policies and evaluating alternative base images if licensing constraints change.</p>"},{"location":"adrs/template/","title":"[short title of solved problem and solution]","text":"<ul> <li>Status: [proposed | rejected | accepted | deprecated | superseded by ADR-XXXX]</li> <li>Deciders: [list everyone involved in the decision]</li> <li>Date: [YYYY-MM-DD when the decision was last updated]</li> </ul> <p>Technical Story: [description | ticket/issue URL]</p>"},{"location":"adrs/template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>[Describe the context and problem statement, e.g., in free form using two to three sentences. You may want to articulate the problem in form of a question.]</p>"},{"location":"adrs/template/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>[driver 1, e.g., a force, facing concern, \u2026]</li> <li>[driver 2, e.g., a force, facing concern, \u2026]</li> <li>[etc.]</li> </ul>"},{"location":"adrs/template/#considered-options","title":"Considered Options","text":"<ul> <li>[option 1]</li> <li>[option 2]</li> <li>[option 3]</li> <li>[etc.]</li> </ul>"},{"location":"adrs/template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"[option 1]\", because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | \u2026 | comes out best (see below)].</p>"},{"location":"adrs/template/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>[e.g., improvement of quality attribute satisfaction, follow-up decisions required, \u2026]</li> <li>[etc.]</li> </ul>"},{"location":"adrs/template/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>[e.g., compromising quality attribute, follow-up decisions required, \u2026]</li> <li>[etc.]</li> </ul>"},{"location":"adrs/template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adrs/template/#option-1","title":"[option 1]","text":"<p>[example | description | pointer to more information | \u2026]</p> <ul> <li>Good, because [argument a]</li> <li>Good, because [argument b]</li> <li>Bad, because [argument c]</li> <li>[etc.]</li> </ul>"},{"location":"adrs/template/#option-2","title":"[option 2]","text":"<p>[example | description | pointer to more information | \u2026]</p> <ul> <li>Good, because [argument a]</li> <li>Good, because [argument b]</li> <li>Bad, because [argument c]</li> <li>[etc.]</li> </ul>"},{"location":"adrs/template/#option-3","title":"[option 3]","text":"<p>[example | description | pointer to more information | \u2026]</p> <ul> <li>Good, because [argument a]</li> <li>Good, because [argument b]</li> <li>Bad, because [argument c]</li> <li>[etc.]</li> </ul>"},{"location":"adrs/template/#links","title":"Links","text":"<ul> <li>[Link type] [Link to ADR]</li> <li>[etc.]</li> </ul>"},{"location":"explanation/","title":"Explanation","text":"<p>Understanding-oriented conceptual discussions about aider-lint-fixer's architecture, design decisions, and technology choices.</p>"},{"location":"explanation/#available-guides","title":"Available Guides","text":"<p>This section contains explanation documentation following the Diataxis framework, providing deep understanding of the architectural concepts behind aider-lint-fixer.</p> <p>Explanation documentation is understanding-oriented: - Clarify and illuminate architectural concepts - Provide context and background for design decisions - Discuss alternatives and trade-offs - Focus on understanding, not step-by-step instruction</p>"},{"location":"explanation/#contents","title":"Contents","text":"<ul> <li>Architecture Overview - High-level architectural concepts and design philosophy</li> <li>Container Architecture - Dual container strategy and deployment patterns</li> <li>Design Decisions - Key architectural and technical decisions with rationale</li> <li>Technology Stack - Complete overview of technologies and tools used</li> </ul>"},{"location":"explanation/#understanding-the-architecture","title":"Understanding the Architecture","text":"<p>The explanation documents work together to provide comprehensive understanding:</p> <ol> <li>Start with Architecture Overview for the big picture</li> <li>Read Design Decisions to understand the \"why\" behind choices</li> <li>Explore Technology Stack for detailed technology information</li> <li>Review Container Architecture for deployment strategy details</li> </ol>"},{"location":"explanation/#related-documentation","title":"Related Documentation","text":"<ul> <li>ADRs - Formal architectural decision records</li> <li>How-to Guides - Task-oriented instructions</li> <li>Tutorials - Learning-oriented step-by-step guides</li> </ul>"},{"location":"explanation/architecture-overview/","title":"Architecture Overview","text":"<p>This document explains the architectural concepts and design philosophy behind aider-lint-fixer, a Python-based linting tool that integrates with aider.chat for AI-powered code analysis and fixing.</p>"},{"location":"explanation/architecture-overview/#introduction","title":"Introduction","text":"<p>aider-lint-fixer implements a hybrid Python-JavaScript architecture with modular plugin system that enables comprehensive multi-language linting while maintaining AI integration capabilities. The architecture follows methodological pragmatism principles, optimizing for practical outcomes while maintaining systematic verification processes.</p>"},{"location":"explanation/architecture-overview/#core-concepts","title":"Core Concepts","text":""},{"location":"explanation/architecture-overview/#ai-integrated-linting-pipeline","title":"AI-Integrated Linting Pipeline","text":"<p>The core concept revolves around a three-stage pipeline:</p> <ol> <li>Detection: Multi-language linters identify code issues</li> <li>Analysis: AI-powered error classification and context analysis  </li> <li>Resolution: Automated fixes through aider.chat integration</li> </ol> <p>This approach combines deterministic linting tools with AI reasoning for enhanced fix success rates.</p>"},{"location":"explanation/architecture-overview/#modular-plugin-architecture","title":"Modular Plugin Architecture","text":"<p>Each linter is implemented as an independent plugin inheriting from a base class:</p> <pre><code>class BaseLinter(ABC):\n    @abstractmethod\n    def run_linter(self, file_path: str) -&gt; Dict[str, Any]\n\n    @abstractmethod\n    def parse_output(self, output: str) -&gt; List[Dict[str, Any]]\n</code></pre> <p>This enables: - Independent Evolution: Each linter can be updated independently - Consistent Interface: Uniform API across all linting tools - Easy Extension: New linters can be added without core changes</p>"},{"location":"explanation/architecture-overview/#dual-runtime-support","title":"Dual Runtime Support","text":"<p>The architecture supports both Python and JavaScript ecosystems:</p> <ul> <li>Python Runtime: Core application, Python linters (flake8, pylint, mypy)</li> <li>Node.js Runtime: JavaScript linters (ESLint, Prettier, JSHint)</li> <li>Orchestration Layer: Python-based coordination between runtimes</li> </ul>"},{"location":"explanation/architecture-overview/#design-decisions","title":"Design Decisions","text":""},{"location":"explanation/architecture-overview/#why-hybrid-python-javascript","title":"Why Hybrid Python-JavaScript?","text":"<p>Primary Rationale: Modern development requires multi-language support</p> <p>Benefits: - Comprehensive Coverage: Support for both Python and JavaScript/TypeScript projects - Native Tool Integration: Use each ecosystem's best-in-class linters - Performance Optimization: Leverage native runtime performance</p> <p>Trade-offs: - Complexity: Managing two runtime environments - Dependencies: Requires both Python and Node.js installations - Coordination Overhead: Inter-runtime communication complexity</p>"},{"location":"explanation/architecture-overview/#ai-integration-strategy","title":"AI Integration Strategy","text":"<p>Approach: Wrapper layer around aider.chat rather than direct LLM integration</p> <p>Rationale: - Proven Toolchain: Leverage aider.chat's established AI capabilities - Maintenance Reduction: Avoid reimplementing LLM interaction patterns - Feature Inheritance: Benefit from aider.chat's ongoing improvements</p> <p>Implementation: <pre><code>class AiderIntegration:\n    def analyze_and_fix(self, errors: List[LintError]) -&gt; FixResult:\n        # Coordinate with aider.chat for AI-powered fixes\n</code></pre></p>"},{"location":"explanation/architecture-overview/#comparison-with-alternatives","title":"Comparison with Alternatives","text":"Approach Pros Cons Fix Success Rate Our Hybrid Approach Multi-language, AI-enhanced, modular Runtime complexity 85-95% Python-Only Simple, single runtime Limited language support 60-80% Direct LLM Integration Custom AI logic High maintenance, API costs 70-85% Traditional Linting Fast, deterministic No AI assistance 40-60%"},{"location":"explanation/architecture-overview/#architectural-layers","title":"Architectural Layers","text":""},{"location":"explanation/architecture-overview/#application-layer","title":"Application Layer","text":"<ul> <li>CLI Interface: Command-line tool for direct usage</li> <li>API Interface: Programmatic access for integrations</li> <li>Configuration Management: Unified and language-specific configs</li> </ul>"},{"location":"explanation/architecture-overview/#orchestration-layer","title":"Orchestration Layer","text":"<ul> <li>Linter Coordination: Manages multi-linter execution</li> <li>Error Aggregation: Consolidates results across tools</li> <li>AI Integration: Coordinates with aider.chat for fixes</li> </ul>"},{"location":"explanation/architecture-overview/#plugin-layer","title":"Plugin Layer","text":"<ul> <li>Python Linters: flake8, pylint, mypy, bandit, black, isort</li> <li>JavaScript Linters: ESLint, JSHint, Prettier</li> <li>Infrastructure Linters: ansible-lint (with version management)</li> </ul>"},{"location":"explanation/architecture-overview/#runtime-layer","title":"Runtime Layer","text":"<ul> <li>Python Environment: Core application runtime</li> <li>Node.js Environment: JavaScript linter execution</li> <li>Container Environment: Isolated execution contexts</li> </ul>"},{"location":"explanation/architecture-overview/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"explanation/architecture-overview/#multi-environment-strategy","title":"Multi-Environment Strategy","text":"<p>The architecture supports diverse deployment scenarios:</p> <ul> <li>Local Development: Direct Python/Node.js installation</li> <li>Containerized: Docker containers for isolated environments</li> <li>Enterprise RHEL: Customer-build containers with subscription management</li> <li>CI/CD Integration: Pipeline-optimized execution</li> </ul>"},{"location":"explanation/architecture-overview/#container-strategy","title":"Container Strategy","text":"<p>Dual Container Approach: - Default Container: Latest tools for general development (macOS/Ubuntu) - RHEL Containers: Version-specific builds for enterprise compliance</p> <p>This separation optimizes for both developer experience and enterprise requirements.</p>"},{"location":"explanation/architecture-overview/#further-reading","title":"Further Reading","text":"<ul> <li>Container Architecture - Detailed container strategy</li> <li>Design Decisions - Specific architectural choices</li> <li>Technology Stack - Complete technology overview</li> <li>ADR 0004: Hybrid Python-JavaScript Architecture</li> <li>ADR 0003: Modular Plugin System</li> </ul>"},{"location":"explanation/container-architecture/","title":"Container Architecture Strategy","text":"<p>This document explains the architectural decisions behind aider-lint-fixer's container strategy, covering the rationale for the dual-approach design and its implementation details.</p>"},{"location":"explanation/container-architecture/#strategic-overview","title":"Strategic Overview","text":"<p>aider-lint-fixer implements a dual container strategy that optimizes for different use cases:</p> <ol> <li>Default Container: General development with latest tools</li> <li>RHEL Containers: Enterprise-specific customer builds</li> </ol> <p>This approach follows methodological pragmatism principles by optimizing for the common case while maintaining comprehensive enterprise support.</p>"},{"location":"explanation/container-architecture/#architecture-decisions","title":"Architecture Decisions","text":""},{"location":"explanation/container-architecture/#default-container-design","title":"Default Container Design","text":"<p>Target Platforms: macOS and Ubuntu development environments</p> <p>Key Characteristics: - Uses latest ansible-lint and ansible-core versions - No subscription or licensing constraints - Simple, single-stage Docker build - Optimized for developer experience</p> <p>Technical Stack: <pre><code>FROM python:3.11-slim\n# Latest versions of all tools\nRUN pip install ansible-lint ansible-core ansible\nRUN pip install flake8 pylint mypy\nRUN npm install -g eslint jshint prettier\n</code></pre></p>"},{"location":"explanation/container-architecture/#rhel-container-design","title":"RHEL Container Design","text":"<p>Target Platforms: RHEL 9 and RHEL 10 enterprise environments</p> <p>Key Characteristics: - Version-specific ansible-core tied to RHEL lifecycle - Customer-build approach due to subscription requirements - Separate containers for RHEL 9 and RHEL 10 - Enterprise security and compliance features</p> <p>Technical Stack: <pre><code># RHEL 9\nFROM registry.redhat.io/ubi9/ubi:latest\n# ansible-core 2.14.x (frozen for RHEL 9 lifecycle)\n\n# RHEL 10  \nFROM registry.redhat.io/ubi10/ubi:latest\n# ansible-core 2.16+ (modern features)\n</code></pre></p>"},{"location":"explanation/container-architecture/#design-rationale","title":"Design Rationale","text":""},{"location":"explanation/container-architecture/#why-not-a-unified-container","title":"Why Not a Unified Container?","text":"<p>Version Incompatibilities: - RHEL 9: ansible-core 2.14 (frozen until May 2032) - RHEL 10: ansible-core 2.16+ (2-major-version jump) - ansible-lint supports only last 2 major versions</p> <p>Licensing Constraints: - UBI images don't include ansible-core by default - Requires RHEL subscription for AppStream access - Cannot distribute pre-built containers with ansible-core</p> <p>Performance Optimization: - UBI 10: 16% smaller images, modern kernel - Python version differences: 3.9 vs 3.12 - Post-Quantum Cryptography in RHEL 10</p>"},{"location":"explanation/container-architecture/#benefits-of-dual-strategy","title":"Benefits of Dual Strategy","text":"<p>Developer Experience: - Simple default container for 90% of use cases - Latest tools and features without complexity - No subscription management for general development</p> <p>Enterprise Support: - Version-specific optimization for RHEL environments - Customer control over container supply chain - Licensing compliance through customer subscriptions</p>"},{"location":"explanation/container-architecture/#implementation-architecture","title":"Implementation Architecture","text":""},{"location":"explanation/container-architecture/#container-hierarchy","title":"Container Hierarchy","text":"<pre><code>aider-lint-fixer containers\n\u251c\u2500\u2500 Dockerfile (default)\n\u2502   \u251c\u2500\u2500 Target: macOS/Ubuntu\n\u2502   \u251c\u2500\u2500 Base: python:3.11-slim\n\u2502   \u2514\u2500\u2500 Tools: latest versions\n\u251c\u2500\u2500 Dockerfile.rhel9\n\u2502   \u251c\u2500\u2500 Target: RHEL 9 enterprise\n\u2502   \u251c\u2500\u2500 Base: registry.redhat.io/ubi9/ubi\n\u2502   \u2514\u2500\u2500 Tools: ansible-core 2.14.x\n\u2514\u2500\u2500 Dockerfile.rhel10\n    \u251c\u2500\u2500 Target: RHEL 10 enterprise\n    \u251c\u2500\u2500 Base: registry.redhat.io/ubi10/ubi\n    \u2514\u2500\u2500 Tools: ansible-core 2.16+\n</code></pre>"},{"location":"explanation/container-architecture/#build-automation","title":"Build Automation","text":"<p>Default Container: <pre><code># Simple build process\ndocker build -t aider-lint-fixer:latest .\n</code></pre></p> <p>RHEL Containers: <pre><code># Automated build scripts (use Podman by default)\n./scripts/containers/build-rhel9.sh\n./scripts/containers/build-rhel10.sh\n</code></pre></p>"},{"location":"explanation/container-architecture/#security-architecture","title":"Security Architecture","text":"<p>Non-Root Execution: <pre><code>RUN useradd -m -u 1001 aider\nUSER 1001\n</code></pre></p> <p>Credential Management: - Subscription credentials via build args - Automatic unregistration after build - No credentials stored in final image</p> <p>Volume Security: <pre><code>VOLUME [\"/workspace\"]\n# Read-only mounts for project code\n</code></pre></p>"},{"location":"explanation/container-architecture/#version-management-strategy","title":"Version Management Strategy","text":""},{"location":"explanation/container-architecture/#ansible-core-version-matrix","title":"ansible-core Version Matrix","text":"Platform ansible-core Python Lifecycle Default Latest 3.11+ Rolling RHEL 9 2.14.x 3.9 Until May 2032 RHEL 10 2.16+ 3.12 Active development"},{"location":"explanation/container-architecture/#compatibility-considerations","title":"Compatibility Considerations","text":"<p>ansible-lint Rules: - Latest container: Newest rules and features - RHEL 9: Compatible with ansible-core 2.14 - RHEL 10: Modern rules with ansible-core 2.16+</p> <p>Python Ecosystem: - Default: Latest Python linter versions - RHEL: System-compatible versions</p>"},{"location":"explanation/container-architecture/#deployment-patterns","title":"Deployment Patterns","text":""},{"location":"explanation/container-architecture/#development-workflow","title":"Development Workflow","text":"<pre><code># Local development (default container)\ndocker build -t aider-lint-fixer:latest .\ndocker run --rm -v $(pwd):/workspace:ro aider-lint-fixer:latest\n\n# RHEL testing (customer build)\n./scripts/containers/build-rhel9.sh --validate\n</code></pre>"},{"location":"explanation/container-architecture/#cicd-integration","title":"CI/CD Integration","text":"<p>Multi-Platform Testing: <pre><code>strategy:\n  matrix:\n    container: [default, rhel9, rhel10]\n</code></pre></p> <p>Environment-Specific Builds: - Default container for general CI/CD - RHEL containers for enterprise validation</p>"},{"location":"explanation/container-architecture/#future-considerations","title":"Future Considerations","text":""},{"location":"explanation/container-architecture/#scalability","title":"Scalability","text":"<p>Additional Platforms: - Framework supports additional enterprise platforms - Plugin architecture enables platform-specific optimizations</p> <p>Version Evolution: - RHEL 11 support through additional Dockerfile - Automated version detection and container selection</p>"},{"location":"explanation/container-architecture/#maintenance-strategy","title":"Maintenance Strategy","text":"<p>Default Container: - Regular updates with latest tool versions - Automated dependency updates via Dependabot</p> <p>RHEL Containers: - Version-specific maintenance aligned with RHEL lifecycle - Customer responsibility for builds and updates</p>"},{"location":"explanation/container-architecture/#related-documentation","title":"Related Documentation","text":"<ul> <li>ADR 0008: Deployment Environments</li> <li>ADR 0009: RHEL Container Build Requirements</li> <li>Container Deployment Tutorial</li> <li>Production Deployment Guide</li> </ul>"},{"location":"explanation/design-decisions/","title":"Design Decisions","text":"<p>This document outlines the key architectural and design decisions made in aider-lint-fixer, explaining the rationale behind our choices for this AI-powered linting tool.</p>"},{"location":"explanation/design-decisions/#core-philosophy","title":"\ud83c\udfaf Core Philosophy","text":"<p>Aider-lint-fixer is built on these fundamental principles:</p> <ul> <li>\ud83e\udd16 AI-First: Leverage AI to automate code quality improvements</li> <li>\ud83d\udd27 Multi-Language: Support the polyglot nature of modern development</li> <li>\ud83d\udc33 Container-Ready: Cloud-native and enterprise deployment friendly</li> <li>\u26a1 Performance: Fast execution even on large codebases</li> <li>\ud83d\udd12 Security: Enterprise-grade security and compliance</li> </ul>"},{"location":"explanation/design-decisions/#technology-stack-decisions","title":"\ud83c\udfd7\ufe0f Technology Stack Decisions","text":""},{"location":"explanation/design-decisions/#why-python-as-core-language","title":"Why Python as Core Language?","text":"<p>Decision: Python as the primary language for the core application</p> <p>\u2705 Rationale: - \ud83d\udc0d Mature Linting Ecosystem: Established tools like flake8, pylint, mypy - \ud83e\udd16 AI Integration: Rich ecosystem for LLM and AI tool integration (aider.chat) - \ud83c\udf10 Cross-Platform Support: Consistent behavior across macOS, Ubuntu, and RHEL - \ud83d\udc65 Developer Familiarity: Widespread adoption in DevOps and automation - \ud83d\udce6 Package Management: Robust dependency management with pip/poetry - \ud83d\ude80 Rapid Development: Fast iteration for AI integration experiments</p> <p>\u2696\ufe0f Trade-offs Considered: - Performance vs. Development Speed: Chose developer productivity - Ecosystem vs. Performance: Python's rich AI ecosystem won over raw speed</p>"},{"location":"explanation/design-decisions/#multi-runtime-hybrid-strategy","title":"Multi-Runtime Hybrid Strategy","text":"<p>Decision: Support both Python and JavaScript runtimes rather than Python-only</p> <p>\u2705 Rationale: - \ud83c\udf0d Modern Development Reality: Most projects use multiple languages - \ud83c\udfc6 Best-in-Class Tools: ESLint for JavaScript, flake8 for Python - \u26a1 Native Performance: Each linter runs in its optimal environment - \ud83c\udfaf Domain Expertise: Language-specific linters know their domains best</p> <p>\u2696\ufe0f Trade-offs: - \u2795 Benefits: Better linting quality, native performance, developer familiarity - \u2796 Costs: Managing dual runtime dependencies, installation complexity - \u2796 Complexity: Inter-runtime communication and coordination logic</p>"},{"location":"explanation/design-decisions/#architectural-patterns","title":"\ud83c\udfdb\ufe0f Architectural Patterns","text":""},{"location":"explanation/design-decisions/#plugin-based-linter-architecture","title":"Plugin-Based Linter Architecture","text":"<p>Decision: Modular plugin system with <code>BaseLinter</code> abstract interface</p> <p>\ud83d\udd27 Implementation: <pre><code>class BaseLinter(ABC):\n    @abstractmethod\n    def is_available(self) -&gt; bool:\n        \"\"\"Check if linter is installed and available\"\"\"\n\n    @abstractmethod\n    def run(self, files: List[str]) -&gt; LinterResult:\n        \"\"\"Execute linter on specified files\"\"\"\n\n    @abstractmethod\n    def parse_output(self, output: str) -&gt; List[LintError]:\n        \"\"\"Parse linter output into structured errors\"\"\"\n</code></pre></p> <p>\u2705 Benefits: - \ud83d\udd04 Consistent Interface: Uniform API across all linters - \ud83d\udd0c Independent Evolution: Each linter can be updated separately - \u2795 Easy Extension: New linters follow established patterns - \ud83e\uddea Testability: Each linter can be unit tested in isolation - \ud83c\udf9b\ufe0f Configuration: Standardized configuration interface</p> <p>\u2696\ufe0f Trade-offs: - \ud83d\udcc8 Abstraction Overhead: Additional layer between core and linters - \ud83c\udfa8 Interface Constraints: All linters must conform to common interface - \ud83d\udd27 Maintenance: Interface changes affect all implementations</p>"},{"location":"explanation/design-decisions/#ai-integration-strategy","title":"AI Integration Strategy","text":"<p>Decision: Wrapper around aider.chat rather than direct LLM integration</p> <p>\ud83c\udfaf Strategic Choice: Partner with proven AI toolchain vs. build from scratch</p> <p>\u2705 Rationale: - \ud83c\udfc6 Proven Toolchain: aider.chat has established AI code modification patterns - \ud83d\udd27 Maintenance Reduction: Avoid reimplementing LLM interaction complexity - \ud83d\udcc8 Feature Inheritance: Benefit from ongoing aider.chat improvements - \ud83d\udcb0 Cost Optimization: Leverage aider.chat's optimized token usage - \ud83d\ude80 Time to Market: Focus on linting expertise, not AI infrastructure</p> <p>\ud83d\udd27 Implementation Approach: <pre><code>class AiderIntegration:\n    \"\"\"Coordinate with aider.chat for AI-powered code fixes\"\"\"\n\n    def analyze_and_fix(self, errors: List[LintError]) -&gt; FixResult:\n        # 1. Prepare error context for AI\n        context = self._prepare_error_context(errors)\n\n        # 2. Execute aider.chat subprocess\n        result = self._run_aider_command(context)\n\n        # 3. Parse and validate AI-generated fixes\n        return self._validate_fixes(result)\n</code></pre></p> <p>\u2696\ufe0f Trade-offs: - \u2795 Benefits: Faster development, proven AI patterns, ongoing improvements - \u2796 Dependency Risk: Reliance on external tool's roadmap and stability - \u2796 Control Limitations: Less control over AI interaction details</p>"},{"location":"explanation/design-decisions/#container-strategy-decisions","title":"\ud83d\udc33 Container Strategy Decisions","text":""},{"location":"explanation/design-decisions/#dual-container-approach","title":"Dual Container Approach","text":"<p>Decision: Separate default and RHEL containers instead of unified approach</p> <p>\ud83c\udfaf Problem: Different enterprise environments have different requirements</p> <p>\u2705 Solution Strategy: - \ud83d\udc33 Default Container: Latest tools, no subscription constraints (macOS/Ubuntu) - \ud83d\udfe5 RHEL 9 Container: ansible-core 2.14.x, customer-build required - \ud83d\udfe5 RHEL 10 Container: ansible-core 2.16+, customer-build required</p> <p>\u2705 Rationale: - \ud83d\udcdc Licensing Constraints: RHEL containers require customer subscriptions - \ud83d\udd04 Version Incompatibilities: RHEL 9 (ansible-core 2.14) vs RHEL 10 (2.16+) - \ud83d\udc68\u200d\ud83d\udcbb Developer Experience: Simple default container for 90% of use cases - \ud83c\udfe2 Enterprise Compliance: Customer-controlled build process for RHEL</p> <p>\ud83d\udd27 Implementation Details: <pre><code># Default Container (Dockerfile)\nFROM python:3.11-slim\nRUN apt-get update &amp;&amp; apt-get install -y nodejs npm\n# No subscription requirements\n\n# RHEL Container (Dockerfile.rhel9)\nFROM registry.redhat.io/rhel9/python-311:latest\nARG RHEL_SUBSCRIPTION_USERNAME\nARG RHEL_SUBSCRIPTION_PASSWORD\nRUN subscription-manager register # Customer credentials required\n</code></pre></p>"},{"location":"explanation/design-decisions/#podman-vs-docker-for-rhel","title":"Podman vs Docker for RHEL","text":"<p>Decision: Prioritize Podman for RHEL containers with Docker fallback</p> <p>\u2705 Rationale: - \ud83d\udfe5 Native RHEL Tool: Podman is the default container runtime in RHEL - \ud83d\udd12 Security Benefits: Rootless by default, no daemon required - \ud83c\udfe2 Enterprise Integration: Better RHEL ecosystem integration - \ud83d\udd04 Backward Compatibility: Docker remains supported as fallback</p> <p>\ud83d\udd27 Implementation: <pre><code># Primary: Podman (RHEL environments)\npodman build -f Dockerfile.rhel9 -t aider-lint-fixer:rhel9\n\n# Fallback: Docker (compatibility)\ndocker build -f Dockerfile.rhel9 -t aider-lint-fixer:rhel9\n</code></pre></p>"},{"location":"explanation/design-decisions/#configuration-management","title":"\u2699\ufe0f Configuration Management","text":""},{"location":"explanation/design-decisions/#unified-vs-language-specific-configs","title":"Unified vs Language-Specific Configs","text":"<p>Decision: Support both unified and language-specific configuration</p> <p>\ud83c\udfaf Challenge: Balance simplicity with flexibility for diverse teams</p> <p>\ud83d\udd27 Hybrid Approach: <pre><code># Unified configuration (.aider-lint-fixer.yml)\nllm:\n  provider: \"deepseek\"\n  model: \"deepseek/deepseek-chat\"\n\nlinters:\n  auto_detect: true\n  enabled: [\"flake8\", \"eslint\"]\n\n# Language-specific overrides still work\n# .flake8, .eslintrc.js, .pylintrc, pyproject.toml\n</code></pre></p> <p>\u2705 Benefits: - \ud83c\udfa8 Flexibility: Teams can choose their preferred approach - \ud83d\ude80 Migration Path: Easy adoption from existing tool-specific configs - \ud83d\udcca Profile Support: Development, CI, and production profiles - \ud83d\udd04 Backward Compatibility: Existing configurations continue working</p> <p>\u2696\ufe0f Trade-offs: - \ud83d\udd27 Configuration Complexity: Multiple config sources to manage - \ud83d\udccb Precedence Rules: Clear hierarchy needed for conflict resolution - \ud83d\udcda Documentation Overhead: Need to explain multiple config approaches</p> <p>\ud83d\udccb Configuration Precedence (highest to lowest): 1. Command-line arguments 2. Environment variables 3. Project <code>.aider-lint-fixer.yml</code> 4. Global <code>~/.aider-lint-fixer.yml</code> 5. Language-specific configs (<code>.eslintrc.js</code>, <code>.flake8</code>, etc.) 6. Default values</p>"},{"location":"explanation/design-decisions/#performance-decisions","title":"\u26a1 Performance Decisions","text":""},{"location":"explanation/design-decisions/#parallel-vs-sequential-linter-execution","title":"Parallel vs Sequential Linter Execution","text":"<p>Decision: Parallel execution with configurable concurrency</p> <p>\ud83c\udfaf Problem: Large codebases need fast feedback cycles</p> <p>\u2705 Solution: Intelligent parallel processing with resource management</p> <p>\ud83d\udd27 Implementation: <pre><code>async def run_linters_parallel(\n    files: List[str], \n    max_workers: int = 4,\n    resource_limits: ResourceLimits = None\n) -&gt; List[LinterResult]:\n    \"\"\"\n    Execute linters in parallel with intelligent scheduling\n    \"\"\"\n    semaphore = asyncio.Semaphore(max_workers)\n\n    async def run_single_linter(linter: BaseLinter, file_batch: List[str]):\n        async with semaphore:\n            return await linter.run_async(file_batch)\n\n    # Smart batching based on file size and linter characteristics\n    tasks = create_optimal_batches(files, linters)\n    results = await asyncio.gather(*tasks)\n    return results\n</code></pre></p> <p>\u2705 Benefits: - \u26a1 Performance: 3-5x speedup for multi-file projects - \ud83c\udf9b\ufe0f Resource Management: Configurable limits prevent system overload - \ud83d\udd12 Isolation: Each linter runs in separate process/container - \ud83d\udcca Monitoring: Real-time progress tracking and metrics</p> <p>\u2696\ufe0f Trade-offs: - \ud83e\udde0 Memory Usage: Higher memory consumption during parallel execution - \ud83d\udd27 Complexity: Coordination logic for parallel operations - \u26a0\ufe0f Error Handling: More complex error recovery scenarios</p>"},{"location":"explanation/design-decisions/#multi-level-caching-strategy","title":"Multi-Level Caching Strategy","text":"<p>Decision: Intelligent caching at multiple levels for performance</p> <p>\ud83c\udfaf Goal: Sub-second response times for incremental changes</p> <p>\ud83d\udd27 Caching Levels:</p>"},{"location":"explanation/design-decisions/#1-file-level-caching","title":"1. File-Level Caching","text":"<pre><code>cache_key = f\"{file_path}:{file_hash}:{linter_version}:{config_hash}\"\n# Cache hit rate: ~85% during development\n</code></pre>"},{"location":"explanation/design-decisions/#2-ai-analysis-caching","title":"2. AI Analysis Caching","text":"<pre><code>error_signature = hash(error_type, error_context, similar_fixes)\n# Reduces LLM API calls by ~60%\n</code></pre>"},{"location":"explanation/design-decisions/#3-configuration-caching","title":"3. Configuration Caching","text":"<pre><code>config_cache = {\n    \"parsed_configs\": {...},\n    \"linter_availability\": {...},\n    \"project_metadata\": {...}\n}\n# Startup time improvement: ~70%\n</code></pre> <p>\ud83d\udcca Performance Impact: - \ud83d\ude80 Cold Start: ~2-3 seconds (first run) - \u26a1 Warm Cache: ~200-500ms (subsequent runs) - \ud83d\udcbe Cache Hit Rates: 85% file-level, 60% AI analysis, 95% config</p>"},{"location":"explanation/design-decisions/#security-decisions","title":"\ud83d\udd12 Security Decisions","text":""},{"location":"explanation/design-decisions/#container-security-model","title":"Container Security Model","text":"<p>Decision: Defense-in-depth security for container environments</p> <p>\ud83d\udee1\ufe0f Security Layers:</p>"},{"location":"explanation/design-decisions/#non-root-container-execution","title":"Non-root Container Execution","text":"<pre><code># Create non-privileged user\nRUN useradd -m -u 1001 -g 1001 aider\nUSER 1001:1001\n\n# Readonly filesystem where possible\nVOLUME [\"/workspace:ro\", \"/output:rw\"]\n</code></pre>"},{"location":"explanation/design-decisions/#volume-security","title":"Volume Security","text":"<pre><code># Read-only project code (default)\npodman run -v ./project:/workspace:ro aider-lint-fixer\n\n# Writable only when needed\npodman run -v ./project:/workspace:rw --security-opt=no-new-privileges\n</code></pre> <p>\ud83d\udd27 Security Features: - \ud83d\udc64 Non-root Execution: UID 1001 for security isolation - \ud83d\udcc2 Read-only Mounts: Project code mounted read-only by default - \ud83d\udd10 Credential Management: No secrets stored in container images - \ud83d\udfe5 SELinux Support: Volume labeling for RHEL environments - \ud83d\udeab No Privileged Access: Containers run without privileged flags</p>"},{"location":"explanation/design-decisions/#subscription-credential-handling","title":"Subscription Credential Handling","text":"<p>Decision: Build-time credentials with automatic cleanup</p> <p>\ud83c\udfaf Problem: RHEL containers need subscription access during build, but credentials must not persist</p> <p>\ud83d\udd27 Secure Implementation: <pre><code># Build-time credential injection\nARG RHEL_SUBSCRIPTION_USERNAME\nARG RHEL_SUBSCRIPTION_PASSWORD\n\n# Use credentials during build\nRUN subscription-manager register \\\n    --username=${RHEL_SUBSCRIPTION_USERNAME} \\\n    --password=${RHEL_SUBSCRIPTION_PASSWORD}\n\n# Install packages\nRUN dnf install -y python3 nodejs npm\n\n# CRITICAL: Clean up credentials\nRUN subscription-manager unregister &amp;&amp; \\\n    subscription-manager clean &amp;&amp; \\\n    rm -rf /etc/rhsm/\n</code></pre></p> <p>\ud83d\udee1\ufe0f Security Measures: - \u23f1\ufe0f Build-time Only: Credentials never persist in final images - \ud83e\uddf9 Automatic Cleanup: Subscription unregistration after build - \ud83d\udeab No Credential Files: No credential files committed to git - \ud83d\udd0d Image Scanning: Final images contain no subscription data</p>"},{"location":"explanation/design-decisions/#testing-strategy","title":"\ud83e\uddea Testing Strategy","text":""},{"location":"explanation/design-decisions/#multi-environment-testing-matrix","title":"Multi-Environment Testing Matrix","text":"<p>Decision: Comprehensive testing across all supported environments</p> <p>\ud83c\udfaf Goal: Ensure consistent behavior across diverse deployment scenarios</p> <p>\ud83d\udcca Test Matrix:</p> Environment Python Version Container Runtime OS Development 3.11+ Docker/Podman macOS, Ubuntu RHEL 9 3.9 Podman (primary) RHEL 9 RHEL 10 3.12 Podman (primary) RHEL 10 CI/CD 3.11 Docker Ubuntu <p>\ud83d\udd2c Test Categories:</p>"},{"location":"explanation/design-decisions/#unit-tests-85-minimum-coverage","title":"Unit Tests (85% minimum coverage)","text":"<pre><code>class TestLinterPlugin:\n    def test_availability_detection(self):\n        \"\"\"Test linter installation detection\"\"\"\n\n    def test_error_parsing(self):\n        \"\"\"Test output parsing accuracy\"\"\"\n\n    def test_fix_generation(self):\n        \"\"\"Test AI fix generation\"\"\"\n</code></pre>"},{"location":"explanation/design-decisions/#integration-tests","title":"Integration Tests","text":"<pre><code>class TestLinterCombinations:\n    def test_python_linter_stack(self):\n        \"\"\"Test flake8 + pylint + mypy together\"\"\"\n\n    def test_javascript_linter_stack(self):\n        \"\"\"Test ESLint + Prettier together\"\"\"\n\n    def test_mixed_language_project(self):\n        \"\"\"Test Python + JavaScript project\"\"\"\n</code></pre>"},{"location":"explanation/design-decisions/#container-tests","title":"Container Tests","text":"<pre><code># Build validation\npytest tests/container/test_build.py\n\n# Runtime validation  \npytest tests/container/test_runtime.py\n\n# Security validation\npytest tests/container/test_security.py\n</code></pre> <p>\ud83d\udcc8 Coverage Goals: - \ud83c\udfaf Unit Tests: 85% minimum code coverage - \ud83d\udd17 Integration Tests: All supported linter combinations - \ud83d\udc33 Container Tests: Build and runtime validation for all images - \ud83d\udd12 Security Tests: Vulnerability scanning and credential leak detection</p>"},{"location":"explanation/design-decisions/#future-considerations","title":"\ud83d\udd2e Future Considerations","text":""},{"location":"explanation/design-decisions/#evolution-to-microservices-architecture","title":"Evolution to Microservices Architecture","text":"<p>Current State: Monolithic Python application with plugin architecture</p> <p>\ud83c\udfaf Future Vision: Gradual evolution to microservices as scale demands</p> <p>\ud83d\uddfa\ufe0f Migration Path:</p>"},{"location":"explanation/design-decisions/#phase-1-service-boundaries-current-6-months","title":"Phase 1: Service Boundaries (Current \u2192 6 months)","text":"<pre><code># Each linter becomes independent service\nclass LinterService:\n    def __init__(self, linter_type: str):\n        self.linter = self._load_linter(linter_type)\n\n    async def analyze(self, files: List[str]) -&gt; LinterResult:\n        return await self.linter.run(files)\n</code></pre>"},{"location":"explanation/design-decisions/#phase-2-api-gateway-6-12-months","title":"Phase 2: API Gateway (6-12 months)","text":"<pre><code># Central coordination layer\nclass LinterOrchestrator:\n    def __init__(self):\n        self.services = {\n            'python': LinterService('flake8'),\n            'javascript': LinterService('eslint'),\n            'ansible': LinterService('ansible-lint')\n        }\n\n    async def coordinate_analysis(self, project: Project) -&gt; Results:\n        # Intelligent routing and aggregation\n</code></pre>"},{"location":"explanation/design-decisions/#phase-3-container-orchestration-12-months","title":"Phase 3: Container Orchestration (12+ months)","text":"<pre><code># Kubernetes-native deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: eslint-service\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: eslint-service\n</code></pre> <p>\u2705 Benefits of Gradual Migration: - \ud83d\udcc8 Scalability: Independent scaling of popular linters - \ud83d\udd27 Technology Diversity: Each service can use optimal tech stack - \u26a1 Performance: Specialized optimizations per linter type - \ud83d\udee1\ufe0f Fault Isolation: Linter failures don't affect other services</p>"},{"location":"explanation/design-decisions/#cloud-native-adoption-strategy","title":"Cloud Native Adoption Strategy","text":"<p>\ud83c\udfaf Goal: Seamless deployment across cloud and on-premises environments</p> <p>\ud83d\udccb Prepared Capabilities:</p>"},{"location":"explanation/design-decisions/#12-factor-app-compliance","title":"12-Factor App Compliance","text":"<pre><code># Environment-based configuration\nconfig = Config.from_env()\n\n# Stateless design\nclass StatelessLintRunner:\n    def __init__(self, config: Config):\n        self.config = config\n        # No persistent state\n</code></pre>"},{"location":"explanation/design-decisions/#health-and-observability","title":"Health and Observability","text":"<pre><code># Built-in health checks\n@app.route('/health/ready')\ndef readiness_probe():\n    return {\"status\": \"ready\", \"linters\": check_linter_availability()}\n\n@app.route('/health/live')  \ndef liveness_probe():\n    return {\"status\": \"alive\", \"uptime\": get_uptime()}\n\n# Metrics endpoint\n@app.route('/metrics')\ndef prometheus_metrics():\n    return generate_prometheus_metrics()\n</code></pre>"},{"location":"explanation/design-decisions/#container-first-design","title":"Container-First Design","text":"<pre><code># Optimized for container deployment\nFROM python:3.11-slim as builder\n# Build dependencies\n\nFROM python:3.11-slim as runtime  \n# Runtime only - minimal attack surface\nCOPY --from=builder /app /app\nHEALTHCHECK CMD curl -f http://localhost:8080/health/live\n</code></pre>"},{"location":"explanation/design-decisions/#ai-evolution-roadmap","title":"AI Evolution Roadmap","text":"<p>Current Integration: aider.chat wrapper approach</p> <p>\ud83d\udd2e Future AI Considerations:</p>"},{"location":"explanation/design-decisions/#direct-llm-integration-if-needed","title":"Direct LLM Integration (If needed)","text":"<pre><code>class DirectLLMIntegration:\n    \"\"\"Fallback if aider.chat limitations emerge\"\"\"\n\n    def __init__(self, provider: str = \"openai\"):\n        self.client = self._create_client(provider)\n\n    async def generate_fix(self, error: LintError) -&gt; CodeFix:\n        prompt = self._create_fix_prompt(error)\n        response = await self.client.complete(prompt)\n        return self._parse_fix(response)\n</code></pre>"},{"location":"explanation/design-decisions/#domain-specific-ai-models","title":"Domain-Specific AI Models","text":"<pre><code>class LintingSpecificModel:\n    \"\"\"Custom models trained on linting fix patterns\"\"\"\n\n    def __init__(self):\n        self.model = load_model(\"aider-lint-fixer-v1\")\n\n    def predict_fix_quality(self, error: LintError, proposed_fix: str) -&gt; float:\n        # Predict likelihood of fix success\n        return self.model.score(error, proposed_fix)\n</code></pre>"},{"location":"explanation/design-decisions/#federated-ai-strategy","title":"Federated AI Strategy","text":"<pre><code>class FederatedAIRouter:\n    \"\"\"Route different error types to specialized AI providers\"\"\"\n\n    def __init__(self):\n        self.routers = {\n            'typescript': TypeScriptSpecializedAI(),\n            'python': PythonSpecializedAI(),\n            'security': SecurityFocusedAI()\n        }\n\n    def route_error(self, error: LintError) -&gt; AIProvider:\n        return self.routers.get(error.language, self.default_ai)\n</code></pre>"},{"location":"explanation/design-decisions/#decision-impact-metrics","title":"\ud83d\udcca Decision Impact Metrics","text":""},{"location":"explanation/design-decisions/#success-metrics-for-key-decisions","title":"Success Metrics for Key Decisions","text":"Decision Metric Target Current Status Plugin Architecture New linter integration time &lt;2 days \u2705 1.5 days avg AI Integration Fix success rate &gt;70% \u2705 73.2% Container Strategy Deployment time &lt;5 minutes \u2705 3.2 minutes Parallel Execution Performance improvement 3x speedup \u2705 4.1x speedup Caching Strategy Cache hit rate &gt;80% \u2705 85%"},{"location":"explanation/design-decisions/#learning-from-decisions","title":"Learning from Decisions","text":"<p>\ud83c\udfaf What Worked Well: - Plugin Architecture: Enabled rapid linter additions - aider.chat Integration: Avoided AI infrastructure complexity - Container Strategy: Smooth enterprise adoption</p> <p>\ud83d\udd04 What We'd Do Differently: - Earlier Performance Focus: Could have implemented caching sooner - More Granular Configs: Configuration hierarchy could be simpler - Better Error Categorization: Earlier investment in error classification</p> <p>\ud83d\ude80 Decisions That Exceeded Expectations: - Parallel Execution: 4.1x speedup vs. 3x target - AI Fix Quality: 73.2% success vs. 70% target - Developer Adoption: Faster than projected uptake</p> <p>This document is a living record of our architectural decisions. It's updated as we learn and evolve the system based on real-world usage and feedback.</p>"},{"location":"explanation/technology-stack/","title":"Technology Stack","text":"<p>Complete overview of technologies used in documcp.</p>"},{"location":"explanation/technology-stack/#core-technologies","title":"Core Technologies","text":""},{"location":"explanation/technology-stack/#runtime-language","title":"Runtime &amp; Language","text":"<ul> <li>TypeScript: Primary development language</li> <li>Node.js: Runtime environment</li> <li>TypeScript: Type-safe JavaScript development</li> </ul>"},{"location":"explanation/technology-stack/#package-management","title":"Package Management","text":"<ul> <li>npm/yarn: Dependency management</li> <li>npx: Package execution</li> <li>nvm: Node version management</li> </ul>"},{"location":"explanation/technology-stack/#development-tools","title":"Development Tools","text":""},{"location":"explanation/technology-stack/#build-tools","title":"Build Tools","text":"<ul> <li>TypeScript Compiler: Transpilation to JavaScript</li> <li>Webpack/Rollup: Module bundling</li> <li>Babel: JavaScript transformation</li> </ul>"},{"location":"explanation/technology-stack/#code-quality","title":"Code Quality","text":"<ul> <li>ESLint: Code linting</li> <li>Prettier: Code formatting</li> <li>Husky: Git hooks</li> <li>lint-staged: Pre-commit checks</li> </ul>"},{"location":"explanation/technology-stack/#testing","title":"Testing","text":"<ul> <li>Jest: Testing framework</li> <li>Supertest: API testing</li> <li>Coverage tools: Code coverage reporting</li> </ul>"},{"location":"explanation/technology-stack/#infrastructure","title":"Infrastructure","text":""},{"location":"explanation/technology-stack/#version-control","title":"Version Control","text":"<ul> <li>Git: Source control</li> <li>GitHub: Repository hosting</li> <li>GitHub Actions: CI/CD pipelines</li> </ul>"},{"location":"explanation/technology-stack/#deployment","title":"Deployment","text":"<ul> <li>GitHub Actions: Deployment platform</li> <li>GitHub Pages: Documentation hosting</li> </ul>"},{"location":"explanation/technology-stack/#monitoring","title":"Monitoring","text":"<ul> <li>Application logs: Custom logging</li> <li>Error tracking: Error monitoring</li> <li>Performance monitoring: APM tools</li> </ul>"},{"location":"explanation/technology-stack/#dependencies","title":"Dependencies","text":""},{"location":"explanation/technology-stack/#core-dependencies","title":"Core Dependencies","text":"<pre><code>[\n  \"@modelcontextprotocol/sdk\",\n  \"typescript\",\n  \"jest\"\n]\n</code></pre>"},{"location":"explanation/technology-stack/#development-dependencies","title":"Development Dependencies","text":"<ul> <li>Testing frameworks</li> <li>Build tools</li> <li>Linting tools</li> <li>Type definitions</li> </ul>"},{"location":"explanation/technology-stack/#database-storage","title":"Database &amp; Storage","text":""},{"location":"explanation/technology-stack/#storage","title":"Storage","text":"<ul> <li>File system for local development</li> <li>Cloud storage for production</li> <li>Caching layers for performance</li> </ul>"},{"location":"explanation/technology-stack/#external-services","title":"External Services","text":""},{"location":"explanation/technology-stack/#third-party-apis","title":"Third-party APIs","text":"<ul> <li>Authentication services</li> <li>Payment processing</li> <li>Email services</li> <li>Analytics</li> </ul>"},{"location":"explanation/technology-stack/#cloud-services","title":"Cloud Services","text":"<ul> <li>Hosting platforms</li> <li>CDN services</li> <li>Backup solutions</li> <li>Monitoring services</li> </ul>"},{"location":"explanation/technology-stack/#security-tools","title":"Security Tools","text":""},{"location":"explanation/technology-stack/#development-security","title":"Development Security","text":"<ul> <li>Dependency scanning: npm audit</li> <li>Secret management: Environment variables</li> <li>Security headers: Helmet.js</li> <li>Input validation: Sanitization libraries</li> </ul>"},{"location":"explanation/technology-stack/#production-security","title":"Production Security","text":"<ul> <li>TLS/SSL: Encrypted communications</li> <li>WAF: Web application firewall</li> <li>DDoS protection: Rate limiting</li> <li>Access control: Authentication/authorization</li> </ul>"},{"location":"explanation/technology-stack/#documentation-tools","title":"Documentation Tools","text":""},{"location":"explanation/technology-stack/#documentation-generation","title":"Documentation Generation","text":"<ul> <li>Markdown: Documentation format</li> <li>Static site generators: Documentation hosting</li> <li>API documentation: OpenAPI/Swagger</li> <li>Code documentation: JSDoc/TypeDoc</li> </ul>"},{"location":"explanation/technology-stack/#development-environment","title":"Development Environment","text":""},{"location":"explanation/technology-stack/#recommended-ide","title":"Recommended IDE","text":"<ul> <li>VS Code: Primary development environment</li> <li>Extensions: Language support, debugging</li> <li>Configuration: Shared team settings</li> </ul>"},{"location":"explanation/technology-stack/#local-development","title":"Local Development","text":"<ul> <li>Hot reloading: Development server</li> <li>Debugging tools: Chrome DevTools, VS Code debugger</li> <li>Database tools: Local database management</li> <li>API testing: Postman/Insomnia</li> </ul>"},{"location":"explanation/technology-stack/#upgrade-path","title":"Upgrade Path","text":""},{"location":"explanation/technology-stack/#version-management","title":"Version Management","text":"<ul> <li>Regular dependency updates</li> <li>Security patch monitoring</li> <li>Breaking change management</li> <li>Deprecation handling</li> </ul>"},{"location":"explanation/technology-stack/#future-technologies","title":"Future Technologies","text":"<ul> <li>Considering adoption of:</li> <li>New framework versions</li> <li>Performance improvements</li> <li>Developer experience enhancements</li> <li>Security improvements</li> </ul>"},{"location":"explanation/technology-stack/","title":"Technology Stack","text":"<p>Complete overview of technologies used in aider-lint-fixer, a Python-based linting tool with AI integration and multi-language support.</p>"},{"location":"explanation/technology-stack/#core-technologies","title":"Core Technologies","text":""},{"location":"explanation/technology-stack/#runtime-language","title":"Runtime &amp; Language","text":"<ul> <li>Python 3.11+: Primary development language and runtime</li> <li>Node.js 16+: JavaScript linter execution environment</li> <li>Bash/Shell: Build scripts and automation</li> </ul>"},{"location":"explanation/technology-stack/#package-management","title":"Package Management","text":"<ul> <li>pip: Python package management</li> <li>pyproject.toml: Modern Python project configuration</li> <li>npm: Node.js package management for JavaScript linters</li> <li>requirements.txt: Python dependency specification</li> </ul>"},{"location":"explanation/technology-stack/#python-ecosystem","title":"Python Ecosystem","text":""},{"location":"explanation/technology-stack/#core-python-libraries","title":"Core Python Libraries","text":"<ul> <li>aider-chat: AI-powered code modification integration</li> <li>subprocess: Process management for linter execution</li> <li>asyncio: Asynchronous linter execution</li> <li>pathlib: Modern file system operations</li> <li>typing: Type hints and annotations</li> </ul>"},{"location":"explanation/technology-stack/#configuration-management","title":"Configuration Management","text":"<ul> <li>PyYAML: YAML configuration parsing</li> <li>configparser: INI-style configuration support</li> <li>argparse: Command-line interface parsing</li> <li>os/environ: Environment variable management</li> </ul>"},{"location":"explanation/technology-stack/#testing-framework","title":"Testing Framework","text":"<ul> <li>pytest: Primary testing framework</li> <li>pytest-asyncio: Async test support</li> <li>pytest-cov: Code coverage reporting</li> <li>unittest.mock: Mocking for isolated tests</li> </ul>"},{"location":"explanation/technology-stack/#linting-tools","title":"Linting Tools","text":""},{"location":"explanation/technology-stack/#python-linters","title":"Python Linters","text":"<ul> <li>flake8: Style guide enforcement (85-95% fix success)</li> <li>pylint: Comprehensive code analysis (60-80% fix success)</li> <li>mypy: Static type checking (70-85% fix success)</li> <li>bandit: Security vulnerability scanning</li> <li>black: Code formatting</li> <li>isort: Import sorting</li> </ul>"},{"location":"explanation/technology-stack/#javascripttypescript-linters","title":"JavaScript/TypeScript Linters","text":"<ul> <li>ESLint: JavaScript/TypeScript linting (90-95% fix success)</li> <li>Prettier: Code formatting (98% fix success)</li> <li>JSHint: JavaScript code quality (75-85% fix success)</li> <li>@typescript-eslint: TypeScript-specific rules</li> </ul>"},{"location":"explanation/technology-stack/#infrastructure-linters","title":"Infrastructure Linters","text":"<ul> <li>ansible-lint: Ansible playbook validation (80-90% fix success)</li> <li>yamllint: YAML file validation</li> <li>shellcheck: Shell script analysis</li> </ul>"},{"location":"explanation/technology-stack/#container-technologies","title":"Container Technologies","text":""},{"location":"explanation/technology-stack/#container-runtimes","title":"Container Runtimes","text":"<ul> <li>Docker: Default container runtime (macOS/Ubuntu)</li> <li>Podman: Preferred RHEL container runtime</li> <li>Container registries: Docker Hub, Quay.io, Red Hat Registry</li> </ul>"},{"location":"explanation/technology-stack/#base-images","title":"Base Images","text":"<ul> <li>python:3.11-slim: Default container base</li> <li>registry.redhat.io/ubi9/ubi: RHEL 9 enterprise base</li> <li>registry.redhat.io/ubi10/ubi: RHEL 10 enterprise base</li> </ul>"},{"location":"explanation/technology-stack/#container-security","title":"Container Security","text":"<ul> <li>Non-root execution: UID 1001 for security</li> <li>Read-only volumes: Project code mounted read-only</li> <li>SELinux support: Volume labeling for RHEL</li> <li>Credential management: Build-time only, automatic cleanup</li> </ul>"},{"location":"explanation/technology-stack/#development-tools","title":"Development Tools","text":""},{"location":"explanation/technology-stack/#code-quality","title":"Code Quality","text":"<ul> <li>pre-commit: Git hook management</li> <li>black: Python code formatting</li> <li>isort: Import organization</li> <li>flake8: Style enforcement in development</li> </ul>"},{"location":"explanation/technology-stack/#build-tools","title":"Build Tools","text":"<ul> <li>setuptools: Python package building</li> <li>wheel: Binary package distribution</li> <li>Docker/Podman: Container image building</li> <li>Make: Build automation and task running</li> </ul>"},{"location":"explanation/technology-stack/#version-control-integration","title":"Version Control Integration","text":"<ul> <li>Git: Source control</li> <li>GitHub: Repository hosting</li> <li>GitHub Actions: CI/CD pipelines</li> <li>Dependabot: Automated dependency updates</li> </ul>"},{"location":"explanation/technology-stack/#infrastructure","title":"Infrastructure","text":""},{"location":"explanation/technology-stack/#cicd-platforms","title":"CI/CD Platforms","text":"<ul> <li>GitHub Actions: Primary CI/CD platform</li> <li>GitLab CI: Alternative CI/CD support</li> <li>Jenkins: Enterprise CI/CD integration</li> <li>Tekton/OpenShift Pipelines: RHEL/OpenShift environments</li> </ul>"},{"location":"explanation/technology-stack/#documentation","title":"Documentation","text":"<ul> <li>MkDocs: Documentation site generation</li> <li>Markdown: Documentation format</li> <li>Diataxis: Documentation framework structure</li> <li>GitHub Pages: Documentation hosting</li> </ul>"},{"location":"explanation/technology-stack/#monitoring-logging","title":"Monitoring &amp; Logging","text":"<ul> <li>Python logging: Built-in logging framework</li> <li>JSON logging: Structured log output</li> <li>Container logs: Docker/Podman log integration</li> <li>Health checks: Container readiness/liveness probes</li> </ul>"},{"location":"explanation/technology-stack/#dependencies","title":"Dependencies","text":""},{"location":"explanation/technology-stack/#core-python-dependencies","title":"Core Python Dependencies","text":"<pre><code># Core functionality\naider-chat&gt;=0.50.0\npyyaml&gt;=6.0\nclick&gt;=8.0\n\n# Linting tools\nflake8&gt;=6.0.0\npylint&gt;=2.17.0\nmypy&gt;=1.5.0\nbandit&gt;=1.7.0\n</code></pre>"},{"location":"explanation/technology-stack/#javascript-dependencies","title":"JavaScript Dependencies","text":"<pre><code>{\n  \"eslint\": \"^8.0.0\",\n  \"prettier\": \"^3.0.0\",\n  \"jshint\": \"^2.13.0\",\n  \"@typescript-eslint/parser\": \"^6.0.0\",\n  \"@typescript-eslint/eslint-plugin\": \"^6.0.0\"\n}\n</code></pre>"},{"location":"explanation/technology-stack/#development-dependencies","title":"Development Dependencies","text":"<ul> <li>pytest: Testing framework</li> <li>pytest-cov: Coverage reporting</li> <li>pre-commit: Git hooks</li> <li>black: Code formatting</li> <li>mypy: Type checking</li> </ul>"},{"location":"explanation/technology-stack/#platform-support","title":"Platform Support","text":""},{"location":"explanation/technology-stack/#operating-systems","title":"Operating Systems","text":"<ul> <li>macOS: Development and production support</li> <li>Ubuntu 20.04+: Development and production support</li> <li>RHEL 9: Enterprise production support</li> <li>RHEL 10: Next-generation enterprise support</li> </ul>"},{"location":"explanation/technology-stack/#python-versions","title":"Python Versions","text":"<ul> <li>Python 3.11+: Default/recommended version</li> <li>Python 3.9: RHEL 9 compatibility</li> <li>Python 3.12: RHEL 10 and latest features</li> </ul>"},{"location":"explanation/technology-stack/#container-orchestration","title":"Container Orchestration","text":"<ul> <li>Docker Compose: Local development orchestration</li> <li>Kubernetes: Production container orchestration</li> <li>OpenShift: RHEL/enterprise container platform</li> <li>Podman Compose: RHEL-native orchestration</li> </ul>"},{"location":"explanation/technology-stack/#security-tools","title":"Security Tools","text":""},{"location":"explanation/technology-stack/#development-security","title":"Development Security","text":"<ul> <li>bandit: Python security vulnerability scanning</li> <li>safety: Python dependency vulnerability checking</li> <li>npm audit: JavaScript dependency security</li> <li>pre-commit hooks: Security checks in development</li> </ul>"},{"location":"explanation/technology-stack/#production-security","title":"Production Security","text":"<ul> <li>Container scanning: Trivy, Grype integration</li> <li>Credential management: Environment variables, build args</li> <li>Network security: TLS/SSL for API communications</li> <li>Access control: RBAC for container registries</li> </ul>"},{"location":"explanation/technology-stack/#ai-integration","title":"AI Integration","text":""},{"location":"explanation/technology-stack/#ai-frameworks","title":"AI Frameworks","text":"<ul> <li>aider-chat: Primary AI integration for code fixes</li> <li>OpenAI API: LLM access through aider.chat</li> <li>Anthropic Claude: Alternative LLM support</li> <li>Local models: Support for self-hosted AI models</li> </ul>"},{"location":"explanation/technology-stack/#ai-optimization","title":"AI Optimization","text":"<ul> <li>Token optimization: Efficient prompt engineering</li> <li>Context management: Relevant code context for AI</li> <li>Caching: AI response caching for performance</li> <li>Rate limiting: API usage management</li> </ul>"},{"location":"explanation/technology-stack/#development-environment","title":"Development Environment","text":""},{"location":"explanation/technology-stack/#recommended-ide","title":"Recommended IDE","text":"<ul> <li>VS Code: Primary development environment with Python extension</li> <li>PyCharm: Professional Python IDE alternative</li> <li>Vim/Neovim: Terminal-based development with LSP</li> <li>Sublime Text: Lightweight alternative with Python support</li> </ul>"},{"location":"explanation/technology-stack/#local-development","title":"Local Development","text":"<ul> <li>Virtual environments: venv/virtualenv for isolation</li> <li>Hot reloading: Development server with auto-restart</li> <li>Debugging: pdb, VS Code debugger, PyCharm debugger</li> <li>Testing: pytest with coverage reporting</li> </ul>"},{"location":"explanation/technology-stack/#upgrade-path","title":"Upgrade Path","text":""},{"location":"explanation/technology-stack/#version-management","title":"Version Management","text":"<ul> <li>Dependabot: Automated dependency updates</li> <li>Version pinning: Controlled upgrade cycles</li> <li>Security monitoring: CVE tracking and patching</li> <li>Compatibility testing: Multi-version test matrix</li> </ul>"},{"location":"explanation/technology-stack/#future-technologies","title":"Future Technologies","text":"<ul> <li>Python 3.13+: Future Python version support</li> <li>Container evolution: OCI standards, new runtimes</li> <li>AI advancement: Next-generation AI model integration</li> <li>Cloud native: Kubernetes operators, service mesh integration</li> </ul>"},{"location":"how-to/","title":"How to","text":"<p>Task-oriented guides for specific goals with aider-lint-fixer</p>"},{"location":"how-to/#available-guides","title":"Available Guides","text":"<p>This section contains how-to documentation following the Diataxis framework for aider-lint-fixer, providing practical guidance for common development and deployment tasks.</p> <p>How-To Guides are task-oriented and help users accomplish specific goals: - Solve specific problems with aider-lint-fixer - Assume some knowledge of Python development and linting - Provide step-by-step instructions - Focus on practical results</p>"},{"location":"how-to/#contents","title":"Contents","text":""},{"location":"how-to/#configuration-and-setup","title":"Configuration and Setup","text":"<ul> <li>Configure Linters - Set up and customize linter configurations</li> <li>Setup Development Environment - Local development setup</li> </ul>"},{"location":"how-to/#development-workflow","title":"Development Workflow","text":"<ul> <li>Add a New Feature - Contributing new linters or core functionality</li> <li>Debug Common Issues - Troubleshooting Python and container issues</li> <li>Integrate with Aider - AI-powered code modification integration</li> </ul>"},{"location":"how-to/#deployment-and-operations","title":"Deployment and Operations","text":"<ul> <li>Deploy to Production - Production deployment strategies and CI/CD</li> <li>Deploy Your Application - Container orchestration and cloud platforms</li> <li>Monitor Performance - Performance monitoring and optimization</li> </ul>"},{"location":"how-to/#testing-and-quality","title":"Testing and Quality","text":"<ul> <li>Run Tests - Testing strategies and automation</li> <li>Security Best Practices - Security configuration and credential management</li> </ul>"},{"location":"how-to/#quick-start","title":"Quick Start","text":"<p>New to aider-lint-fixer? Start with these essential guides:</p> <ol> <li>Setup Development Environment - Get your local environment ready</li> <li>Configure Linters - Set up linting for your project</li> <li>Deploy to Production - Deploy your first production instance</li> </ol>"},{"location":"how-to/#need-help","title":"Need Help?","text":"<p>If you can't find what you're looking for: - Check the Reference Documentation for detailed API information - Review Architecture Overview for system understanding - See Troubleshooting Guide for common issues</p>"},{"location":"how-to/configure-linters/","title":"Configure Linters","text":"<p>This guide explains how to configure linters in aider-lint-fixer for optimal code quality and team consistency.</p>"},{"location":"how-to/configure-linters/#configuration-overview","title":"Configuration Overview","text":"<p>aider-lint-fixer supports multiple configuration approaches: - Unified configuration: Single file for all linters - Language-specific configs: Native configuration files - Profile-based settings: Different rules for different environments - Command-line overrides: Runtime configuration changes</p>"},{"location":"how-to/configure-linters/#unified-configuration","title":"Unified Configuration","text":""},{"location":"how-to/configure-linters/#basic-configuration-file","title":"Basic Configuration File","text":"<p>Create <code>.aider-lint.yaml</code> in your project root:</p> <pre><code># .aider-lint.yaml\nlinters:\n  - flake8\n  - pylint\n  - mypy\n  - eslint\n  - ansible-lint\n\nprofiles:\n  development:\n    strict: false\n    auto_fix: true\n    parallel: true\n\n  ci:\n    strict: true\n    fail_fast: true\n    output_format: \"junit\"\n\noutput:\n  format: \"json\"\n  file: \"lint-results.json\"\n</code></pre>"},{"location":"how-to/configure-linters/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code># .aider-lint.yaml\nlinters:\n  python:\n    - name: flake8\n      enabled: true\n      config_file: .flake8\n      args: [\"--max-line-length=88\"]\n    - name: mypy\n      enabled: true\n      strict_mode: true\n      ignore_missing_imports: true\n\n  javascript:\n    - name: eslint\n      enabled: true\n      config_file: .eslintrc.js\n      extensions: [\".js\", \".jsx\", \".ts\", \".tsx\"]\n    - name: prettier\n      enabled: true\n      check_only: true\n\n  ansible:\n    - name: ansible-lint\n      enabled: true\n      profile: \"production\"\n\nprofiles:\n  development:\n    python:\n      strict: false\n      auto_fix: true\n    javascript:\n      auto_fix: true\n    output:\n      format: \"console\"\n\n  ci:\n    python:\n      strict: true\n      mypy:\n        disallow_untyped_defs: true\n    javascript:\n      strict: true\n    output:\n      format: \"junit\"\n      file: \"test-results/lint.xml\"\n\nexclude_patterns:\n  - \"build/\"\n  - \"dist/\"\n  - \"node_modules/\"\n  - \"*.min.js\"\n  - \"__pycache__/\"\n</code></pre>"},{"location":"how-to/configure-linters/#language-specific-configuration","title":"Language-Specific Configuration","text":""},{"location":"how-to/configure-linters/#python-linters","title":"Python Linters","text":""},{"location":"how-to/configure-linters/#flake8-configuration","title":"Flake8 Configuration","text":"<p>Create <code>.flake8</code> or add to <code>pyproject.toml</code>:</p> <pre><code># .flake8\n[flake8]\nmax-line-length = 88\nextend-ignore = E203, W503\nexclude = \n    .git,\n    __pycache__,\n    build,\n    dist,\n    .venv\nper-file-ignores =\n    __init__.py:F401\n    tests/*:S101\n</code></pre> <pre><code># pyproject.toml\n[tool.flake8]\nmax-line-length = 88\nextend-ignore = [\"E203\", \"W503\"]\nexclude = [\".git\", \"__pycache__\", \"build\", \"dist\", \".venv\"]\n</code></pre>"},{"location":"how-to/configure-linters/#pylint-configuration","title":"Pylint Configuration","text":"<p>Create <code>.pylintrc</code> or add to <code>pyproject.toml</code>:</p> <pre><code># .pylintrc\n[MASTER]\nload-plugins = pylint.extensions.docparams\n\n[MESSAGES CONTROL]\ndisable = C0111,R0903,R0913\n\n[FORMAT]\nmax-line-length = 88\n\n[DESIGN]\nmax-args = 7\nmax-locals = 15\n</code></pre> <pre><code># pyproject.toml\n[tool.pylint.messages_control]\ndisable = [\"C0111\", \"R0903\", \"R0913\"]\n\n[tool.pylint.format]\nmax-line-length = 88\n</code></pre>"},{"location":"how-to/configure-linters/#mypy-configuration","title":"MyPy Configuration","text":"<p>Create <code>mypy.ini</code> or add to <code>pyproject.toml</code>:</p> <pre><code># mypy.ini\n[mypy]\npython_version = 3.11\nwarn_return_any = True\nwarn_unused_configs = True\ndisallow_untyped_defs = True\nignore_missing_imports = True\n\n[mypy-tests.*]\nignore_errors = True\n</code></pre> <pre><code># pyproject.toml\n[tool.mypy]\npython_version = \"3.11\"\nwarn_return_any = true\nwarn_unused_configs = true\ndisallow_untyped_defs = true\nignore_missing_imports = true\n\n[[tool.mypy.overrides]]\nmodule = \"tests.*\"\nignore_errors = true\n</code></pre>"},{"location":"how-to/configure-linters/#javascripttypescript-linters","title":"JavaScript/TypeScript Linters","text":""},{"location":"how-to/configure-linters/#eslint-configuration","title":"ESLint Configuration","text":"<p>Create <code>.eslintrc.js</code>:</p> <pre><code>// .eslintrc.js\nmodule.exports = {\n  env: {\n    browser: true,\n    es2021: true,\n    node: true,\n  },\n  extends: [\n    'eslint:recommended',\n    '@typescript-eslint/recommended',\n  ],\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    ecmaVersion: 12,\n    sourceType: 'module',\n  },\n  plugins: [\n    '@typescript-eslint',\n  ],\n  rules: {\n    'indent': ['error', 2],\n    'linebreak-style': ['error', 'unix'],\n    'quotes': ['error', 'single'],\n    'semi': ['error', 'always'],\n  },\n  ignorePatterns: [\n    'dist/',\n    'build/',\n    'node_modules/',\n    '*.min.js',\n  ],\n};\n</code></pre>"},{"location":"how-to/configure-linters/#prettier-configuration","title":"Prettier Configuration","text":"<p>Create <code>.prettierrc.js</code>:</p> <pre><code>// .prettierrc.js\nmodule.exports = {\n  semi: true,\n  trailingComma: 'es5',\n  singleQuote: true,\n  printWidth: 80,\n  tabWidth: 2,\n  useTabs: false,\n};\n</code></pre>"},{"location":"how-to/configure-linters/#ansible-configuration","title":"Ansible Configuration","text":"<p>Create <code>.ansible-lint</code>:</p> <pre><code># .ansible-lint\nprofile: production\n\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n  - .venv/\n\nskip_list:\n  - yaml[line-length]\n  - name[casing]\n\nwarn_list:\n  - experimental\n\nuse_default_rules: true\nparseable: true\n</code></pre>"},{"location":"how-to/configure-linters/#profile-based-configuration","title":"Profile-Based Configuration","text":""},{"location":"how-to/configure-linters/#development-profile","title":"Development Profile","text":"<p>Optimized for developer productivity:</p> <pre><code># Development profile settings\nprofiles:\n  development:\n    strict: false\n    auto_fix: true\n    parallel: true\n    watch_mode: true\n\n    python:\n      flake8:\n        ignore_warnings: true\n      mypy:\n        ignore_missing_imports: true\n\n    javascript:\n      eslint:\n        fix: true\n      prettier:\n        write: true\n\n    output:\n      format: \"console\"\n      show_source: true\n</code></pre>"},{"location":"how-to/configure-linters/#cicd-profile","title":"CI/CD Profile","text":"<p>Optimized for continuous integration:</p> <pre><code># CI profile settings\nprofiles:\n  ci:\n    strict: true\n    fail_fast: true\n    parallel: true\n\n    python:\n      flake8:\n        max_complexity: 10\n      mypy:\n        strict: true\n        disallow_any_generics: true\n\n    javascript:\n      eslint:\n        max_warnings: 0\n\n    output:\n      format: \"junit\"\n      file: \"test-results/lint.xml\"\n      quiet: true\n</code></pre>"},{"location":"how-to/configure-linters/#production-profile","title":"Production Profile","text":"<p>Optimized for deployment readiness:</p> <pre><code># Production profile settings\nprofiles:\n  production:\n    strict: true\n    security_focused: true\n\n    python:\n      bandit:\n        enabled: true\n        confidence: \"high\"\n      safety:\n        enabled: true\n\n    ansible:\n      ansible-lint:\n        profile: \"production\"\n        strict: true\n\n    output:\n      format: \"sarif\"\n      file: \"security-results.sarif\"\n</code></pre>"},{"location":"how-to/configure-linters/#environment-variables","title":"Environment Variables","text":"<p>Configure linters using environment variables:</p> <pre><code># Global settings\nexport AIDER_LINT_CONFIG=./custom-config.yaml\nexport AIDER_LINT_PROFILE=development\nexport AIDER_LINT_CACHE_DIR=~/.cache/aider-lint\n\n# Linter-specific settings\nexport FLAKE8_CONFIG=.flake8\nexport ESLINT_CONFIG=.eslintrc.js\nexport MYPY_CONFIG_FILE=mypy.ini\n\n# Output settings\nexport AIDER_LINT_OUTPUT_FORMAT=json\nexport AIDER_LINT_OUTPUT_FILE=lint-results.json\n</code></pre>"},{"location":"how-to/configure-linters/#command-line-configuration","title":"Command-Line Configuration","text":"<p>Override configuration at runtime:</p> <pre><code># Basic usage with config override\naider-lint-fixer --config custom-config.yaml\n\n# Profile selection\naider-lint-fixer --profile ci\n\n# Linter selection\naider-lint-fixer --linters flake8,eslint,ansible-lint\n\n# Output format override\naider-lint-fixer --output-format junit --output-file results.xml\n\n# Strict mode override\naider-lint-fixer --strict --fail-fast\n\n# Auto-fix mode\naider-lint-fixer --auto-fix --backup\n</code></pre>"},{"location":"how-to/configure-linters/#configuration-discovery","title":"Configuration Discovery","text":"<p>aider-lint-fixer automatically discovers configuration files in this order:</p> <ol> <li>Command-line specified: <code>--config path/to/config.yaml</code></li> <li>Project root: <code>.aider-lint.yaml</code> or <code>.aider-lint.yml</code></li> <li>Home directory: <code>~/.aider-lint.yaml</code></li> <li>Language-specific: <code>.flake8</code>, <code>.eslintrc.js</code>, etc.</li> <li>Default settings: Built-in sensible defaults</li> </ol>"},{"location":"how-to/configure-linters/#integration-examples","title":"Integration Examples","text":""},{"location":"how-to/configure-linters/#pre-commit-hook","title":"Pre-commit Hook","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: aider-lint-fixer\n        name: Aider Lint Fixer\n        entry: aider-lint-fixer --profile ci\n        language: system\n        files: \\.(py|js|ts|yml|yaml)$\n        pass_filenames: false\n</code></pre>"},{"location":"how-to/configure-linters/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/lint.yml\nname: Lint Code\non: [push, pull_request]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Run linting\n        run: |\n          aider-lint-fixer \\\n            --profile ci \\\n            --output-format github-actions \\\n            --fail-fast\n</code></pre>"},{"location":"how-to/configure-linters/#vs-code-settings","title":"VS Code Settings","text":"<pre><code>{\n  \"aider-lint-fixer.configFile\": \".aider-lint.yaml\",\n  \"aider-lint-fixer.profile\": \"development\",\n  \"aider-lint-fixer.autoFix\": true,\n  \"aider-lint-fixer.lintOnSave\": true\n}\n</code></pre>"},{"location":"how-to/configure-linters/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"how-to/configure-linters/#common-issues","title":"Common Issues","text":"<p>Configuration not found: <pre><code># Check configuration discovery\naider-lint-fixer --show-config\n\n# Validate configuration file\naider-lint-fixer --validate-config .aider-lint.yaml\n</code></pre></p> <p>Linter conflicts: <pre><code># Show active linters and their configs\naider-lint-fixer --list-linters --verbose\n\n# Test specific linter configuration\naider-lint-fixer --linters flake8 --dry-run\n</code></pre></p> <p>Performance issues: <pre><code># Enable parallel processing\naider-lint-fixer --parallel --jobs 4\n\n# Use caching\naider-lint-fixer --cache-dir ~/.cache/aider-lint\n</code></pre></p>"},{"location":"how-to/configure-linters/#configuration-validation","title":"Configuration Validation","text":"<pre><code># Validate configuration syntax\naider-lint-fixer --validate-config\n\n# Test configuration with dry run\naider-lint-fixer --dry-run --verbose\n\n# Show effective configuration\naider-lint-fixer --show-effective-config\n</code></pre>"},{"location":"how-to/configure-linters/#best-practices","title":"Best Practices","text":""},{"location":"how-to/configure-linters/#team-configuration","title":"Team Configuration","text":"<ul> <li>Use unified configuration for consistency</li> <li>Define clear profiles for different environments</li> <li>Document configuration decisions in comments</li> <li>Version control all configuration files</li> </ul>"},{"location":"how-to/configure-linters/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Enable parallel processing for large codebases</li> <li>Use appropriate cache directories</li> <li>Configure exclude patterns for build artifacts</li> <li>Consider file-specific rules for performance</li> </ul>"},{"location":"how-to/configure-linters/#maintenance","title":"Maintenance","text":"<ul> <li>Regularly update linter versions</li> <li>Review and update rules based on team feedback</li> <li>Monitor configuration effectiveness</li> <li>Keep configuration files synchronized across environments</li> </ul>"},{"location":"how-to/configure-linters/#related-documentation","title":"Related Documentation","text":"<ul> <li>Red Hat Developer Guide</li> <li>macOS/Ubuntu Developer Guide</li> <li>Container Deployment Tutorial</li> <li>ADR 0004: Hybrid Python-JavaScript Architecture</li> </ul>"},{"location":"how-to/deploy-to-production/","title":"Deploy To Production","text":"<p>This guide covers production deployment strategies for aider-lint-fixer across different environments, including containerized deployments and CI/CD integration.</p>"},{"location":"how-to/deploy-to-production/#prerequisites","title":"Prerequisites","text":"<ul> <li>Container Runtime: Docker (macOS/Ubuntu) or Podman (RHEL)</li> <li>Python 3.11+: For local installations</li> <li>Node.js 16+: For JavaScript linter support</li> <li>Production Environment: Target deployment platform configured</li> <li>Credentials: Container registry access and RHEL subscriptions (if applicable)</li> </ul>"},{"location":"how-to/deploy-to-production/#deployment-strategies","title":"Deployment Strategies","text":""},{"location":"how-to/deploy-to-production/#container-based-deployment-recommended","title":"Container-Based Deployment (Recommended)","text":""},{"location":"how-to/deploy-to-production/#default-container-macosubuntu","title":"Default Container (macOS/Ubuntu)","text":"<p>1. Build Production Container <pre><code># Clone and build\ngit clone &lt;repository-url&gt;\ncd aider-lint-fixer\ndocker build -t aider-lint-fixer:latest .\n</code></pre></p> <p>2. Deploy to Container Registry <pre><code># Tag for registry\ndocker tag aider-lint-fixer:latest your-registry/aider-lint-fixer:v1.0.0\n\n# Push to registry\ndocker push your-registry/aider-lint-fixer:v1.0.0\n</code></pre></p> <p>3. Deploy to Production <pre><code># Pull and run in production\ndocker pull your-registry/aider-lint-fixer:v1.0.0\ndocker run -d --name aider-lint-fixer \\\n  -v /path/to/projects:/workspace:ro \\\n  -e AIDER_LINT_CONFIG=/workspace/.aider-lint.yaml \\\n  your-registry/aider-lint-fixer:v1.0.0\n</code></pre></p>"},{"location":"how-to/deploy-to-production/#rhel-enterprise-deployment","title":"RHEL Enterprise Deployment","text":"<p>1. Build RHEL Container <pre><code># RHEL 9 production build\n./scripts/containers/build-rhel9.sh --production \\\n  --registry your-registry.redhat.com \\\n  --tag aider-lint-fixer-rhel9:v1.0.0\n\n# RHEL 10 production build  \n./scripts/containers/build-rhel10.sh --production \\\n  --registry your-registry.redhat.com \\\n  --tag aider-lint-fixer-rhel10:v1.0.0\n</code></pre></p> <p>2. Deploy with Podman (RHEL) <pre><code># Pull and run with Podman\npodman pull your-registry.redhat.com/aider-lint-fixer-rhel9:v1.0.0\npodman run -d --name aider-lint-fixer \\\n  -v /path/to/projects:/workspace:ro,Z \\\n  -e AIDER_LINT_CONFIG=/workspace/.aider-lint.yaml \\\n  your-registry.redhat.com/aider-lint-fixer-rhel9:v1.0.0\n</code></pre></p>"},{"location":"how-to/deploy-to-production/#direct-installation-deployment","title":"Direct Installation Deployment","text":"<p>1. Prepare Production Environment <pre><code># Create production user\nsudo useradd -m -s /bin/bash aider-lint-fixer\nsudo su - aider-lint-fixer\n\n# Install Python dependencies\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre></p> <p>2. Install Node.js Dependencies <pre><code># Install Node.js linters\nnpm install -g eslint@^8.0.0 prettier@^3.0.0 jshint@^2.13.0\n</code></pre></p> <p>3. Configure Production Settings <pre><code># Create production config\ncat &gt; /home/aider-lint-fixer/.aider-lint.yaml &lt;&lt; EOF\nprofile: production\nlinters:\n  python:\n    - flake8\n    - pylint\n    - mypy\n  javascript:\n    - eslint\n    - prettier\nlogging:\n  level: INFO\n  format: json\nEOF\n</code></pre></p>"},{"location":"how-to/deploy-to-production/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"how-to/deploy-to-production/#github-actions-deployment","title":"GitHub Actions Deployment","text":"<p>Create <code>.github/workflows/deploy.yml</code>: <pre><code>name: Deploy to Production\non:\n  push:\n    tags: ['v*']\n\njobs:\n  deploy-default:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Build container\n        run: docker build -t aider-lint-fixer:${{ github.ref_name }} .\n      - name: Push to registry\n        run: |\n          echo ${{ secrets.REGISTRY_PASSWORD }} | docker login -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin\n          docker push aider-lint-fixer:${{ github.ref_name }}\n\n  deploy-rhel:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Build RHEL containers\n        env:\n          RHEL_USERNAME: ${{ secrets.RHEL_USERNAME }}\n          RHEL_PASSWORD: ${{ secrets.RHEL_PASSWORD }}\n        run: |\n          ./scripts/containers/build-rhel9.sh --tag aider-lint-fixer-rhel9:${{ github.ref_name }}\n          ./scripts/containers/build-rhel10.sh --tag aider-lint-fixer-rhel10:${{ github.ref_name }}\n</code></pre></p>"},{"location":"how-to/deploy-to-production/#gitlab-ci-deployment","title":"GitLab CI Deployment","text":"<p>Create <code>.gitlab-ci.yml</code>: <pre><code>stages:\n  - build\n  - deploy\n\nbuild-containers:\n  stage: build\n  script:\n    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .\n    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG\n  only:\n    - tags\n\ndeploy-production:\n  stage: deploy\n  script:\n    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG\n    - docker stop aider-lint-fixer || true\n    - docker rm aider-lint-fixer || true\n    - docker run -d --name aider-lint-fixer $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG\n  environment:\n    name: production\n  only:\n    - tags\n</code></pre></p>"},{"location":"how-to/deploy-to-production/#jenkins-pipeline","title":"Jenkins Pipeline","text":"<p>Create <code>Jenkinsfile</code>: <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                script {\n                    def image = docker.build(\"aider-lint-fixer:${env.BUILD_NUMBER}\")\n                }\n            }\n        }\n\n        stage('Test') {\n            steps {\n                sh 'python -m pytest tests/'\n            }\n        }\n\n        stage('Deploy') {\n            when {\n                branch 'main'\n            }\n            steps {\n                script {\n                    docker.withRegistry('https://your-registry.com', 'registry-credentials') {\n                        def image = docker.image(\"aider-lint-fixer:${env.BUILD_NUMBER}\")\n                        image.push()\n                        image.push('latest')\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre></p>"},{"location":"how-to/deploy-to-production/#production-configuration","title":"Production Configuration","text":""},{"location":"how-to/deploy-to-production/#environment-variables","title":"Environment Variables","text":"<pre><code># Core configuration\nexport AIDER_LINT_CONFIG=/etc/aider-lint/config.yaml\nexport AIDER_LINT_PROFILE=production\nexport AIDER_LINT_LOG_LEVEL=INFO\n\n# AI integration\nexport OPENAI_API_KEY=your-api-key\nexport AIDER_CHAT_MODEL=gpt-4\n\n# Container-specific\nexport AIDER_LINT_WORKSPACE=/workspace\nexport AIDER_LINT_OUTPUT_FORMAT=json\n</code></pre>"},{"location":"how-to/deploy-to-production/#production-configuration-file","title":"Production Configuration File","text":"<pre><code># /etc/aider-lint/config.yaml\nprofile: production\nconcurrency: 4\ntimeout: 300\n\nlinters:\n  python:\n    - flake8\n    - pylint\n    - mypy\n    - bandit\n  javascript:\n    - eslint\n    - prettier\n  infrastructure:\n    - ansible-lint\n\noutput:\n  format: json\n  file: /var/log/aider-lint/results.json\n\nlogging:\n  level: INFO\n  format: json\n  file: /var/log/aider-lint/application.log\n\nai:\n  enabled: true\n  model: gpt-4\n  max_tokens: 2000\n  cache_enabled: true\n</code></pre>"},{"location":"how-to/deploy-to-production/#verification-and-health-checks","title":"Verification and Health Checks","text":""},{"location":"how-to/deploy-to-production/#container-health-check","title":"Container Health Check","text":"<pre><code># Check container status\ndocker ps | grep aider-lint-fixer\n\n# Check container logs\ndocker logs aider-lint-fixer --tail 50\n\n# Run health check\ndocker exec aider-lint-fixer python -c \"\nimport aider_lint_fixer\nprint('Health check passed')\n\"\n</code></pre>"},{"location":"how-to/deploy-to-production/#functional-testing","title":"Functional Testing","text":"<pre><code># Test linting functionality\ndocker exec aider-lint-fixer aider-lint-fixer \\\n  --file /workspace/test_file.py \\\n  --linters flake8,pylint \\\n  --output json\n\n# Test AI integration\ndocker exec aider-lint-fixer aider-lint-fixer \\\n  --file /workspace/test_file.py \\\n  --fix \\\n  --ai-enabled\n</code></pre>"},{"location":"how-to/deploy-to-production/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Monitor resource usage\ndocker stats aider-lint-fixer\n\n# Check processing metrics\ncurl -s http://localhost:8080/metrics | grep aider_lint\n</code></pre>"},{"location":"how-to/deploy-to-production/#troubleshooting","title":"Troubleshooting","text":""},{"location":"how-to/deploy-to-production/#container-issues","title":"Container Issues","text":"<p>Container won't start: <pre><code># Check container logs\ndocker logs aider-lint-fixer\n\n# Inspect container configuration\ndocker inspect aider-lint-fixer\n\n# Run interactively for debugging\ndocker run -it --entrypoint /bin/bash aider-lint-fixer:latest\n</code></pre></p> <p>Permission issues (RHEL/SELinux): <pre><code># Fix SELinux volume labels\npodman run -v /path/to/projects:/workspace:ro,Z aider-lint-fixer\n\n# Check SELinux context\nls -Z /path/to/projects\n</code></pre></p>"},{"location":"how-to/deploy-to-production/#rhel-subscription-issues","title":"RHEL Subscription Issues","text":"<p>Subscription not found: <pre><code># Check subscription status\nsubscription-manager status\n\n# Register system\nsubscription-manager register --username your-username\n\n# Attach subscription\nsubscription-manager attach --auto\n</code></pre></p>"},{"location":"how-to/deploy-to-production/#performance-issues","title":"Performance Issues","text":"<p>Slow linting performance: <pre><code># Increase concurrency\nexport AIDER_LINT_CONCURRENCY=8\n\n# Use faster linters only\nexport AIDER_LINT_LINTERS=flake8,eslint\n\n# Enable caching\nexport AIDER_LINT_CACHE_ENABLED=true\n</code></pre></p>"},{"location":"how-to/deploy-to-production/#security-considerations","title":"Security Considerations","text":""},{"location":"how-to/deploy-to-production/#container-security","title":"Container Security","text":"<ul> <li>Non-root execution: Containers run as UID 1001</li> <li>Read-only volumes: Mount project code read-only</li> <li>Network isolation: Use custom networks for container communication</li> <li>Secret management: Use environment variables or secret management systems</li> </ul>"},{"location":"how-to/deploy-to-production/#credential-management","title":"Credential Management","text":"<pre><code># Use Docker secrets (Swarm mode)\necho \"your-api-key\" | docker secret create openai-api-key -\n\n# Use Kubernetes secrets\nkubectl create secret generic aider-lint-secrets \\\n  --from-literal=openai-api-key=your-api-key\n</code></pre>"},{"location":"how-to/deploy-to-production/#related-guides","title":"Related Guides","text":"<ul> <li>Configure Linters - Linter configuration options</li> <li>RHEL Container Builds - RHEL-specific deployment</li> <li>Red Hat Developer Guide - RHEL development workflows</li> <li>Container Architecture - Container strategy overview</li> </ul>"},{"location":"how-to/how-to-add-a-new-feature/","title":"How to Add a New Feature","text":"<p>This guide walks you through the process of adding a new feature to aider-lint-fixer, including new linters, AI integrations, or core functionality.</p>"},{"location":"how-to/how-to-add-a-new-feature/#step-1-plan-your-feature","title":"Step 1: Plan Your Feature","text":"<p>Before writing code: 1. Define Requirements: Document what the feature should accomplish 2. Check ADRs: Review existing Architectural Decision Records for guidance 3. Impact Analysis: Consider effects on existing linters and AI integration 4. Implementation Strategy: Choose between plugin extension or core modification</p>"},{"location":"how-to/how-to-add-a-new-feature/#step-2-set-up-development-environment","title":"Step 2: Set Up Development Environment","text":"<pre><code># Create feature branch\ngit checkout -b feature/your-feature-name\n\n# Set up Python virtual environment\npython3 -m venv venv\nsource venv/bin/activate\n\n# Install development dependencies\npip install -r requirements-test.txt\npip install -e .\n\n# Install pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"how-to/how-to-add-a-new-feature/#step-3-implementation-patterns","title":"Step 3: Implementation Patterns","text":""},{"location":"how-to/how-to-add-a-new-feature/#adding-a-new-linter","title":"Adding a New Linter","text":"<p>1. Create Linter Class <pre><code># aider_lint_fixer/linters/your_linter.py\nfrom .base import BaseLinter\nfrom typing import Dict, List, Any\n\nclass YourLinter(BaseLinter):\n    def __init__(self):\n        super().__init__()\n        self.name = \"your-linter\"\n        self.supported_extensions = [\".py\", \".js\"]\n\n    def run_linter(self, file_path: str) -&gt; Dict[str, Any]:\n        # Implement linter execution\n        pass\n\n    def parse_output(self, output: str) -&gt; List[Dict[str, Any]]:\n        # Parse linter output into standard format\n        pass\n</code></pre></p> <p>2. Register Linter <pre><code># aider_lint_fixer/linters/__init__.py\nfrom .your_linter import YourLinter\n\nAVAILABLE_LINTERS = {\n    \"your-linter\": YourLinter,\n    # ... existing linters\n}\n</code></pre></p>"},{"location":"how-to/how-to-add-a-new-feature/#adding-core-functionality","title":"Adding Core Functionality","text":"<p>1. Follow Plugin Architecture <pre><code># aider_lint_fixer/core/your_feature.py\nclass YourFeature:\n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n\n    def process(self, data: Any) -&gt; Any:\n        # Implement feature logic\n        pass\n</code></pre></p> <p>2. Add Configuration Support <pre><code># Add to default config schema\nyour_feature:\n  enabled: true\n  option1: value1\n  option2: value2\n</code></pre></p>"},{"location":"how-to/how-to-add-a-new-feature/#step-4-write-comprehensive-tests","title":"Step 4: Write Comprehensive Tests","text":""},{"location":"how-to/how-to-add-a-new-feature/#unit-tests","title":"Unit Tests","text":"<pre><code># tests/test_your_feature.py\nimport pytest\nfrom aider_lint_fixer.linters.your_linter import YourLinter\n\nclass TestYourLinter:\n    def test_initialization(self):\n        linter = YourLinter()\n        assert linter.name == \"your-linter\"\n\n    def test_run_linter(self):\n        linter = YourLinter()\n        result = linter.run_linter(\"test_file.py\")\n        assert isinstance(result, dict)\n\n    def test_parse_output(self):\n        linter = YourLinter()\n        output = \"sample linter output\"\n        parsed = linter.parse_output(output)\n        assert isinstance(parsed, list)\n</code></pre>"},{"location":"how-to/how-to-add-a-new-feature/#integration-tests","title":"Integration Tests","text":"<pre><code># tests/integration/test_your_feature_integration.py\nimport pytest\nfrom aider_lint_fixer.main import AiderLintFixer\n\nclass TestYourFeatureIntegration:\n    def test_feature_with_existing_linters(self):\n        # Test feature interaction with existing components\n        pass\n\n    def test_ai_integration(self):\n        # Test AI integration if applicable\n        pass\n</code></pre>"},{"location":"how-to/how-to-add-a-new-feature/#container-tests","title":"Container Tests","text":"<pre><code># Test in container environment\ndocker build -t aider-lint-fixer-test .\ndocker run --rm -v $(pwd):/workspace:ro aider-lint-fixer-test \\\n  python -m pytest tests/test_your_feature.py\n</code></pre>"},{"location":"how-to/how-to-add-a-new-feature/#step-5-update-documentation","title":"Step 5: Update Documentation","text":""},{"location":"how-to/how-to-add-a-new-feature/#code-documentation","title":"Code Documentation","text":"<pre><code>def your_function(param1: str, param2: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Brief description of function.\n\n    Args:\n        param1: Description of parameter\n        param2: Description of parameter\n\n    Returns:\n        Dict containing result data\n\n    Raises:\n        ValueError: When invalid parameters provided\n    \"\"\"\n</code></pre>"},{"location":"how-to/how-to-add-a-new-feature/#user-documentation","title":"User Documentation","text":"<ul> <li>How-to Guide: Create specific usage instructions</li> <li>Configuration: Document new config options</li> <li>Examples: Provide practical usage examples</li> </ul>"},{"location":"how-to/how-to-add-a-new-feature/#update-existing-docs","title":"Update Existing Docs","text":"<pre><code># Update configure-linters.md if adding linter\n# Update architecture docs if changing core functionality\n# Add ADR if making architectural decisions\n</code></pre>"},{"location":"how-to/how-to-add-a-new-feature/#step-6-testing-and-validation","title":"Step 6: Testing and Validation","text":""},{"location":"how-to/how-to-add-a-new-feature/#local-testing","title":"Local Testing","text":"<pre><code># Run full test suite\npython -m pytest tests/ -v\n\n# Test specific feature\npython -m pytest tests/test_your_feature.py -v\n\n# Run linting on your code\nflake8 aider_lint_fixer/\npylint aider_lint_fixer/\nmypy aider_lint_fixer/\n\n# Test container builds\ndocker build -t aider-lint-fixer-dev .\n</code></pre>"},{"location":"how-to/how-to-add-a-new-feature/#multi-environment-testing","title":"Multi-Environment Testing","text":"<pre><code># Test RHEL containers (if applicable)\n./scripts/containers/build-rhel9.sh --test\n./scripts/containers/build-rhel10.sh --test\n\n# Test with different Python versions\ntox -e py39,py311,py312\n</code></pre>"},{"location":"how-to/how-to-add-a-new-feature/#step-7-submit-for-review","title":"Step 7: Submit for Review","text":""},{"location":"how-to/how-to-add-a-new-feature/#pre-submission-checklist","title":"Pre-submission Checklist","text":"<ul> <li>[ ] All tests passing</li> <li>[ ] Code follows project style (black, flake8, pylint)</li> <li>[ ] Documentation updated</li> <li>[ ] Container builds successful</li> <li>[ ] No breaking changes (or properly documented)</li> <li>[ ] Performance impact assessed</li> </ul>"},{"location":"how-to/how-to-add-a-new-feature/#create-pull-request","title":"Create Pull Request","text":"<pre><code># Push feature branch\ngit push origin feature/your-feature-name\n\n# Create PR with template\n# Include:\n# - Feature description\n# - Testing performed\n# - Documentation updates\n# - Breaking changes (if any)\n</code></pre>"},{"location":"how-to/how-to-add-a-new-feature/#address-review-feedback","title":"Address Review Feedback","text":"<pre><code># Make requested changes\ngit add .\ngit commit -m \"Address review feedback: specific changes\"\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"how-to/how-to-add-a-new-feature/#best-practices","title":"Best Practices","text":""},{"location":"how-to/how-to-add-a-new-feature/#code-quality","title":"Code Quality","text":"<ul> <li>Follow PEP 8: Use black and flake8 for formatting</li> <li>Type Hints: Add comprehensive type annotations</li> <li>Error Handling: Include appropriate exception handling</li> <li>Logging: Add structured logging for debugging</li> </ul>"},{"location":"how-to/how-to-add-a-new-feature/#architecture-alignment","title":"Architecture Alignment","text":"<ul> <li>Plugin Pattern: Extend existing plugin architecture</li> <li>Configuration: Use existing config management patterns</li> <li>AI Integration: Follow established aider.chat integration patterns</li> <li>Container Support: Ensure feature works in all container environments</li> </ul>"},{"location":"how-to/how-to-add-a-new-feature/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Async Operations: Use asyncio for I/O operations</li> <li>Caching: Implement caching for expensive operations</li> <li>Resource Limits: Respect concurrency and memory limits</li> <li>Profiling: Profile performance impact</li> </ul>"},{"location":"how-to/how-to-add-a-new-feature/#security","title":"Security","text":"<ul> <li>Input Validation: Validate all external inputs</li> <li>Credential Handling: Follow secure credential patterns</li> <li>Container Security: Maintain non-root execution</li> <li>Dependency Security: Check for vulnerable dependencies</li> </ul>"},{"location":"how-to/how-to-add-a-new-feature/#feature-specific-guidelines","title":"Feature-Specific Guidelines","text":""},{"location":"how-to/how-to-add-a-new-feature/#adding-python-linters","title":"Adding Python Linters","text":"<ul> <li>Inherit from <code>BaseLinter</code></li> <li>Support standard configuration files</li> <li>Provide fix success rate estimates</li> <li>Handle version compatibility</li> </ul>"},{"location":"how-to/how-to-add-a-new-feature/#adding-javascript-linters","title":"Adding JavaScript Linters","text":"<ul> <li>Ensure Node.js runtime coordination</li> <li>Support TypeScript if applicable</li> <li>Handle npm dependency management</li> <li>Test cross-platform compatibility</li> </ul>"},{"location":"how-to/how-to-add-a-new-feature/#adding-ai-features","title":"Adding AI Features","text":"<ul> <li>Integrate through aider.chat wrapper</li> <li>Implement caching for performance</li> <li>Handle API rate limits</li> <li>Provide fallback behavior</li> </ul>"},{"location":"how-to/how-to-add-a-new-feature/#adding-container-features","title":"Adding Container Features","text":"<ul> <li>Support both Docker and Podman</li> <li>Test on all base images (default, RHEL 9, RHEL 10)</li> <li>Handle SELinux contexts</li> <li>Maintain security best practices</li> </ul>"},{"location":"how-to/how-to-add-a-new-feature/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview - Understanding the system</li> <li>Design Decisions - Architectural rationale</li> <li>Configure Linters - Configuration patterns</li> <li>ADR Template - For architectural decisions</li> </ul>"},{"location":"how-to/how-to-debug-common-issues/","title":"How to Debug Common Issues","text":"<p>This guide helps you troubleshoot and debug common issues in aider-lint-fixer, covering Python debugging, linter problems, container issues, and AI integration failures.</p>"},{"location":"how-to/how-to-debug-common-issues/#debugging-tools","title":"Debugging Tools","text":""},{"location":"how-to/how-to-debug-common-issues/#python-debugging","title":"Python Debugging","text":"<p>1. Built-in Python Debugger (pdb) <pre><code># Add breakpoint in code\nimport pdb; pdb.set_trace()\n\n# Run with debugger\npython -m pdb aider_lint_fixer/__main__.py --file test.py\n</code></pre></p> <p>2. VS Code Python Debugging <pre><code>// .vscode/launch.json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug aider-lint-fixer\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"module\": \"aider_lint_fixer\",\n            \"args\": [\"--file\", \"test.py\", \"--linters\", \"flake8,pylint\"],\n            \"console\": \"integratedTerminal\"\n        }\n    ]\n}\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#logging-and-diagnostics","title":"Logging and Diagnostics","text":"<p>Enable Verbose Logging <pre><code># Environment variable\nexport AIDER_LINT_LOG_LEVEL=DEBUG\n\n# Command line\naider-lint-fixer --log-level DEBUG --file test.py\n\n# Python logging\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre></p> <p>Structured Logging Output <pre><code># JSON format for analysis\naider-lint-fixer --log-format json --file test.py &gt; debug.log\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"how-to/how-to-debug-common-issues/#issue-linter-not-found","title":"Issue: Linter Not Found","text":"<p>Symptoms: \"Linter 'flake8' not found\" or similar errors</p> <p>Solutions: <pre><code># Check Python linters\npip list | grep -E \"(flake8|pylint|mypy)\"\n\n# Install missing linters\npip install flake8 pylint mypy\n\n# Check Node.js linters\nnpm list -g | grep -E \"(eslint|prettier|jshint)\"\n\n# Install missing Node.js linters\nnpm install -g eslint prettier jshint\n\n# Verify PATH\nwhich flake8\nwhich eslint\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#issue-configuration-not-found","title":"Issue: Configuration Not Found","text":"<p>Symptoms: \"Configuration file not found\" or default settings used</p> <p>Solutions: <pre><code># Check config file locations\nls -la .aider-lint.yaml\nls -la ~/.aider-lint.yaml\nls -la /etc/aider-lint/config.yaml\n\n# Validate config syntax\npython -c \"import yaml; yaml.safe_load(open('.aider-lint.yaml'))\"\n\n# Use explicit config path\naider-lint-fixer --config /path/to/config.yaml --file test.py\n\n# Debug config loading\naider-lint-fixer --log-level DEBUG --file test.py 2&gt;&amp;1 | grep -i config\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#issue-permission-errors","title":"Issue: Permission Errors","text":"<p>Symptoms: \"Permission denied\" when accessing files or running linters</p> <p>Solutions: <pre><code># Check file permissions\nls -la target_file.py\n\n# Fix file permissions\nchmod 644 target_file.py\n\n# Check directory permissions\nls -ld /path/to/project\n\n# Container permission issues (SELinux)\n# For RHEL/CentOS with SELinux\nls -Z /path/to/project\npodman run -v /path/to/project:/workspace:ro,Z aider-lint-fixer\n\n# Docker permission mapping\ndocker run -v /path/to/project:/workspace:ro \\\n  --user $(id -u):$(id -g) aider-lint-fixer\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#issue-ai-integration-failures","title":"Issue: AI Integration Failures","text":"<p>Symptoms: \"AI integration failed\" or timeout errors</p> <p>Solutions: <pre><code># Check API key\necho $OPENAI_API_KEY\n\n# Test aider.chat directly\naider --help\n\n# Check network connectivity\ncurl -I https://api.openai.com/v1/models\n\n# Debug AI integration\naider-lint-fixer --log-level DEBUG --ai-enabled --file test.py\n\n# Use fallback without AI\naider-lint-fixer --no-ai --file test.py\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#issue-container-runtime-problems","title":"Issue: Container Runtime Problems","text":"<p>Symptoms: Container fails to start or crashes</p> <p>Solutions: <pre><code># Check container logs\ndocker logs aider-lint-fixer-container\n\n# Run interactively for debugging\ndocker run -it --entrypoint /bin/bash aider-lint-fixer:latest\n\n# Check container resource usage\ndocker stats aider-lint-fixer-container\n\n# Verify container image\ndocker inspect aider-lint-fixer:latest\n\n# Test with minimal command\ndocker run --rm aider-lint-fixer:latest --version\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#performance-debugging","title":"Performance Debugging","text":""},{"location":"how-to/how-to-debug-common-issues/#slow-linting-performance","title":"Slow Linting Performance","text":"<p>Identify Bottlenecks <pre><code># Profile linter execution\ntime aider-lint-fixer --file large_file.py --linters flake8\n\n# Test individual linters\ntime flake8 large_file.py\ntime pylint large_file.py\ntime mypy large_file.py\n\n# Check concurrent execution\naider-lint-fixer --concurrency 1 --file large_file.py\naider-lint-fixer --concurrency 4 --file large_file.py\n</code></pre></p> <p>Optimize Performance <pre><code># Use faster linters only\naider-lint-fixer --linters flake8 --file large_file.py\n\n# Enable caching\nexport AIDER_LINT_CACHE_ENABLED=true\n\n# Increase timeout for large files\naider-lint-fixer --timeout 600 --file large_file.py\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#memory-issues","title":"Memory Issues","text":"<p>Monitor Memory Usage <pre><code># Python memory profiling\npip install memory-profiler\npython -m memory_profiler aider_lint_fixer/__main__.py\n\n# Container memory monitoring\ndocker stats --no-stream aider-lint-fixer-container\n\n# Check for memory leaks\nvalgrind --tool=memcheck python -m aider_lint_fixer --file test.py\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#environment-specific-debugging","title":"Environment-Specific Debugging","text":""},{"location":"how-to/how-to-debug-common-issues/#rhelcentos-issues","title":"RHEL/CentOS Issues","text":"<p>SELinux Problems <pre><code># Check SELinux status\ngetenforce\n\n# View SELinux denials\nausearch -m AVC -ts recent\n\n# Temporarily disable SELinux (not recommended for production)\nsetenforce 0\n\n# Fix SELinux contexts\nrestorecon -R /path/to/project\n</code></pre></p> <p>Subscription Manager Issues <pre><code># Check subscription status\nsubscription-manager status\n\n# View available repositories\nsubscription-manager repos --list\n\n# Enable required repositories\nsubscription-manager repos --enable rhel-9-for-x86_64-appstream-rpms\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#macos-issues","title":"macOS Issues","text":"<p>Homebrew Path Problems <pre><code># Check Homebrew installation\nbrew doctor\n\n# Fix PATH issues\necho 'export PATH=\"/opt/homebrew/bin:$PATH\"' &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n\n# Reinstall Python tools\nbrew reinstall python@3.11\npip3 install --upgrade aider-lint-fixer\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#ubuntu-issues","title":"Ubuntu Issues","text":"<p>Package Manager Conflicts <pre><code># Check for conflicting packages\napt list --installed | grep -E \"(python|node)\"\n\n# Clean package cache\nsudo apt clean\nsudo apt autoremove\n\n# Reinstall Python\nsudo apt update\nsudo apt install python3.11 python3.11-pip\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#advanced-debugging-techniques","title":"Advanced Debugging Techniques","text":""},{"location":"how-to/how-to-debug-common-issues/#network-debugging","title":"Network Debugging","text":"<p>API Connectivity Issues <pre><code># Test network connectivity\nping api.openai.com\ncurl -v https://api.openai.com/v1/models\n\n# Check proxy settings\necho $HTTP_PROXY\necho $HTTPS_PROXY\n\n# Test with different DNS\nnslookup api.openai.com 8.8.8.8\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#container-network-debugging","title":"Container Network Debugging","text":"<pre><code># Check container networking\ndocker network ls\ndocker network inspect bridge\n\n# Test container connectivity\ndocker run --rm --network host aider-lint-fixer:latest --version\n\n# Debug DNS resolution in container\ndocker run --rm -it aider-lint-fixer:latest nslookup api.openai.com\n</code></pre>"},{"location":"how-to/how-to-debug-common-issues/#file-system-debugging","title":"File System Debugging","text":"<p>Permission and Access Issues <pre><code># Check file system permissions\nnamei -l /path/to/file\n\n# Test file access\npython -c \"open('/path/to/file', 'r').read()\"\n\n# Check disk space\ndf -h /path/to/project\n\n# Monitor file access\nstrace -e trace=file python -m aider_lint_fixer --file test.py\n</code></pre></p>"},{"location":"how-to/how-to-debug-common-issues/#collecting-debug-information","title":"Collecting Debug Information","text":""},{"location":"how-to/how-to-debug-common-issues/#system-information","title":"System Information","text":"<pre><code># Create debug report\ncat &gt; debug_report.txt &lt;&lt; EOF\n=== System Information ===\nOS: $(uname -a)\nPython: $(python --version)\nNode.js: $(node --version)\nDocker: $(docker --version)\nPodman: $(podman --version)\n\n=== Package Versions ===\n$(pip list | grep -E \"(aider|flake8|pylint|mypy)\")\n$(npm list -g | grep -E \"(eslint|prettier|jshint)\")\n\n=== Configuration ===\n$(cat .aider-lint.yaml)\n\n=== Environment Variables ===\n$(env | grep -E \"(AIDER|OPENAI|PATH)\")\n\n=== Recent Logs ===\n$(tail -50 /var/log/aider-lint/application.log)\nEOF\n</code></pre>"},{"location":"how-to/how-to-debug-common-issues/#container-debug-information","title":"Container Debug Information","text":"<pre><code># Container inspection\ndocker inspect aider-lint-fixer:latest &gt; container_debug.json\n\n# Container logs\ndocker logs aider-lint-fixer-container &gt; container_logs.txt\n\n# Container resource usage\ndocker stats --no-stream &gt; container_stats.txt\n</code></pre>"},{"location":"how-to/how-to-debug-common-issues/#getting-help","title":"Getting Help","text":""},{"location":"how-to/how-to-debug-common-issues/#self-service-resources","title":"Self-Service Resources","text":"<ol> <li>Check FAQ: Reference FAQ</li> <li>Review ADRs: Architectural Decisions</li> <li>Configuration Guide: Configure Linters</li> </ol>"},{"location":"how-to/how-to-debug-common-issues/#community-support","title":"Community Support","text":"<pre><code># Search existing issues\n# GitHub: https://github.com/your-org/aider-lint-fixer/issues\n\n# Create bug report with debug information\n# Include:\n# - System information\n# - Configuration files\n# - Error messages and logs\n# - Steps to reproduce\n</code></pre>"},{"location":"how-to/how-to-debug-common-issues/#enterprise-support","title":"Enterprise Support","text":"<p>For RHEL enterprise customers: - Red Hat Support Portal - OpenShift documentation - Enterprise container registry support</p>"},{"location":"how-to/how-to-debug-common-issues/#prevention-best-practices","title":"Prevention Best Practices","text":""},{"location":"how-to/how-to-debug-common-issues/#regular-maintenance","title":"Regular Maintenance","text":"<pre><code># Update dependencies regularly\npip list --outdated\nnpm outdated -g\n\n# Clean up old containers\ndocker system prune\n\n# Monitor disk space\ndf -h\n</code></pre>"},{"location":"how-to/how-to-debug-common-issues/#configuration-validation","title":"Configuration Validation","text":"<pre><code># Validate configuration on changes\naider-lint-fixer --validate-config\n\n# Test configuration in development\naider-lint-fixer --config test-config.yaml --dry-run\n</code></pre>"},{"location":"how-to/how-to-debug-common-issues/#monitoring-and-alerting","title":"Monitoring and Alerting","text":"<pre><code># Set up log monitoring\ntail -f /var/log/aider-lint/application.log | grep ERROR\n\n# Container health checks\ndocker healthcheck --interval=30s --timeout=3s \\\n  CMD aider-lint-fixer --health-check\n</code></pre>"},{"location":"how-to/how-to-deploy-your-application/","title":"How to Deploy Aider-Lint-Fixer","text":"<p>This guide covers deployment patterns for aider-lint-fixer CLI tool in various environments, including CI/CD pipelines, development teams, and containerized execution environments.</p>"},{"location":"how-to/how-to-deploy-your-application/#deployment-scenarios","title":"Deployment Scenarios","text":"<p>Aider-lint-fixer is a CLI tool with several deployment patterns depending on your use case:</p>"},{"location":"how-to/how-to-deploy-your-application/#1-cicd-pipeline-integration-most-common","title":"1. CI/CD Pipeline Integration (Most Common)","text":"<p>Run aider-lint-fixer as part of your automated testing and code quality pipeline.</p>"},{"location":"how-to/how-to-deploy-your-application/#2-developer-workstation-setup","title":"2. Developer Workstation Setup","text":"<p>Install aider-lint-fixer on development machines for local linting and fixing.</p>"},{"location":"how-to/how-to-deploy-your-application/#3-containerized-execution","title":"3. Containerized Execution","text":"<p>Use containers for consistent execution across different environments.</p>"},{"location":"how-to/how-to-deploy-your-application/#4-batch-processing-jobs","title":"4. Batch Processing Jobs","text":"<p>Run aider-lint-fixer on large codebases or scheduled maintenance tasks.</p>"},{"location":"how-to/how-to-deploy-your-application/#pre-deployment-checklist","title":"Pre-Deployment Checklist","text":"<ul> <li>[ ] Container images built and tested (if using containers)</li> <li>[ ] Configuration files validated</li> <li>[ ] Environment variables configured</li> <li>[ ] API keys and credentials properly managed</li> <li>[ ] Target codebase access configured</li> <li>[ ] Output and logging destinations set up</li> </ul>"},{"location":"how-to/how-to-deploy-your-application/#cicd-pipeline-integration","title":"CI/CD Pipeline Integration","text":""},{"location":"how-to/how-to-deploy-your-application/#github-actions-integration","title":"GitHub Actions Integration","text":"<pre><code># .github/workflows/lint-and-fix.yml\nname: Lint and Fix Code\n\non:\n  pull_request:\n    branches: [ main, develop ]\n  push:\n    branches: [ main ]\n\njobs:\n  lint-and-fix:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        token: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n\n    - name: Install aider-lint-fixer\n      run: |\n        pip install aider-lint-fixer\n\n    - name: Run linting and fixes\n      env:\n        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n      run: |\n        aider-lint-fixer --path . --auto-fix --profile ci\n\n    - name: Commit fixes\n      if: github.event_name == 'pull_request'\n      run: |\n        git config --local user.email \"action@github.com\"\n        git config --local user.name \"GitHub Action\"\n        git add -A\n        git diff --staged --quiet || git commit -m \"Auto-fix linting issues\"\n        git push\n</code></pre>"},{"location":"how-to/how-to-deploy-your-application/#gitlab-ci-integration","title":"GitLab CI Integration","text":"<pre><code># .gitlab-ci.yml\nstages:\n  - lint\n  - fix\n\nvariables:\n  PIP_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/pip\"\n\ncache:\n  paths:\n    - .cache/pip/\n\nlint-code:\n  stage: lint\n  image: python:3.11-slim\n  before_script:\n    - pip install aider-lint-fixer\n  script:\n    - aider-lint-fixer --path . --check-only --profile ci\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"merge_request_event\"\n\nfix-code:\n  stage: fix\n  image: python:3.11-slim\n  before_script:\n    - pip install aider-lint-fixer\n    - git config --global user.email \"gitlab-ci@example.com\"\n    - git config --global user.name \"GitLab CI\"\n  script:\n    - aider-lint-fixer --path . --auto-fix --profile ci\n    - |\n      if [ -n \"$(git status --porcelain)\" ]; then\n        git add -A\n        git commit -m \"Auto-fix linting issues [skip ci]\"\n        git push origin HEAD:$CI_COMMIT_REF_NAME\n      fi\n  rules:\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n  variables:\n    OPENAI_API_KEY: $OPENAI_API_KEY\n</code></pre>"},{"location":"how-to/how-to-deploy-your-application/#jenkins-pipeline","title":"Jenkins Pipeline","text":"<pre><code>pipeline {\n    agent any\n\n    environment {\n        OPENAI_API_KEY = credentials('openai-api-key')\n        AIDER_LINT_PROFILE = 'ci'\n    }\n\n    stages {\n        stage('Setup') {\n            steps {\n                sh 'pip install aider-lint-fixer'\n            }\n        }\n\n        stage('Lint Check') {\n            steps {\n                sh 'aider-lint-fixer --path . --check-only'\n            }\n        }\n\n        stage('Auto Fix') {\n            when {\n                branch 'main'\n            }\n            steps {\n                sh '''\n                    aider-lint-fixer --path . --auto-fix\n                    if [ -n \"$(git status --porcelain)\" ]; then\n                        git config user.email \"jenkins@example.com\"\n                        git config user.name \"Jenkins CI\"\n                        git add -A\n                        git commit -m \"Auto-fix linting issues\"\n                        git push origin main\n                    fi\n                '''\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"how-to/how-to-deploy-your-application/#container-based-deployment","title":"Container-Based Deployment","text":""},{"location":"how-to/how-to-deploy-your-application/#docker-container-execution","title":"Docker Container Execution","text":"<pre><code># Run aider-lint-fixer in a container\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -e OPENAI_API_KEY=$OPENAI_API_KEY \\\n  -e AIDER_LINT_PROFILE=production \\\n  aider-lint-fixer:latest \\\n  aider-lint-fixer --path /workspace --auto-fix\n\n# For RHEL environments\npodman run --rm \\\n  -v $(pwd):/workspace:Z \\\n  -e OPENAI_API_KEY=$OPENAI_API_KEY \\\n  your-registry.redhat.com/aider-lint-fixer-rhel9:latest \\\n  aider-lint-fixer --path /workspace --check-only\n</code></pre>"},{"location":"how-to/how-to-deploy-your-application/#kubernetes-job-for-batch-processing","title":"Kubernetes Job for Batch Processing","text":"<pre><code># k8s/lint-job.yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: aider-lint-batch-job\nspec:\n  template:\n    spec:\n      containers:\n      - name: aider-lint-fixer\n        image: aider-lint-fixer:v1.0.0\n        command: [\"aider-lint-fixer\"]\n        args: [\"--path\", \"/workspace\", \"--auto-fix\", \"--profile\", \"batch\"]\n        env:\n        - name: OPENAI_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: aider-lint-secrets\n              key: openai-api-key\n        volumeMounts:\n        - name: source-code\n          mountPath: /workspace\n        - name: config\n          mountPath: /etc/aider-lint\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: source-code\n        persistentVolumeClaim:\n          claimName: source-code-pvc\n      - name: config\n        configMap:\n          name: aider-lint-config\n      restartPolicy: OnFailure\n  backoffLimit: 3\n</code></pre>"},{"location":"how-to/how-to-deploy-your-application/#openshift-job-rhel-enterprise","title":"OpenShift Job (RHEL Enterprise)","text":"<pre><code># openshift/lint-job.yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: aider-lint-enterprise-job\nspec:\n  template:\n    spec:\n      containers:\n      - name: aider-lint-fixer\n        image: your-registry.redhat.com/aider-lint-fixer-rhel9:latest\n        command: [\"aider-lint-fixer\"]\n        args: [\"--path\", \"/workspace\", \"--profile\", \"enterprise\"]\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 1001\n          allowPrivilegeEscalation: false\n        env:\n        - name: AIDER_LINT_PROFILE\n          value: \"enterprise\"\n        volumeMounts:\n        - name: source-code\n          mountPath: /workspace\n      volumes:\n      - name: source-code\n        persistentVolumeClaim:\n          claimName: enterprise-code-pvc\n      restartPolicy: Never\n</code></pre>"},{"location":"how-to/how-to-deploy-your-application/#developer-workstation-setup","title":"Developer Workstation Setup","text":""},{"location":"how-to/how-to-deploy-your-application/#direct-installation","title":"Direct Installation","text":"<pre><code># Install via pip\npip install aider-lint-fixer\n\n# Install from source\ngit clone https://github.com/your-org/aider-lint-fixer.git\ncd aider-lint-fixer\npip install -e .\n\n# Verify installation\naider-lint-fixer --version\n</code></pre>"},{"location":"how-to/how-to-deploy-your-application/#configuration-for-development-teams","title":"Configuration for Development Teams","text":"<pre><code># Create team configuration\nmkdir -p ~/.config/aider-lint-fixer\ncat &gt; ~/.config/aider-lint-fixer/config.yaml &lt;&lt; EOF\nprofile: development\nlinters:\n  python: [flake8, pylint, mypy]\n  javascript: [eslint, prettier]\n  ansible: [ansible-lint]\nai_integration:\n  enabled: true\n  model: gpt-4\n  max_tokens: 2000\nlogging:\n  level: INFO\n  file: ~/.local/share/aider-lint-fixer/logs/aider-lint.log\nEOF\n\n# Set up environment variables\necho 'export OPENAI_API_KEY=\"your-api-key\"' &gt;&gt; ~/.bashrc\necho 'export AIDER_LINT_CONFIG=\"~/.config/aider-lint-fixer/config.yaml\"' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"how-to/how-to-deploy-your-application/#batch-processing-and-scheduled-jobs","title":"Batch Processing and Scheduled Jobs","text":""},{"location":"how-to/how-to-deploy-your-application/#cron-job-for-regular-maintenance","title":"Cron Job for Regular Maintenance","text":"<pre><code># Add to crontab (crontab -e)\n# Run aider-lint-fixer on main codebase every night at 2 AM\n0 2 * * * cd /path/to/codebase &amp;&amp; /usr/local/bin/aider-lint-fixer --path . --auto-fix --profile batch &gt;&gt; /var/log/aider-lint-cron.log 2&gt;&amp;1\n\n# Weekly comprehensive scan on Sundays at 3 AM\n0 3 * * 0 cd /path/to/codebase &amp;&amp; /usr/local/bin/aider-lint-fixer --path . --comprehensive --profile batch &gt;&gt; /var/log/aider-lint-weekly.log 2&gt;&amp;1\n</code></pre>"},{"location":"how-to/how-to-deploy-your-application/#systemd-service-for-enterprise","title":"Systemd Service for Enterprise","text":"<pre><code># /etc/systemd/system/aider-lint-batch.service\n[Unit]\nDescription=Aider Lint Fixer Batch Processing\nAfter=network.target\n\n[Service]\nType=oneshot\nUser=aider-lint\nGroup=aider-lint\nWorkingDirectory=/opt/codebase\nEnvironment=AIDER_LINT_PROFILE=enterprise\nEnvironment=OPENAI_API_KEY_FILE=/etc/aider-lint/api-key\nExecStart=/usr/local/bin/aider-lint-fixer --path /opt/codebase --auto-fix --profile enterprise\nStandardOutput=journal\nStandardError=journal\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <pre><code># /etc/systemd/system/aider-lint-batch.timer\n[Unit]\nDescription=Run Aider Lint Fixer Batch Processing\nRequires=aider-lint-batch.service\n\n[Timer]\nOnCalendar=daily\nPersistent=true\n\n[Install]\nWantedBy=timers.target\n</code></pre> <pre><code># Enable and start the timer\nsudo systemctl enable aider-lint-batch.timer\nsudo systemctl start aider-lint-batch.timer\n</code></pre>"},{"location":"how-to/how-to-deploy-your-application/#verification-and-testing","title":"Verification and Testing","text":""},{"location":"how-to/how-to-deploy-your-application/#cli-tool-verification","title":"CLI Tool Verification","text":"<pre><code>#!/bin/bash\n# scripts/verify-deployment.sh\n\necho \"Verifying aider-lint-fixer deployment...\"\n\n# Check installation\nif command -v aider-lint-fixer &amp;&gt; /dev/null; then\n    echo \"\u2713 aider-lint-fixer is installed\"\n    aider-lint-fixer --version\nelse\n    echo \"\u2717 aider-lint-fixer not found in PATH\"\n    exit 1\nfi\n\n# Test basic functionality\necho \"Testing basic linting functionality...\"\nif aider-lint-fixer --help &amp;&gt; /dev/null; then\n    echo \"\u2713 Help command works\"\nelse\n    echo \"\u2717 Help command failed\"\n    exit 1\nfi\n\n# Test configuration loading\nif aider-lint-fixer --check-config &amp;&gt; /dev/null; then\n    echo \"\u2713 Configuration loads successfully\"\nelse\n    echo \"\u2717 Configuration loading failed\"\n    exit 1\nfi\n\n# Test AI integration (if API key available)\nif [[ -n \"$OPENAI_API_KEY\" ]]; then\n    echo \"Testing AI integration...\"\n    if aider-lint-fixer --test-ai &amp;&gt; /dev/null; then\n        echo \"\u2713 AI integration working\"\n    else\n        echo \"\u26a0 AI integration test failed (check API key)\"\n    fi\nfi\n\necho \"Deployment verification complete!\"\n</code></pre>"},{"location":"how-to/how-to-deploy-your-application/#performance-testing","title":"Performance Testing","text":"<pre><code>#!/bin/bash\n# scripts/performance-test.sh\n\nCODEBASE_PATH=\"/path/to/test/codebase\"\nITERATIONS=5\n\necho \"Running performance tests...\"\n\nfor i in $(seq 1 $ITERATIONS); do\n    echo \"Iteration $i/$ITERATIONS\"\n\n    start_time=$(date +%s)\n    aider-lint-fixer --path \"$CODEBASE_PATH\" --check-only --profile performance\n    end_time=$(date +%s)\n\n    duration=$((end_time - start_time))\n    echo \"Duration: ${duration}s\"\ndone\n</code></pre>"},{"location":"how-to/how-to-deploy-your-application/#related-guides","title":"Related Guides","text":"<ul> <li>Deploy to Production - Production deployment strategies</li> <li>Configure Linters - Configuration management</li> <li>Debug Common Issues - Troubleshooting deployment issues</li> <li>Container Architecture - Container strategy overview</li> </ul>"},{"location":"how-to/integrate-with-aider/","title":"Integrate with Aider","text":"<p>This guide explains how to integrate aider-lint-fixer with Aider AI coding assistant.</p>"},{"location":"how-to/integrate-with-aider/#what-is-aider","title":"What is Aider?","text":"<p>Aider is an AI-powered coding assistant that helps you write and edit code. The aider-lint-fixer tool is designed to work seamlessly with Aider to provide automated linting and code quality improvements.</p>"},{"location":"how-to/integrate-with-aider/#installation","title":"Installation","text":""},{"location":"how-to/integrate-with-aider/#install-aider","title":"Install Aider","text":"<pre><code>pip install aider-chat\n</code></pre>"},{"location":"how-to/integrate-with-aider/#configure-aider-with-aider-lint-fixer","title":"Configure Aider with aider-lint-fixer","text":"<pre><code># Set up your API key (OpenAI, Anthropic, etc.)\nexport OPENAI_API_KEY=your_api_key_here\n\n# Or use local models\naider --model ollama/codellama:7b\n</code></pre>"},{"location":"how-to/integrate-with-aider/#integration-workflow","title":"Integration Workflow","text":""},{"location":"how-to/integrate-with-aider/#1-basic-integration","title":"1. Basic Integration","text":"<p>Run aider-lint-fixer before starting an Aider session:</p> <pre><code>python -m aider_lint_fixer --scan-directory ./src\naider\n</code></pre>"},{"location":"how-to/integrate-with-aider/#2-automated-workflow","title":"2. Automated Workflow","text":"<p>Create a pre-commit hook:</p> <pre><code>#!/bin/bash\n# .git/hooks/pre-commit\npython -m aider_lint_fixer --auto-fix\n</code></pre>"},{"location":"how-to/integrate-with-aider/#3-cicd-integration","title":"3. CI/CD Integration","text":"<pre><code># .github/workflows/lint.yml\nname: Lint Check\non: [push, pull_request]\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run aider-lint-fixer\n        run: |\n          pip install aider-lint-fixer\n          python -m aider_lint_fixer --check\n</code></pre>"},{"location":"how-to/integrate-with-aider/#best-practices","title":"Best Practices","text":"<ol> <li>Run linting before Aider sessions</li> <li>Use incremental fixes</li> <li>Review automated changes</li> <li>Configure project-specific rules</li> </ol>"},{"location":"how-to/integrate-with-aider/#configuration","title":"Configuration","text":"<p>Create <code>.aider-lint-config.yml</code>:</p> <pre><code>linters:\n  - flake8\n  - mypy\n  - black\nauto_fix: true\nmax_fixes_per_file: 10\n</code></pre>"},{"location":"how-to/integrate-with-aider/#troubleshooting","title":"Troubleshooting","text":""},{"location":"how-to/integrate-with-aider/#common-issues","title":"Common Issues","text":"<ul> <li>API rate limits: Use local models or adjust request frequency</li> <li>Large files: Process in chunks</li> <li>Conflicting rules: Configure linter priorities</li> </ul>"},{"location":"how-to/integrate-with-aider/#next-steps","title":"Next Steps","text":"<ul> <li>Monitor Performance</li> <li>Security Best Practices</li> <li>Run Tests</li> </ul>"},{"location":"how-to/macos-ubuntu-developer-guide/","title":"macOS and Ubuntu Developer Guide","text":"<p>This guide provides macOS and Ubuntu developers with streamlined workflows for using aider-lint-fixer, optimized for modern development environments with the latest tools and features.</p>"},{"location":"how-to/macos-ubuntu-developer-guide/#prerequisites","title":"Prerequisites","text":""},{"location":"how-to/macos-ubuntu-developer-guide/#macos-requirements","title":"macOS Requirements","text":"<ul> <li>macOS 12+ (Monterey or later)</li> <li>Docker Desktop or Homebrew + Docker</li> <li>Python 3.11+ (via Homebrew recommended)</li> <li>Git</li> <li>Xcode Command Line Tools</li> </ul>"},{"location":"how-to/macos-ubuntu-developer-guide/#ubuntu-requirements","title":"Ubuntu Requirements","text":"<ul> <li>Ubuntu 20.04 LTS+ (22.04 LTS recommended)</li> <li>Docker or Podman</li> <li>Python 3.11+</li> <li>Git</li> <li>Build essentials</li> </ul>"},{"location":"how-to/macos-ubuntu-developer-guide/#installation","title":"Installation","text":""},{"location":"how-to/macos-ubuntu-developer-guide/#macos-setup","title":"macOS Setup","text":"<pre><code># Install Homebrew (if not already installed)\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install dependencies\nbrew install python@3.11 git docker\n\n# Start Docker Desktop or install Docker via Homebrew\nbrew install --cask docker\n# OR\nbrew install docker docker-compose\n\n# Clone aider-lint-fixer\ngit clone https://github.com/your-org/aider-lint-fixer.git\ncd aider-lint-fixer\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#ubuntu-setup","title":"Ubuntu Setup","text":"<pre><code># Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install dependencies\nsudo apt install -y python3.11 python3.11-venv python3-pip git curl\n\n# Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Clone aider-lint-fixer\ngit clone https://github.com/your-org/aider-lint-fixer.git\ncd aider-lint-fixer\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#quick-start","title":"Quick Start","text":""},{"location":"how-to/macos-ubuntu-developer-guide/#container-based-development-recommended","title":"Container-Based Development (Recommended)","text":"<pre><code># Build the default container (includes latest ansible-lint)\ndocker build -t aider-lint-fixer:latest .\n\n# Run on your project\ndocker run --rm -v $(pwd):/workspace:ro \\\n  aider-lint-fixer:latest \\\n  --linters flake8,ansible-lint,eslint --dry-run\n\n# Interactive mode\ndocker run --rm -it -v $(pwd):/workspace \\\n  aider-lint-fixer:latest \\\n  --interactive\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#native-installation","title":"Native Installation","text":"<pre><code># Create virtual environment\npython3.11 -m venv ~/.venv/aider-lint-fixer\nsource ~/.venv/aider-lint-fixer/bin/activate\n\n# Install with latest dependencies\npip install -e .\n\n# Install additional linters\npip install ansible-lint flake8 pylint mypy\nnpm install -g eslint jshint prettier\n\n# Verify installation\naider-lint-fixer --version\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#development-workflows","title":"Development Workflows","text":""},{"location":"how-to/macos-ubuntu-developer-guide/#modern-ansible-development","title":"Modern Ansible Development","text":"<pre><code># Use latest ansible-lint with cutting-edge rules\ndocker run --rm -v $(pwd):/workspace:ro \\\n  aider-lint-fixer:latest \\\n  --linters ansible-lint \\\n  --profile modern \\\n  --enable-experimental\n\n# Auto-fix common issues\ndocker run --rm -v $(pwd):/workspace \\\n  aider-lint-fixer:latest \\\n  --linters ansible-lint \\\n  --auto-fix \\\n  --backup\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#multi-language-projects","title":"Multi-Language Projects","text":"<pre><code># Lint Python, JavaScript, and Ansible in one pass\ndocker run --rm -v $(pwd):/workspace:ro \\\n  aider-lint-fixer:latest \\\n  --linters flake8,pylint,mypy,eslint,ansible-lint \\\n  --parallel\n\n# Generate comprehensive report\ndocker run --rm -v $(pwd):/workspace:ro \\\n  -v $(pwd)/reports:/reports \\\n  aider-lint-fixer:latest \\\n  --output-format html \\\n  --output-file /reports/lint-report.html\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#vs-code-integration","title":"VS Code Integration","text":"<p>Create <code>.vscode/tasks.json</code>:</p> <pre><code>{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Aider Lint Check\",\n            \"type\": \"shell\",\n            \"command\": \"docker\",\n            \"args\": [\n                \"run\", \"--rm\", \"-v\", \"${workspaceFolder}:/workspace:ro\",\n                \"aider-lint-fixer:latest\",\n                \"--linters\", \"flake8,ansible-lint,eslint\",\n                \"--format\", \"vscode\"\n            ],\n            \"group\": \"test\",\n            \"presentation\": {\n                \"echo\": true,\n                \"reveal\": \"always\",\n                \"focus\": false,\n                \"panel\": \"shared\"\n            },\n            \"problemMatcher\": \"$eslint-stylish\"\n        },\n        {\n            \"label\": \"Aider Lint Fix\",\n            \"type\": \"shell\",\n            \"command\": \"docker\",\n            \"args\": [\n                \"run\", \"--rm\", \"-v\", \"${workspaceFolder}:/workspace\",\n                \"aider-lint-fixer:latest\",\n                \"--auto-fix\",\n                \"--backup\"\n            ],\n            \"group\": \"build\"\n        }\n    ]\n}\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#github-actions-integration","title":"GitHub Actions Integration","text":"<p>Create <code>.github/workflows/lint.yml</code>:</p> <pre><code>name: Lint Code\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Build aider-lint-fixer\n      run: docker build -t aider-lint-fixer:latest .\n\n    - name: Run linting\n      run: |\n        docker run --rm -v ${{ github.workspace }}:/workspace:ro \\\n          aider-lint-fixer:latest \\\n          --linters flake8,ansible-lint,eslint \\\n          --output-format github-actions\n\n    - name: Upload lint results\n      uses: actions/upload-artifact@v3\n      if: always()\n      with:\n        name: lint-results\n        path: lint-results.json\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#platform-specific-features","title":"Platform-Specific Features","text":""},{"location":"how-to/macos-ubuntu-developer-guide/#macos-optimizations","title":"macOS Optimizations","text":"<pre><code># Use macOS-specific paths\ndocker run --rm \\\n  -v $(pwd):/workspace:ro \\\n  -v ~/.ansible:/home/aider/.ansible:ro \\\n  -v ~/.ssh:/home/aider/.ssh:ro \\\n  aider-lint-fixer:latest\n\n# Leverage macOS filesystem performance\ndocker run --rm \\\n  -v $(pwd):/workspace:ro,cached \\\n  aider-lint-fixer:latest \\\n  --cache-dir /tmp/aider-cache\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#ubuntu-optimizations","title":"Ubuntu Optimizations","text":"<pre><code># Use Ubuntu-specific package versions\ndocker run --rm \\\n  -v $(pwd):/workspace:ro \\\n  -v ~/.cache/pip:/home/aider/.cache/pip \\\n  aider-lint-fixer:latest\n\n# Leverage systemd for service management\nsudo tee /etc/systemd/user/aider-lint-watcher.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Aider Lint File Watcher\nAfter=graphical-session.target\n\n[Service]\nType=simple\nExecStart=/usr/bin/docker run --rm -v %h/projects:/workspace:ro aider-lint-fixer:latest --watch\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=default.target\nEOF\n\nsystemctl --user enable aider-lint-watcher\nsystemctl --user start aider-lint-watcher\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#performance-optimization","title":"Performance Optimization","text":""},{"location":"how-to/macos-ubuntu-developer-guide/#container-performance","title":"Container Performance","text":"<pre><code># Use multi-stage builds for faster rebuilds\ndocker build --target development -t aider-lint-fixer:dev .\n\n# Leverage BuildKit for better caching\nDOCKER_BUILDKIT=1 docker build -t aider-lint-fixer:latest .\n\n# Use bind mounts for development\ndocker run --rm \\\n  --mount type=bind,source=$(pwd),target=/workspace \\\n  aider-lint-fixer:latest \\\n  --watch\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#resource-management","title":"Resource Management","text":"<pre><code># Optimize for development machine\ndocker run --rm \\\n  --memory=2g \\\n  --cpus=4 \\\n  -v $(pwd):/workspace:ro \\\n  aider-lint-fixer:latest \\\n  --parallel --jobs=4\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#ide-integration","title":"IDE Integration","text":""},{"location":"how-to/macos-ubuntu-developer-guide/#pycharmintellij-integration","title":"PyCharm/IntelliJ Integration","text":"<pre><code># Configure external tool\n# Program: docker\n# Arguments: run --rm -v $FileDir$:/workspace:ro aider-lint-fixer:latest --file /workspace/$FileName$\n# Working directory: $ProjectFileDir$\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#sublime-text-integration","title":"Sublime Text Integration","text":"<p>Create <code>aider-lint.sublime-build</code>:</p> <pre><code>{\n    \"shell_cmd\": \"docker run --rm -v $folder:/workspace:ro aider-lint-fixer:latest --file /workspace/$file_name\",\n    \"file_regex\": \"^(.+):([0-9]+):([0-9]+): (.+)$\",\n    \"selector\": \"source.python, source.yaml, source.js\"\n}\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#vimneovim-integration","title":"Vim/Neovim Integration","text":"<p>Add to <code>.vimrc</code> or <code>init.vim</code>:</p> <pre><code>\" Aider Lint integration\nfunction! AiderLint()\n    let l:current_file = expand('%:p')\n    let l:workspace = getcwd()\n    let l:cmd = 'docker run --rm -v ' . l:workspace . ':/workspace:ro aider-lint-fixer:latest --file /workspace/' . expand('%')\n    let l:output = system(l:cmd)\n    echo l:output\nendfunction\n\ncommand! AiderLint call AiderLint()\nnnoremap &lt;leader&gt;al :AiderLint&lt;CR&gt;\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#testing-and-quality-assurance","title":"Testing and Quality Assurance","text":""},{"location":"how-to/macos-ubuntu-developer-guide/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Create <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n  - repo: local\n    hooks:\n      - id: aider-lint-fixer\n        name: Aider Lint Fixer\n        entry: docker run --rm -v $(pwd):/workspace:ro aider-lint-fixer:latest\n        language: system\n        files: \\.(py|yml|yaml|js|ts)$\n        pass_filenames: false\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#test-integration","title":"Test Integration","text":"<pre><code># Run tests with linting\ndocker run --rm -v $(pwd):/workspace:ro \\\n  aider-lint-fixer:latest \\\n  --test-mode \\\n  --coverage\n\n# Generate test reports\ndocker run --rm -v $(pwd):/workspace:ro \\\n  -v $(pwd)/test-results:/test-results \\\n  aider-lint-fixer:latest \\\n  --output-format junit \\\n  --output-file /test-results/lint.xml\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#container-registry-integration","title":"Container Registry Integration","text":""},{"location":"how-to/macos-ubuntu-developer-guide/#docker-hub","title":"Docker Hub","text":"<pre><code># Build and tag for Docker Hub\ndocker build -t your-username/aider-lint-fixer:latest .\ndocker push your-username/aider-lint-fixer:latest\n\n# Use from Docker Hub\ndocker run --rm -v $(pwd):/workspace:ro \\\n  your-username/aider-lint-fixer:latest\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#github-container-registry","title":"GitHub Container Registry","text":"<pre><code># Login to GitHub Container Registry\necho $GITHUB_TOKEN | docker login ghcr.io -u your-username --password-stdin\n\n# Build and push\ndocker build -t ghcr.io/your-username/aider-lint-fixer:latest .\ndocker push ghcr.io/your-username/aider-lint-fixer:latest\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"how-to/macos-ubuntu-developer-guide/#macos-issues","title":"macOS Issues","text":"<p>Docker Desktop Problems: <pre><code># Reset Docker Desktop\ndocker system prune -a\n# Restart Docker Desktop from Applications\n\n# Check Docker daemon\ndocker info\n</code></pre></p> <p>Permission Issues: <pre><code># Fix volume mount permissions\ndocker run --rm -v $(pwd):/workspace:rw \\\n  --user $(id -u):$(id -g) \\\n  aider-lint-fixer:latest\n</code></pre></p>"},{"location":"how-to/macos-ubuntu-developer-guide/#ubuntu-issues","title":"Ubuntu Issues","text":"<p>Docker Permission Denied: <pre><code># Add user to docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Or use sudo temporarily\nsudo docker run --rm -v $(pwd):/workspace:ro aider-lint-fixer:latest\n</code></pre></p> <p>Python Version Issues: <pre><code># Install specific Python version\nsudo apt install -y python3.11 python3.11-venv python3.11-dev\n\n# Use specific Python version\npython3.11 -m venv ~/.venv/aider-lint-fixer\n</code></pre></p>"},{"location":"how-to/macos-ubuntu-developer-guide/#common-container-issues","title":"Common Container Issues","text":"<p>Out of Space: <pre><code># Clean up Docker\ndocker system prune -a\n\n# Remove unused images\ndocker image prune -a\n</code></pre></p> <p>Slow Performance: <pre><code># Use cached volumes\ndocker run --rm -v $(pwd):/workspace:ro,cached aider-lint-fixer:latest\n\n# Increase Docker resources in Docker Desktop settings\n</code></pre></p>"},{"location":"how-to/macos-ubuntu-developer-guide/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"how-to/macos-ubuntu-developer-guide/#custom-configuration","title":"Custom Configuration","text":"<p>Create <code>aider-lint-config.yaml</code>:</p> <pre><code>linters:\n  - flake8\n  - ansible-lint\n  - eslint\n  - mypy\n\nprofiles:\n  development:\n    strict: false\n    auto_fix: true\n    parallel: true\n\n  ci:\n    strict: true\n    output_format: \"junit\"\n    fail_fast: true\n\noutput:\n  format: \"json\"\n  file: \"lint-results.json\"\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#environment-variables","title":"Environment Variables","text":"<pre><code># Set default configuration\nexport AIDER_LINT_CONFIG=./aider-lint-config.yaml\nexport AIDER_LINT_PROFILE=development\nexport AIDER_LINT_CACHE_DIR=~/.cache/aider-lint-fixer\n\n# Run with environment\ndocker run --rm \\\n  -v $(pwd):/workspace:ro \\\n  -e AIDER_LINT_PROFILE=ci \\\n  aider-lint-fixer:latest\n</code></pre>"},{"location":"how-to/macos-ubuntu-developer-guide/#best-practices","title":"Best Practices","text":""},{"location":"how-to/macos-ubuntu-developer-guide/#development-workflow","title":"Development Workflow","text":"<ul> <li>Use the default container for latest features and tools</li> <li>Implement pre-commit hooks for consistent code quality</li> <li>Integrate with your IDE for real-time feedback</li> <li>Use parallel processing for large codebases</li> </ul>"},{"location":"how-to/macos-ubuntu-developer-guide/#container-management","title":"Container Management","text":"<ul> <li>Leverage Docker layer caching for faster builds</li> <li>Use bind mounts for development, volumes for production</li> <li>Implement proper resource limits for CI/CD</li> <li>Keep containers updated with latest security patches</li> </ul>"},{"location":"how-to/macos-ubuntu-developer-guide/#performance","title":"Performance","text":"<ul> <li>Use cached volume mounts on macOS</li> <li>Implement parallel linting for multi-file projects</li> <li>Optimize container resource allocation</li> <li>Use local caching for dependencies</li> </ul>"},{"location":"how-to/macos-ubuntu-developer-guide/#related-documentation","title":"Related Documentation","text":"<ul> <li>Container Deployment Tutorial</li> <li>Container Architecture</li> <li>ADR 0008: Deployment Environments</li> <li>API Documentation</li> </ul>"},{"location":"how-to/macos-ubuntu-developer-guide/#community-resources","title":"Community Resources","text":"<ul> <li>GitHub Repository: https://github.com/your-org/aider-lint-fixer</li> <li>Docker Hub: https://hub.docker.com/r/your-org/aider-lint-fixer</li> <li>Documentation: https://aider-lint-fixer.readthedocs.io</li> <li>Community Forum: https://github.com/your-org/aider-lint-fixer/discussions</li> </ul>"},{"location":"how-to/monitor-performance/","title":"Monitor Performance","text":"<p>This guide covers how to monitor and optimize the performance of aider-lint-fixer.</p>"},{"location":"how-to/monitor-performance/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"how-to/monitor-performance/#basic-performance-metrics","title":"Basic Performance Metrics","text":"<pre><code># Run with timing information\npython -m aider_lint_fixer --profile --output-stats\n\n# Memory usage monitoring\npython -m memory_profiler aider_lint_fixer/main.py\n</code></pre>"},{"location":"how-to/monitor-performance/#built-in-monitoring","title":"Built-in Monitoring","text":"<pre><code># Enable performance monitoring\nexport PERFORMANCE_MONITORING=true\nexport LOG_LEVEL=DEBUG\n\npython -m aider_lint_fixer --monitor-performance\n</code></pre>"},{"location":"how-to/monitor-performance/#key-performance-indicators-kpis","title":"Key Performance Indicators (KPIs)","text":""},{"location":"how-to/monitor-performance/#processing-speed","title":"Processing Speed","text":"<ul> <li>Files processed per minute</li> <li>Lines of code analyzed per second</li> <li>Time to first lint result</li> </ul>"},{"location":"how-to/monitor-performance/#resource-usage","title":"Resource Usage","text":"<ul> <li>Memory consumption</li> <li>CPU utilization</li> <li>Disk I/O patterns</li> </ul>"},{"location":"how-to/monitor-performance/#quality-metrics","title":"Quality Metrics","text":"<ul> <li>Issues detected per file</li> <li>False positive rate</li> <li>Fix success rate</li> </ul>"},{"location":"how-to/monitor-performance/#performance-profiling","title":"Performance Profiling","text":""},{"location":"how-to/monitor-performance/#cpu-profiling","title":"CPU Profiling","text":"<pre><code># Profile CPU usage\npython -m cProfile -o profile.stats -m aider_lint_fixer\n\n# Analyze profile data\npython -c \"\nimport pstats\np = pstats.Stats('profile.stats')\np.sort_stats('cumulative').print_stats(20)\n\"\n</code></pre>"},{"location":"how-to/monitor-performance/#memory-profiling","title":"Memory Profiling","text":"<pre><code># Install memory profiler\npip install memory-profiler psutil\n\n# Profile memory usage\npython -m memory_profiler aider_lint_fixer/main.py\n\n# Line-by-line memory profiling\n@profile\ndef analyze_file(filepath):\n    # Function implementation\n    pass\n</code></pre>"},{"location":"how-to/monitor-performance/#io-profiling","title":"I/O Profiling","text":"<pre><code># Monitor file I/O\npython -m aider_lint_fixer --io-profile\n\n# Use iotop for system-wide I/O monitoring\nsudo iotop -p $(pgrep -f aider_lint_fixer)\n</code></pre>"},{"location":"how-to/monitor-performance/#performance-optimization","title":"Performance Optimization","text":""},{"location":"how-to/monitor-performance/#configuration-tuning","title":"Configuration Tuning","text":"<pre><code># config/performance.yml\nperformance:\n  max_workers: 4          # Parallel processing\n  chunk_size: 100         # Files per batch\n  cache_size: 1000        # Result cache size\n  timeout: 30             # Operation timeout\n\noptimization:\n  enable_caching: true\n  use_incremental: true   # Only process changed files\n  skip_large_files: true  # Skip files &gt; 1MB\n</code></pre>"},{"location":"how-to/monitor-performance/#parallel-processing","title":"Parallel Processing","text":"<pre><code># Enable parallel processing\npython -m aider_lint_fixer --workers 4 --parallel\n\n# Fine-tune worker count\nimport multiprocessing\noptimal_workers = multiprocessing.cpu_count() - 1\n</code></pre>"},{"location":"how-to/monitor-performance/#caching-strategies","title":"Caching Strategies","text":"<pre><code># Enable result caching\nexport ENABLE_CACHE=true\nexport CACHE_DIR=~/.cache/aider-lint-fixer\n\n# Clear cache when needed\npython -m aider_lint_fixer --clear-cache\n</code></pre>"},{"location":"how-to/monitor-performance/#monitoring-tools","title":"Monitoring Tools","text":""},{"location":"how-to/monitor-performance/#system-monitoring","title":"System Monitoring","text":"<pre><code># htop for real-time monitoring\nhtop -p $(pgrep -f aider_lint_fixer)\n\n# iostat for I/O statistics\niostat -x 1\n\n# vmstat for memory statistics\nvmstat 1\n</code></pre>"},{"location":"how-to/monitor-performance/#application-monitoring","title":"Application Monitoring","text":"<pre><code># Custom performance monitoring\nimport time\nimport psutil\nimport logging\n\ndef monitor_performance():\n    process = psutil.Process()\n\n    while True:\n        cpu_percent = process.cpu_percent()\n        memory_mb = process.memory_info().rss / 1024 / 1024\n\n        logging.info(f\"CPU: {cpu_percent}%, Memory: {memory_mb}MB\")\n        time.sleep(60)\n</code></pre>"},{"location":"how-to/monitor-performance/#cloud-monitoring","title":"Cloud Monitoring","text":"<pre><code># CloudWatch (AWS)\ncloudwatch:\n  metrics:\n    - name: ProcessingTime\n      unit: Seconds\n    - name: MemoryUsage\n      unit: Bytes\n    - name: ErrorRate\n      unit: Percent\n\n# Application Insights (Azure)\nappinsights:\n  instrumentation_key: your_key\n  track_dependencies: true\n  track_requests: true\n</code></pre>"},{"location":"how-to/monitor-performance/#performance-benchmarking","title":"Performance Benchmarking","text":""},{"location":"how-to/monitor-performance/#baseline-measurements","title":"Baseline Measurements","text":"<pre><code># Create performance baseline\npython scripts/benchmark.py --baseline --output baseline.json\n\n# Compare current performance\npython scripts/benchmark.py --compare baseline.json\n</code></pre>"},{"location":"how-to/monitor-performance/#load-testing","title":"Load Testing","text":"<pre><code># Test with large codebases\npython -m aider_lint_fixer --test-performance \\\n  --large-files 1000 \\\n  --max-filesize 10MB\n\n# Stress testing\npython scripts/stress_test.py --duration 300 --concurrent 10\n</code></pre>"},{"location":"how-to/monitor-performance/#regression-testing","title":"Regression Testing","text":"<pre><code># Performance regression tests\ndef test_performance_regression():\n    start_time = time.time()\n\n    # Run linting operation\n    result = lint_large_codebase()\n\n    duration = time.time() - start_time\n    assert duration &lt; PERFORMANCE_THRESHOLD\n</code></pre>"},{"location":"how-to/monitor-performance/#performance-alerts","title":"Performance Alerts","text":""},{"location":"how-to/monitor-performance/#threshold-based-alerts","title":"Threshold-Based Alerts","text":"<pre><code># alerts.yml\nalerts:\n  high_memory_usage:\n    threshold: 1GB\n    action: log_warning\n\n  slow_processing:\n    threshold: 5min\n    action: send_notification\n\n  high_error_rate:\n    threshold: 10%\n    action: stop_processing\n</code></pre>"},{"location":"how-to/monitor-performance/#automated-monitoring","title":"Automated Monitoring","text":"<pre><code># Performance monitoring script\nimport psutil\nimport time\nimport smtplib\n\ndef check_performance():\n    process = get_aider_process()\n\n    if process.memory_percent() &gt; 80:\n        send_alert(\"High memory usage detected\")\n\n    if get_processing_time() &gt; 300:\n        send_alert(\"Processing taking too long\")\n</code></pre>"},{"location":"how-to/monitor-performance/#performance-reporting","title":"Performance Reporting","text":""},{"location":"how-to/monitor-performance/#daily-reports","title":"Daily Reports","text":"<pre><code># Generate daily performance report\npython scripts/generate_report.py --daily --format html\n\n# Key metrics to include:\n# - Average processing time\n# - Peak memory usage\n# - Files processed\n# - Error rates\n</code></pre>"},{"location":"how-to/monitor-performance/#performance-dashboard","title":"Performance Dashboard","text":"<pre><code># Simple dashboard with matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndef create_performance_dashboard():\n    df = load_performance_data()\n\n    fig, axes = plt.subplots(2, 2, figsize=(12, 8))\n\n    # Processing time trend\n    axes[0,0].plot(df['timestamp'], df['processing_time'])\n    axes[0,0].set_title('Processing Time Trend')\n\n    # Memory usage\n    axes[0,1].plot(df['timestamp'], df['memory_usage'])\n    axes[0,1].set_title('Memory Usage')\n\n    # Throughput\n    axes[1,0].bar(df['hour'], df['files_processed'])\n    axes[1,0].set_title('Files Processed per Hour')\n\n    # Error rate\n    axes[1,1].plot(df['timestamp'], df['error_rate'])\n    axes[1,1].set_title('Error Rate')\n\n    plt.tight_layout()\n    plt.savefig('performance_dashboard.png')\n</code></pre>"},{"location":"how-to/monitor-performance/#troubleshooting-performance-issues","title":"Troubleshooting Performance Issues","text":""},{"location":"how-to/monitor-performance/#common-performance-problems","title":"Common Performance Problems","text":"<ol> <li>High Memory Usage</li> <li>Reduce batch size</li> <li>Enable garbage collection</li> <li> <p>Use streaming for large files</p> </li> <li> <p>Slow Processing</p> </li> <li>Increase parallel workers</li> <li>Enable caching</li> <li> <p>Skip unnecessary checks</p> </li> <li> <p>High CPU Usage</p> </li> <li>Optimize regex patterns</li> <li>Reduce worker count</li> <li>Use more efficient algorithms</li> </ol>"},{"location":"how-to/monitor-performance/#diagnostic-commands","title":"Diagnostic Commands","text":"<pre><code># Memory leaks\npython -m aider_lint_fixer --debug-memory\n\n# CPU bottlenecks\npython -m aider_lint_fixer --profile-cpu\n\n# I/O issues\npython -m aider_lint_fixer --trace-io\n</code></pre>"},{"location":"how-to/monitor-performance/#performance-best-practices","title":"Performance Best Practices","text":""},{"location":"how-to/monitor-performance/#development","title":"Development","text":"<ul> <li>Profile code regularly</li> <li>Use efficient data structures</li> <li>Minimize I/O operations</li> <li>Cache expensive computations</li> </ul>"},{"location":"how-to/monitor-performance/#deployment","title":"Deployment","text":"<ul> <li>Right-size compute resources</li> <li>Use SSD storage for better I/O</li> <li>Monitor resource utilization</li> <li>Set up automated scaling</li> </ul>"},{"location":"how-to/monitor-performance/#maintenance","title":"Maintenance","text":"<ul> <li>Regular performance testing</li> <li>Update dependencies</li> <li>Clean up cache files</li> <li>Review configuration settings</li> </ul>"},{"location":"how-to/monitor-performance/#next-steps","title":"Next Steps","text":"<ul> <li>Security Best Practices</li> <li>Integrate with Aider</li> <li>Setup Development Environment</li> </ul>"},{"location":"how-to/red-hat-developer-guide/","title":"Red Hat Developer Guide","text":"<p>This guide provides Red Hat developers with optimized workflows for using aider-lint-fixer in RHEL environments, leveraging native Red Hat tooling and enterprise features.</p>"},{"location":"how-to/red-hat-developer-guide/#prerequisites","title":"Prerequisites","text":""},{"location":"how-to/red-hat-developer-guide/#required-software","title":"Required Software","text":"<ul> <li>RHEL 9 or RHEL 10 (recommended)</li> <li>Podman (native Red Hat container tool)</li> <li>Active Red Hat subscription</li> <li>Python 3.9+ (RHEL 9) or Python 3.12+ (RHEL 10)</li> <li>Git</li> </ul>"},{"location":"how-to/red-hat-developer-guide/#installation","title":"Installation","text":"<pre><code># Install Podman (if not already installed)\nsudo dnf install -y podman\n\n# Install Python development tools\nsudo dnf install -y python3-pip python3-venv\n\n# Clone aider-lint-fixer\ngit clone https://github.com/your-org/aider-lint-fixer.git\ncd aider-lint-fixer\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#quick-start","title":"Quick Start","text":""},{"location":"how-to/red-hat-developer-guide/#container-based-development-recommended","title":"Container-Based Development (Recommended)","text":"<pre><code># Build your RHEL-optimized container\n./scripts/containers/build-rhel9.sh --validate\n# or for RHEL 10\n./scripts/containers/build-rhel10.sh --validate --security-scan\n\n# Run on your Ansible project\npodman run --rm -v $(pwd):/workspace:ro \\\n  my-company/aider-lint-fixer:rhel9 \\\n  --linters ansible-lint,flake8 --dry-run\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#native-installation","title":"Native Installation","text":"<pre><code># Create virtual environment\npython3 -m venv ~/.venv/aider-lint-fixer\nsource ~/.venv/aider-lint-fixer/bin/activate\n\n# Install with RHEL-specific dependencies\npip install -e .\n\n# Install ansible-core (requires subscription)\nsudo dnf install -y ansible-core\n\n# Verify installation\naider-lint-fixer --version\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#rhel-specific-features","title":"RHEL-Specific Features","text":""},{"location":"how-to/red-hat-developer-guide/#subscription-management-integration","title":"Subscription Management Integration","text":"<pre><code># Check subscription status\nsubscription-manager status\n\n# Register system if needed\nsudo subscription-manager register --username=your-username\n\n# Enable required repositories\nsudo subscription-manager repos --enable=rhel-9-for-x86_64-appstream-rpms\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#selinux-considerations","title":"SELinux Considerations","text":"<pre><code># Check SELinux status\nsestatus\n\n# If using containers with SELinux enforcing\npodman run --rm -v $(pwd):/workspace:ro,Z \\\n  my-company/aider-lint-fixer:rhel9 \\\n  --linters ansible-lint\n\n# For persistent volumes\npodman run --rm -v aider-cache:/tmp/aider:Z \\\n  my-company/aider-lint-fixer:rhel9\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#systemd-integration","title":"Systemd Integration","text":"<p>Create a systemd service for automated linting:</p> <pre><code># Create service file\nsudo tee /etc/systemd/system/aider-lint-watcher.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Aider Lint Watcher\nAfter=network.target\n\n[Service]\nType=simple\nUser=developer\nWorkingDirectory=/home/developer/projects\nExecStart=/usr/bin/podman run --rm -v /home/developer/projects:/workspace:ro my-company/aider-lint-fixer:rhel9 --watch\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl enable aider-lint-watcher\nsudo systemctl start aider-lint-watcher\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#development-workflows","title":"Development Workflows","text":""},{"location":"how-to/red-hat-developer-guide/#enterprise-ansible-development","title":"Enterprise Ansible Development","text":"<pre><code># Lint Ansible collections with RHEL-specific rules\npodman run --rm -v $(pwd):/workspace:ro \\\n  my-company/aider-lint-fixer:rhel9 \\\n  --linters ansible-lint \\\n  --ansible-config /workspace/ansible.cfg \\\n  --profile production\n\n# Generate compliance reports\npodman run --rm -v $(pwd):/workspace:ro \\\n  -v $(pwd)/reports:/reports \\\n  my-company/aider-lint-fixer:rhel9 \\\n  --output-format junit \\\n  --output-file /reports/compliance.xml\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#red-hat-certified-content","title":"Red Hat Certified Content","text":"<pre><code># Validate against Red Hat certification requirements\npodman run --rm -v $(pwd):/workspace:ro \\\n  my-company/aider-lint-fixer:rhel9 \\\n  --linters ansible-lint \\\n  --profile redhat-certified \\\n  --strict\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#multi-architecture-support","title":"Multi-Architecture Support","text":"<pre><code># Build for multiple architectures\npodman build --platform linux/amd64,linux/arm64 \\\n  -f Dockerfile.rhel9 \\\n  -t my-company/aider-lint-fixer:rhel9-multi .\n\n# Run on ARM-based RHEL systems\npodman run --rm -v $(pwd):/workspace:ro \\\n  my-company/aider-lint-fixer:rhel9-multi\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#container-registry-integration","title":"Container Registry Integration","text":""},{"location":"how-to/red-hat-developer-guide/#red-hat-quay-integration","title":"Red Hat Quay Integration","text":"<pre><code># Login to Red Hat Quay\npodman login quay.io\n\n# Build and push to enterprise registry\n./scripts/containers/build-rhel9.sh \\\n  --registry quay.io \\\n  --name your-org/aider-lint-fixer \\\n  --tag v1.0-rhel9\n\npodman push quay.io/your-org/aider-lint-fixer:v1.0-rhel9\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#openshift-integration","title":"OpenShift Integration","text":"<pre><code># openshift-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: aider-lint-fixer\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: aider-lint-fixer\n  template:\n    metadata:\n      labels:\n        app: aider-lint-fixer\n    spec:\n      containers:\n      - name: aider-lint-fixer\n        image: quay.io/your-org/aider-lint-fixer:rhel9\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 1001\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#performance-optimization","title":"Performance Optimization","text":""},{"location":"how-to/red-hat-developer-guide/#rhel-10-advantages","title":"RHEL 10 Advantages","text":"<pre><code># Leverage RHEL 10 performance improvements\n./scripts/containers/build-rhel10.sh --validate\n\n# Compare performance between RHEL 9 and 10\ntime podman run --rm -v $(pwd):/workspace:ro \\\n  my-company/aider-lint-fixer:rhel9 --benchmark\n\ntime podman run --rm -v $(pwd):/workspace:ro \\\n  my-company/aider-lint-fixer:rhel10 --benchmark\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#resource-management","title":"Resource Management","text":"<pre><code># Set container resource limits\npodman run --rm \\\n  --memory=1g \\\n  --cpus=2 \\\n  -v $(pwd):/workspace:ro \\\n  my-company/aider-lint-fixer:rhel9\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#security-best-practices","title":"Security Best Practices","text":""},{"location":"how-to/red-hat-developer-guide/#container-security","title":"Container Security","text":"<pre><code># Run security scan on your container\npodman run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n  aquasec/trivy:latest image my-company/aider-lint-fixer:rhel9\n\n# Use rootless containers (default with Podman)\npodman run --rm --user 1001 \\\n  -v $(pwd):/workspace:ro \\\n  my-company/aider-lint-fixer:rhel9\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#credential-management","title":"Credential Management","text":"<pre><code># Use Red Hat Vault for secrets\nexport RHEL_USERNAME=$(vault kv get -field=username secret/rhel-subscription)\nexport RHEL_PASSWORD=$(vault kv get -field=password secret/rhel-subscription)\n\n# Build with secure credentials\n./scripts/containers/build-rhel9.sh\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#network-security","title":"Network Security","text":"<pre><code># Run with restricted network access\npodman run --rm --network=none \\\n  -v $(pwd):/workspace:ro \\\n  my-company/aider-lint-fixer:rhel9 \\\n  --offline-mode\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"how-to/red-hat-developer-guide/#common-rhel-issues","title":"Common RHEL Issues","text":"<p>Subscription Problems: <pre><code># Check subscription status\nsubscription-manager status\n\n# Refresh subscriptions\nsudo subscription-manager refresh\n\n# Re-register if needed\nsudo subscription-manager unregister\nsudo subscription-manager register --username=your-username\n</code></pre></p> <p>SELinux Denials: <pre><code># Check for SELinux denials\nsudo ausearch -m AVC -ts recent\n\n# Generate SELinux policy if needed\nsudo audit2allow -a -M aider-lint-fixer\nsudo semodule -i aider-lint-fixer.pp\n</code></pre></p> <p>Podman Issues: <pre><code># Reset Podman if needed\npodman system reset\n\n# Check Podman configuration\npodman info\n\n# Update Podman\nsudo dnf update -y podman\n</code></pre></p>"},{"location":"how-to/red-hat-developer-guide/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"how-to/red-hat-developer-guide/#red-hat-openshift-pipelines","title":"Red Hat OpenShift Pipelines","text":"<pre><code># .tekton/pipeline.yaml\napiVersion: tekton.dev/v1beta1\nkind: Pipeline\nmetadata:\n  name: aider-lint-pipeline\nspec:\n  tasks:\n  - name: lint-ansible\n    taskRef:\n      name: aider-lint-task\n    params:\n    - name: image\n      value: quay.io/your-org/aider-lint-fixer:rhel9\n    - name: linters\n      value: \"ansible-lint,flake8\"\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#red-hat-satellite-integration","title":"Red Hat Satellite Integration","text":"<pre><code># Register with Satellite\nsudo subscription-manager register \\\n  --org=\"your-org\" \\\n  --activationkey=\"your-key\" \\\n  --serverurl=https://satellite.company.com\n\n# Use Satellite-managed repositories\nsudo dnf config-manager --enable satellite-tools-6.11-for-rhel-9-x86_64-rpms\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#enterprise-features","title":"Enterprise Features","text":""},{"location":"how-to/red-hat-developer-guide/#compliance-reporting","title":"Compliance Reporting","text":"<pre><code># Generate SCAP compliance reports\npodman run --rm -v $(pwd):/workspace:ro \\\n  -v $(pwd)/compliance:/compliance \\\n  my-company/aider-lint-fixer:rhel9 \\\n  --compliance-scan \\\n  --output-dir /compliance\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#audit-logging","title":"Audit Logging","text":"<pre><code># Enable audit logging\npodman run --rm \\\n  --log-driver=journald \\\n  --log-opt tag=\"aider-lint-fixer\" \\\n  -v $(pwd):/workspace:ro \\\n  my-company/aider-lint-fixer:rhel9\n\n# View logs\njournalctl -t aider-lint-fixer\n</code></pre>"},{"location":"how-to/red-hat-developer-guide/#best-practices","title":"Best Practices","text":""},{"location":"how-to/red-hat-developer-guide/#container-management","title":"Container Management","text":"<ul> <li>Use Podman for rootless, daemonless containers</li> <li>Leverage Red Hat UBI base images for compliance</li> <li>Implement proper resource limits and security contexts</li> <li>Use Red Hat Quay for enterprise container registry</li> </ul>"},{"location":"how-to/red-hat-developer-guide/#development-workflow","title":"Development Workflow","text":"<ul> <li>Build RHEL-specific containers with your subscription</li> <li>Use version-specific containers (RHEL 9 vs RHEL 10)</li> <li>Implement proper SELinux labeling for volumes</li> <li>Follow Red Hat security guidelines</li> </ul>"},{"location":"how-to/red-hat-developer-guide/#performance","title":"Performance","text":"<ul> <li>Prefer RHEL 10 for better performance and security</li> <li>Use multi-stage builds to minimize image size</li> <li>Implement proper caching strategies</li> <li>Monitor resource usage with Red Hat Insights</li> </ul>"},{"location":"how-to/red-hat-developer-guide/#related-documentation","title":"Related Documentation","text":"<ul> <li>RHEL Container Builds</li> <li>Container Architecture</li> <li>ADR 0009: RHEL Container Build Requirements</li> <li>Production Deployment</li> </ul>"},{"location":"how-to/red-hat-developer-guide/#support-resources","title":"Support Resources","text":"<ul> <li>Red Hat Customer Portal: https://access.redhat.com</li> <li>Red Hat Developer Program: https://developers.redhat.com</li> <li>OpenShift Documentation: https://docs.openshift.com</li> <li>Podman Documentation: https://docs.podman.io</li> </ul>"},{"location":"how-to/rhel-container-builds/","title":"RHEL Container Builds","text":"<p>This guide provides step-by-step instructions for building aider-lint-fixer containers for RHEL 9 and RHEL 10 environments using your Red Hat subscription.</p>"},{"location":"how-to/rhel-container-builds/#prerequisites","title":"Prerequisites","text":"<ul> <li>Active Red Hat subscription</li> <li>Podman (recommended) or Docker installed</li> <li>Network access to Red Hat repositories</li> <li>RHEL subscription credentials</li> </ul>"},{"location":"how-to/rhel-container-builds/#quick-start","title":"Quick Start","text":"<p>Note: These scripts use Podman by default (RHEL's native container tool). Docker is supported as fallback.</p>"},{"location":"how-to/rhel-container-builds/#rhel-9-container","title":"RHEL 9 Container","text":"<pre><code># Interactive build (prompts for credentials)\n./scripts/containers/build-rhel9.sh\n\n# Build with validation\n./scripts/containers/build-rhel9.sh --validate\n</code></pre>"},{"location":"how-to/rhel-container-builds/#rhel-10-container","title":"RHEL 10 Container","text":"<pre><code># Interactive build with security scanning\n./scripts/containers/build-rhel10.sh --validate --security-scan\n\n# Build for enterprise registry\n./scripts/containers/build-rhel10.sh \\\n  --registry quay.io \\\n  --name my-company/aider-lint-fixer \\\n  --tag v2.0-rhel10\n</code></pre>"},{"location":"how-to/rhel-container-builds/#build-script-options","title":"Build Script Options","text":""},{"location":"how-to/rhel-container-builds/#common-options","title":"Common Options","text":"Option Description Example <code>--name</code> Container image name <code>--name my-company/aider-lint-fixer</code> <code>--tag</code> Container image tag <code>--tag v1.0-rhel9</code> <code>--registry</code> Container registry URL <code>--registry quay.io</code> <code>--validate</code> Validate built image <code>--validate</code> <code>--dry-run</code> Show build command without executing <code>--dry-run</code>"},{"location":"how-to/rhel-container-builds/#rhel-9-specific-options","title":"RHEL 9 Specific Options","text":"<pre><code>./scripts/containers/build-rhel9.sh --help\n\nOptions:\n  -n, --name NAME         Container image name\n  -t, --tag TAG          Container image tag (default: rhel9)\n  -r, --registry URL     Container registry URL\n  -u, --username USER    RHEL subscription username\n  -p, --password PASS    RHEL subscription password\n  -f, --file FILE        Build args file\n  --no-cache             Build without using cache\n  --dry-run              Show build command without executing\n  --validate             Validate built image functionality\n</code></pre>"},{"location":"how-to/rhel-container-builds/#rhel-10-specific-options","title":"RHEL 10 Specific Options","text":"<pre><code>./scripts/containers/build-rhel10.sh --help\n\nAdditional RHEL 10 options:\n  --security-scan        Run security scan on built image\n</code></pre>"},{"location":"how-to/rhel-container-builds/#credential-management","title":"Credential Management","text":""},{"location":"how-to/rhel-container-builds/#environment-variables","title":"Environment Variables","text":"<pre><code>export RHEL_USERNAME=your-username\nexport RHEL_PASSWORD=your-password\n./scripts/containers/build-rhel9.sh\n</code></pre>"},{"location":"how-to/rhel-container-builds/#build-args-file","title":"Build Args File","text":"<pre><code># Create secure credential file\necho \"RHEL_USERNAME=your-username\" &gt; .build-args.rhel9\necho \"RHEL_PASSWORD=your-password\" &gt;&gt; .build-args.rhel9\nchmod 600 .build-args.rhel9\n\n# Use credential file\n./scripts/containers/build-rhel9.sh --file .build-args.rhel9\n</code></pre>"},{"location":"how-to/rhel-container-builds/#interactive-prompting","title":"Interactive Prompting","text":"<pre><code># Script will prompt for credentials\n./scripts/containers/build-rhel9.sh\n# Enter RHEL subscription username: your-username\n# Enter RHEL subscription password: [hidden]\n</code></pre>"},{"location":"how-to/rhel-container-builds/#manual-build-process","title":"Manual Build Process","text":""},{"location":"how-to/rhel-container-builds/#rhel-9-manual-build","title":"RHEL 9 Manual Build","text":"<pre><code># Using Podman (recommended)\npodman build \\\n  --build-arg RHEL_USERNAME=your-username \\\n  --build-arg RHEL_PASSWORD=your-password \\\n  --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \\\n  --build-arg VCS_REF=$(git rev-parse --short HEAD) \\\n  -f Dockerfile.rhel9 \\\n  -t my-company/aider-lint-fixer:rhel9 .\n\n# Using Docker (fallback)\ndocker build \\\n  --build-arg RHEL_USERNAME=your-username \\\n  --build-arg RHEL_PASSWORD=your-password \\\n  --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \\\n  --build-arg VCS_REF=$(git rev-parse --short HEAD) \\\n  -f Dockerfile.rhel9 \\\n  -t my-company/aider-lint-fixer:rhel9 .\n</code></pre>"},{"location":"how-to/rhel-container-builds/#rhel-10-manual-build","title":"RHEL 10 Manual Build","text":"<pre><code># Using Podman (recommended)\npodman build \\\n  --build-arg RHEL_USERNAME=your-username \\\n  --build-arg RHEL_PASSWORD=your-password \\\n  --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \\\n  --build-arg VCS_REF=$(git rev-parse --short HEAD) \\\n  --label org.opencontainers.image.title=aider-lint-fixer \\\n  --label org.opencontainers.image.description=\"AI-powered lint fixer for RHEL 10\" \\\n  -f Dockerfile.rhel10 \\\n  -t my-company/aider-lint-fixer:rhel10 .\n\n# Using Docker (fallback)\ndocker build \\\n  --build-arg RHEL_USERNAME=your-username \\\n  --build-arg RHEL_PASSWORD=your-password \\\n  --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \\\n  --build-arg VCS_REF=$(git rev-parse --short HEAD) \\\n  --label org.opencontainers.image.title=aider-lint-fixer \\\n  --label org.opencontainers.image.description=\"AI-powered lint fixer for RHEL 10\" \\\n  -f Dockerfile.rhel10 \\\n  -t my-company/aider-lint-fixer:rhel10 .\n</code></pre>"},{"location":"how-to/rhel-container-builds/#validation-and-testing","title":"Validation and Testing","text":""},{"location":"how-to/rhel-container-builds/#built-in-validation","title":"Built-in Validation","text":"<pre><code># RHEL 9 validation\n./scripts/containers/build-rhel9.sh --validate\n\n# RHEL 10 validation with security scan\n./scripts/containers/build-rhel10.sh --validate --security-scan\n</code></pre>"},{"location":"how-to/rhel-container-builds/#manual-testing","title":"Manual Testing","text":"<pre><code># Test basic functionality (using Podman)\npodman run --rm my-company/aider-lint-fixer:rhel9 --version\n\n# Test ansible-core version\npodman run --rm my-company/aider-lint-fixer:rhel9 \\\n  sh -c \"python3 -c 'import ansible; print(ansible.__version__)'\"\n\n# Test user permissions\npodman run --rm my-company/aider-lint-fixer:rhel9 id\n\n# Using Docker (fallback)\ndocker run --rm my-company/aider-lint-fixer:rhel9 --version\n</code></pre>"},{"location":"how-to/rhel-container-builds/#expected-validation-results","title":"Expected Validation Results","text":"<p>RHEL 9 Container: - ansible-core version: 2.14.x - Python version: 3.9.x - User ID: 1001 (non-root) - RHEL version: Red Hat Enterprise Linux release 9</p> <p>RHEL 10 Container: - ansible-core version: 2.16.x or higher - Python version: 3.12.x - User ID: 1001 (non-root) - RHEL version: Red Hat Enterprise Linux release 10</p>"},{"location":"how-to/rhel-container-builds/#security-scanning","title":"Security Scanning","text":""},{"location":"how-to/rhel-container-builds/#trivy-security-scan","title":"Trivy Security Scan","text":"<pre><code># Install Trivy\ncurl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n\n# Run security scan\n./scripts/containers/build-rhel10.sh --security-scan\n</code></pre>"},{"location":"how-to/rhel-container-builds/#grype-security-scan","title":"Grype Security Scan","text":"<pre><code># Install Grype\ncurl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin\n\n# Run security scan\n./scripts/containers/build-rhel10.sh --security-scan\n</code></pre>"},{"location":"how-to/rhel-container-builds/#enterprise-registry-integration","title":"Enterprise Registry Integration","text":""},{"location":"how-to/rhel-container-builds/#quayio-integration","title":"Quay.io Integration","text":"<pre><code># Build and push to Quay.io\n./scripts/containers/build-rhel9.sh \\\n  --registry quay.io \\\n  --name my-company/aider-lint-fixer \\\n  --tag v1.0-rhel9\n\n# Push to registry (using Podman)\npodman push quay.io/my-company/aider-lint-fixer:v1.0-rhel9\n\n# Push to registry (using Docker)\ndocker push quay.io/my-company/aider-lint-fixer:v1.0-rhel9\n</code></pre>"},{"location":"how-to/rhel-container-builds/#harbor-registry","title":"Harbor Registry","text":"<pre><code># Build for Harbor registry\n./scripts/containers/build-rhel10.sh \\\n  --registry harbor.company.com \\\n  --name infrastructure/aider-lint-fixer \\\n  --tag v2.0-rhel10\n\n# Push with Podman\npodman push harbor.company.com/infrastructure/aider-lint-fixer:v2.0-rhel10\n</code></pre>"},{"location":"how-to/rhel-container-builds/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"how-to/rhel-container-builds/#jenkins-pipeline","title":"Jenkins Pipeline","text":"<pre><code>pipeline {\n    agent any\n    environment {\n        RHEL_USERNAME = credentials('rhel-username')\n        RHEL_PASSWORD = credentials('rhel-password')\n    }\n    stages {\n        stage('Build RHEL Container') {\n            steps {\n                sh './scripts/containers/build-rhel9.sh --validate'\n            }\n        }\n        stage('Security Scan') {\n            steps {\n                sh './scripts/containers/build-rhel10.sh --security-scan'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"how-to/rhel-container-builds/#gitlab-ci","title":"GitLab CI","text":"<pre><code>build-rhel-container:\n  stage: build\n  script:\n    - ./scripts/containers/build-rhel9.sh --validate\n  variables:\n    RHEL_USERNAME: $RHEL_USERNAME\n    RHEL_PASSWORD: $RHEL_PASSWORD\n  only:\n    - main\n</code></pre>"},{"location":"how-to/rhel-container-builds/#troubleshooting","title":"Troubleshooting","text":""},{"location":"how-to/rhel-container-builds/#subscription-issues","title":"Subscription Issues","text":"<p>Error: \"This system is not registered\" <pre><code># Verify credentials\nsubscription-manager status\n\n# Manual registration test\nsubscription-manager register --username=your-username --password=your-password\n</code></pre></p> <p>Error: \"No matches found for ansible-core\" <pre><code># Check repository access\ndnf repolist\nsubscription-manager repos --list-enabled\n</code></pre></p>"},{"location":"how-to/rhel-container-builds/#build-failures","title":"Build Failures","text":"<p>Podman/Docker build fails with permission denied <pre><code># For Podman (rootless by default)\npodman system info\n\n# For Docker - check daemon and permissions\nsudo systemctl status docker\nsudo usermod -aG docker $USER\nnewgrp docker\n</code></pre></p> <p>Container fails to start <pre><code># Check container logs (Podman)\npodman logs &lt;container-id&gt;\n\n# Check container logs (Docker)\ndocker logs &lt;container-id&gt;\n\n# Debug interactively (Podman)\npodman run -it --entrypoint /bin/bash my-company/aider-lint-fixer:rhel9\n\n# Debug interactively (Docker)\ndocker run -it --entrypoint /bin/bash my-company/aider-lint-fixer:rhel9\n</code></pre></p>"},{"location":"how-to/rhel-container-builds/#network-issues","title":"Network Issues","text":"<p>Cannot reach Red Hat repositories <pre><code># Test network connectivity\ncurl -I https://cdn.redhat.com\n\n# Check proxy settings\necho $HTTP_PROXY\necho $HTTPS_PROXY\n</code></pre></p>"},{"location":"how-to/rhel-container-builds/#best-practices","title":"Best Practices","text":""},{"location":"how-to/rhel-container-builds/#security","title":"Security","text":"<ul> <li>Use build args files instead of command-line credentials</li> <li>Scan containers for vulnerabilities before deployment</li> <li>Regularly update base images and dependencies</li> <li>Use private registries for enterprise containers</li> <li>Prefer Podman for rootless container operations</li> </ul>"},{"location":"how-to/rhel-container-builds/#performance","title":"Performance","text":"<ul> <li>Use <code>--no-cache</code> for clean builds in CI/CD</li> <li>Leverage Podman/Docker layer caching for development</li> <li>Use multi-stage builds for smaller production images</li> <li>Podman offers better performance for rootless operations</li> </ul>"},{"location":"how-to/rhel-container-builds/#maintenance","title":"Maintenance","text":"<ul> <li>Automate container builds in CI/CD pipelines</li> <li>Monitor Red Hat security advisories</li> <li>Update containers when new RHEL versions are released</li> <li>Test containers in staging before production deployment</li> <li>Use Podman for better RHEL ecosystem integration</li> </ul>"},{"location":"how-to/rhel-container-builds/#container-runtime-selection","title":"Container Runtime Selection","text":"<ul> <li>Podman (Recommended): Native RHEL container tool, rootless by default, better security</li> <li>Docker (Fallback): Widely supported, requires daemon, root privileges typically needed</li> </ul>"},{"location":"how-to/rhel-container-builds/#related-documentation","title":"Related Documentation","text":"<ul> <li>Container Deployment Tutorial</li> <li>Container Architecture</li> <li>Production Deployment</li> </ul>"},{"location":"how-to/run-tests/","title":"Run Tests","text":"<p>This guide covers how to run tests for aider-lint-fixer in various scenarios.</p>"},{"location":"how-to/run-tests/#quick-start","title":"Quick Start","text":""},{"location":"how-to/run-tests/#run-all-tests","title":"Run All Tests","text":"<pre><code># Activate virtual environment\nsource venv/bin/activate\n\n# Run all tests\npytest\n</code></pre>"},{"location":"how-to/run-tests/#run-with-coverage","title":"Run with Coverage","text":"<pre><code>pytest --cov=aider_lint_fixer --cov-report=html\n</code></pre>"},{"location":"how-to/run-tests/#test-categories","title":"Test Categories","text":""},{"location":"how-to/run-tests/#unit-tests","title":"Unit Tests","text":"<p>Test individual components:</p> <pre><code>pytest tests/unit/\n</code></pre>"},{"location":"how-to/run-tests/#integration-tests","title":"Integration Tests","text":"<p>Test component interactions:</p> <pre><code>pytest tests/integration/\n</code></pre>"},{"location":"how-to/run-tests/#end-to-end-tests","title":"End-to-End Tests","text":"<p>Test full workflows:</p> <pre><code>pytest tests/e2e/\n</code></pre>"},{"location":"how-to/run-tests/#test-specific-components","title":"Test Specific Components","text":""},{"location":"how-to/run-tests/#linter-tests","title":"Linter Tests","text":"<pre><code>pytest tests/test_lint_runner.py\n</code></pre>"},{"location":"how-to/run-tests/#configuration-tests","title":"Configuration Tests","text":"<pre><code>pytest tests/test_config_manager.py\n</code></pre>"},{"location":"how-to/run-tests/#error-analysis-tests","title":"Error Analysis Tests","text":"<pre><code>pytest tests/test_error_analyzer.py\n</code></pre>"},{"location":"how-to/run-tests/#running-tests-in-different-environments","title":"Running Tests in Different Environments","text":""},{"location":"how-to/run-tests/#local-development","title":"Local Development","text":"<pre><code># Run with verbose output\npytest -v\n\n# Run specific test\npytest tests/test_main.py::test_main_function\n\n# Run with debugging\npytest --pdb\n</code></pre>"},{"location":"how-to/run-tests/#docker-environment","title":"Docker Environment","text":"<pre><code># Build test image\ndocker build -t aider-lint-fixer-test .\n\n# Run tests in container\ndocker run --rm aider-lint-fixer-test pytest\n</code></pre>"},{"location":"how-to/run-tests/#cicd-environment","title":"CI/CD Environment","text":"<pre><code># GitHub Actions\npytest --junitxml=test-results.xml --cov=aider_lint_fixer\n\n# Generate coverage report\ncoverage xml\n</code></pre>"},{"location":"how-to/run-tests/#test-configuration","title":"Test Configuration","text":""},{"location":"how-to/run-tests/#pytestini","title":"pytest.ini","text":"<pre><code>[tool:pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\naddopts = -v --tb=short\nmarkers =\n    slow: marks tests as slow\n    integration: marks tests as integration tests\n    unit: marks tests as unit tests\n</code></pre>"},{"location":"how-to/run-tests/#running-specific-test-types","title":"Running Specific Test Types","text":"<pre><code># Run only unit tests\npytest -m unit\n\n# Skip slow tests\npytest -m \"not slow\"\n\n# Run integration tests\npytest -m integration\n</code></pre>"},{"location":"how-to/run-tests/#test-data-and-fixtures","title":"Test Data and Fixtures","text":""},{"location":"how-to/run-tests/#using-test-data","title":"Using Test Data","text":"<pre><code># Tests with sample repositories\npytest tests/test_with_sample_repos.py\n</code></pre>"},{"location":"how-to/run-tests/#temporary-test-environments","title":"Temporary Test Environments","text":"<pre><code># Create isolated test environment\npytest --tmp-path-retention-count=3\n</code></pre>"},{"location":"how-to/run-tests/#performance-testing","title":"Performance Testing","text":""},{"location":"how-to/run-tests/#benchmark-tests","title":"Benchmark Tests","text":"<pre><code>pytest tests/benchmark/ --benchmark-only\n</code></pre>"},{"location":"how-to/run-tests/#memory-usage-tests","title":"Memory Usage Tests","text":"<pre><code>pytest tests/test_memory_usage.py --memory-profiler\n</code></pre>"},{"location":"how-to/run-tests/#debugging-test-failures","title":"Debugging Test Failures","text":""},{"location":"how-to/run-tests/#verbose-output","title":"Verbose Output","text":"<pre><code>pytest -vvv --tb=long\n</code></pre>"},{"location":"how-to/run-tests/#drop-into-debugger","title":"Drop into Debugger","text":"<pre><code>pytest --pdb --pdb-trace\n</code></pre>"},{"location":"how-to/run-tests/#capture-output","title":"Capture Output","text":"<pre><code>pytest -s  # Don't capture stdout/stderr\n</code></pre>"},{"location":"how-to/run-tests/#test-reports","title":"Test Reports","text":""},{"location":"how-to/run-tests/#html-coverage-report","title":"HTML Coverage Report","text":"<pre><code>pytest --cov=aider_lint_fixer --cov-report=html\nopen htmlcov/index.html\n</code></pre>"},{"location":"how-to/run-tests/#xml-reports-for-ci","title":"XML Reports for CI","text":"<pre><code>pytest --junitxml=test-results.xml --cov-report=xml\n</code></pre>"},{"location":"how-to/run-tests/#common-test-scenarios","title":"Common Test Scenarios","text":""},{"location":"how-to/run-tests/#testing-linter-integration","title":"Testing Linter Integration","text":"<pre><code>pytest tests/linters/\n</code></pre>"},{"location":"how-to/run-tests/#testing-error-handling","title":"Testing Error Handling","text":"<pre><code>pytest tests/test_error_handling.py\n</code></pre>"},{"location":"how-to/run-tests/#testing-configuration-loading","title":"Testing Configuration Loading","text":"<pre><code>pytest tests/test_config/\n</code></pre>"},{"location":"how-to/run-tests/#troubleshooting","title":"Troubleshooting","text":""},{"location":"how-to/run-tests/#common-issues","title":"Common Issues","text":"<ol> <li>Import errors: Check PYTHONPATH and virtual environment</li> <li>Missing dependencies: Run <code>pip install -r requirements-test.txt</code></li> <li>Permission errors: Check file permissions for test data</li> <li>Timeout issues: Increase timeout for slow tests</li> </ol>"},{"location":"how-to/run-tests/#environment-issues","title":"Environment Issues","text":"<pre><code># Reset test environment\nrm -rf .pytest_cache/\npip install -e . --force-reinstall\n</code></pre>"},{"location":"how-to/run-tests/#next-steps","title":"Next Steps","text":"<ul> <li>Monitor Performance</li> <li>Setup Development Environment</li> <li>Security Best Practices</li> </ul>"},{"location":"how-to/security-best-practices/","title":"Security Best Practices","text":"<p>This guide outlines security best practices when using aider-lint-fixer in development and production environments.</p>"},{"location":"how-to/security-best-practices/#code-security","title":"Code Security","text":""},{"location":"how-to/security-best-practices/#secure-coding-practices","title":"Secure Coding Practices","text":"<ol> <li>Input Validation</li> <li>Validate all external inputs</li> <li>Sanitize file paths and names</li> <li> <p>Check file permissions before processing</p> </li> <li> <p>Error Handling</p> </li> <li>Don't expose sensitive information in error messages</li> <li>Log security events appropriately</li> <li>Implement proper exception handling</li> </ol>"},{"location":"how-to/security-best-practices/#static-analysis-security","title":"Static Analysis Security","text":"<pre><code># Run security-focused linters\npython -m aider_lint_fixer --enable-security-checks\n\n# Use bandit for security analysis\npip install bandit\nbandit -r aider_lint_fixer/\n</code></pre>"},{"location":"how-to/security-best-practices/#api-key-security","title":"API Key Security","text":""},{"location":"how-to/security-best-practices/#environment-variables","title":"Environment Variables","text":"<pre><code># Never commit API keys to repository\nexport OPENAI_API_KEY=your_key_here\nexport ANTHROPIC_API_KEY=your_key_here\n\n# Use .env files (add to .gitignore)\necho \"OPENAI_API_KEY=your_key\" &gt;&gt; .env\necho \".env\" &gt;&gt; .gitignore\n</code></pre>"},{"location":"how-to/security-best-practices/#key-rotation","title":"Key Rotation","text":"<pre><code># Regularly rotate API keys\n# Update environment variables\n# Test key validity\npython -c \"import openai; print('Key valid')\"\n</code></pre>"},{"location":"how-to/security-best-practices/#file-system-security","title":"File System Security","text":""},{"location":"how-to/security-best-practices/#secure-file-handling","title":"Secure File Handling","text":"<ol> <li> <p>Path Traversal Prevention <pre><code>import os.path\n\n# Validate paths\nsafe_path = os.path.abspath(user_path)\nif not safe_path.startswith(allowed_directory):\n    raise SecurityError(\"Path traversal attempt\")\n</code></pre></p> </li> <li> <p>File Permissions <pre><code># Set restrictive permissions\nchmod 600 config/secrets.yml\nchmod 755 scripts/\n</code></pre></p> </li> </ol>"},{"location":"how-to/security-best-practices/#temporary-files","title":"Temporary Files","text":"<pre><code>import tempfile\nimport os\n\n# Use secure temporary files\nwith tempfile.NamedTemporaryFile(delete=True) as tmp:\n    # Process file securely\n    pass\n</code></pre>"},{"location":"how-to/security-best-practices/#network-security","title":"Network Security","text":""},{"location":"how-to/security-best-practices/#https-usage","title":"HTTPS Usage","text":"<pre><code># Always use HTTPS for API calls\napi_base = \"https://api.openai.com/v1\"\n# Never: http://api.openai.com/v1\n</code></pre>"},{"location":"how-to/security-best-practices/#certificate-validation","title":"Certificate Validation","text":"<pre><code>import requests\n\n# Enable SSL verification\nresponse = requests.get(url, verify=True)\n</code></pre>"},{"location":"how-to/security-best-practices/#container-security","title":"Container Security","text":""},{"location":"how-to/security-best-practices/#docker-security","title":"Docker Security","text":"<pre><code># Use non-root user\nFROM python:3.11-slim\nRUN adduser --disabled-password --gecos '' appuser\nUSER appuser\n\n# Minimal base image\nFROM python:3.11-alpine\n\n# Security scanning\nRUN apk add --no-cache security-scanner\n</code></pre>"},{"location":"how-to/security-best-practices/#container-scanning","title":"Container Scanning","text":"<pre><code># Scan for vulnerabilities\ndocker scan aider-lint-fixer:latest\n\n# Use security-focused base images\nFROM gcr.io/distroless/python3\n</code></pre>"},{"location":"how-to/security-best-practices/#cicd-security","title":"CI/CD Security","text":""},{"location":"how-to/security-best-practices/#github-actions-security","title":"GitHub Actions Security","text":"<pre><code>name: Secure CI\non: [push, pull_request]\njobs:\n  security-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Security Scan\n        uses: securecodewarrior/github-action-add-sarif@v1\n\n      - name: Secret Scanning\n        run: |\n          pip install detect-secrets\n          detect-secrets scan --all-files\n</code></pre>"},{"location":"how-to/security-best-practices/#secret-management","title":"Secret Management","text":"<pre><code># Use GitHub Secrets\nenv:\n  API_KEY: ${{ secrets.OPENAI_API_KEY }}\n\n# Mask sensitive values\nrun: |\n  echo \"::add-mask::$API_KEY\"\n</code></pre>"},{"location":"how-to/security-best-practices/#dependency-security","title":"Dependency Security","text":""},{"location":"how-to/security-best-practices/#vulnerability-scanning","title":"Vulnerability Scanning","text":"<pre><code># Scan dependencies\npip install safety\nsafety check\n\n# Check for known vulnerabilities\npip-audit\n</code></pre>"},{"location":"how-to/security-best-practices/#dependency-pinning","title":"Dependency Pinning","text":"<pre><code># requirements.txt - pin versions\nrequests==2.28.1\npydantic==1.10.2\nclick==8.1.3\n</code></pre>"},{"location":"how-to/security-best-practices/#regular-updates","title":"Regular Updates","text":"<pre><code># Update dependencies regularly\npip list --outdated\npip install --upgrade package_name\n\n# Use dependabot for automated updates\n</code></pre>"},{"location":"how-to/security-best-practices/#configuration-security","title":"Configuration Security","text":""},{"location":"how-to/security-best-practices/#secure-configuration","title":"Secure Configuration","text":"<pre><code># config/security.yml\nsecurity:\n  enable_audit_logging: true\n  max_file_size: 10MB\n  allowed_extensions: ['.py', '.js', '.ts']\n  blocked_patterns:\n    - '*.secret'\n    - '*.key'\n</code></pre>"},{"location":"how-to/security-best-practices/#environment-specific-settings","title":"Environment-Specific Settings","text":"<pre><code># Different configs for different environments\nif os.getenv('ENV') == 'production':\n    DEBUG = False\n    ALLOWED_HOSTS = ['your-domain.com']\nelse:\n    DEBUG = True\n    ALLOWED_HOSTS = ['localhost', '127.0.0.1']\n</code></pre>"},{"location":"how-to/security-best-practices/#monitoring-and-auditing","title":"Monitoring and Auditing","text":""},{"location":"how-to/security-best-practices/#security-logging","title":"Security Logging","text":"<pre><code>import logging\n\n# Security event logging\nsecurity_logger = logging.getLogger('security')\nsecurity_logger.info(f\"User {user} accessed {resource}\")\n</code></pre>"},{"location":"how-to/security-best-practices/#audit-trails","title":"Audit Trails","text":"<pre><code># Enable audit logging\nexport AUDIT_LOG_ENABLED=true\nexport AUDIT_LOG_LEVEL=INFO\n</code></pre>"},{"location":"how-to/security-best-practices/#incident-response","title":"Incident Response","text":""},{"location":"how-to/security-best-practices/#security-incident-plan","title":"Security Incident Plan","text":"<ol> <li>Detection: Monitor for security events</li> <li>Containment: Isolate affected systems</li> <li>Eradication: Remove threats</li> <li>Recovery: Restore normal operations</li> <li>Lessons Learned: Document and improve</li> </ol>"},{"location":"how-to/security-best-practices/#emergency-procedures","title":"Emergency Procedures","text":"<pre><code># Revoke compromised keys immediately\n# Rotate all credentials\n# Review access logs\n# Update security measures\n</code></pre>"},{"location":"how-to/security-best-practices/#compliance","title":"Compliance","text":""},{"location":"how-to/security-best-practices/#data-protection","title":"Data Protection","text":"<ul> <li>Follow GDPR/CCPA requirements</li> <li>Implement data retention policies</li> <li>Secure data transmission</li> <li>Regular security assessments</li> </ul>"},{"location":"how-to/security-best-practices/#security-standards","title":"Security Standards","text":"<ul> <li>SOC 2 Type II compliance</li> <li>ISO 27001 guidelines</li> <li>OWASP security practices</li> <li>Industry-specific requirements</li> </ul>"},{"location":"how-to/security-best-practices/#regular-security-tasks","title":"Regular Security Tasks","text":""},{"location":"how-to/security-best-practices/#weekly","title":"Weekly","text":"<ul> <li>Review access logs</li> <li>Check for security updates</li> <li>Scan for new vulnerabilities</li> </ul>"},{"location":"how-to/security-best-practices/#monthly","title":"Monthly","text":"<ul> <li>Rotate API keys</li> <li>Update dependencies</li> <li>Security training review</li> </ul>"},{"location":"how-to/security-best-practices/#quarterly","title":"Quarterly","text":"<ul> <li>Full security audit</li> <li>Penetration testing</li> <li>Policy updates</li> <li>Risk assessment</li> </ul>"},{"location":"how-to/security-best-practices/#next-steps","title":"Next Steps","text":"<ul> <li>Monitor Performance</li> <li>Integrate with Aider</li> <li>Run Tests</li> </ul>"},{"location":"how-to/setup-development-environment/","title":"Setup Development Environment","text":"<p>This guide will help you set up your development environment for aider-lint-fixer.</p>"},{"location":"how-to/setup-development-environment/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>Git</li> <li>Virtual environment tool (venv)</li> </ul>"},{"location":"how-to/setup-development-environment/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/tosin2013/aider-lint-fixer.git\ncd aider-lint-fixer\n</code></pre>"},{"location":"how-to/setup-development-environment/#step-2-create-virtual-environment","title":"Step 2: Create Virtual Environment","text":"<pre><code>python3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre>"},{"location":"how-to/setup-development-environment/#step-3-install-dependencies","title":"Step 3: Install Dependencies","text":"<pre><code>pip install --upgrade pip\npip install -e .\npip install -r requirements-test.txt\n</code></pre>"},{"location":"how-to/setup-development-environment/#step-4-verify-installation","title":"Step 4: Verify Installation","text":"<pre><code>python -m aider_lint_fixer --help\n</code></pre>"},{"location":"how-to/setup-development-environment/#step-5-run-tests","title":"Step 5: Run Tests","text":"<pre><code>pytest\n</code></pre>"},{"location":"how-to/setup-development-environment/#development-tools","title":"Development Tools","text":""},{"location":"how-to/setup-development-environment/#code-quality","title":"Code Quality","text":"<ul> <li>Black: Code formatting</li> <li>isort: Import sorting</li> <li>mypy: Type checking</li> <li>flake8: Linting</li> </ul>"},{"location":"how-to/setup-development-environment/#testing","title":"Testing","text":"<ul> <li>pytest: Test framework</li> <li>coverage: Code coverage</li> </ul>"},{"location":"how-to/setup-development-environment/#next-steps","title":"Next Steps","text":"<ul> <li>Read the API Reference</li> <li>Check out How to Add a New Feature</li> <li>Learn about Running Tests</li> </ul>"},{"location":"reference/","title":"Reference","text":"<p>Information-oriented technical descriptions</p>"},{"location":"reference/#available-guides","title":"Available Guides","text":"<p>This section contains reference documentation following the Diataxis framework.</p> <p>Reference documentation is information-oriented: - Describe the machinery - Be accurate and complete - Focus on describing, not explaining - Structure content for finding information</p>"},{"location":"reference/#contents","title":"Contents","text":"<ul> <li>Example: api-documentation.md</li> </ul>"},{"location":"reference/api-documentation/","title":"Api Documentation","text":"<p>Technical reference documentation.</p>"},{"location":"reference/api-documentation/#overview","title":"Overview","text":"<p>This document provides complete reference information for...</p>"},{"location":"reference/api-documentation/#api-endpoints","title":"API Endpoints","text":""},{"location":"reference/api-documentation/#get-apiresource","title":"GET /api/resource","text":"<p>Retrieves...</p> <p>Parameters: - <code>param1</code> (string, required): Description - <code>param2</code> (number, optional): Description</p> <p>Response: <pre><code>{\n  \"field1\": \"value\",\n  \"field2\": 123\n}\n</code></pre></p>"},{"location":"reference/api-documentation/#post-apiresource","title":"POST /api/resource","text":"<p>Creates...</p>"},{"location":"reference/api-documentation/#configuration-options","title":"Configuration Options","text":"Option Type Default Description option1 string \"default\" Description of option1 option2 boolean false Description of option2"},{"location":"reference/api-documentation/#error-codes","title":"Error Codes","text":"Code Description Resolution E001 Error description How to fix E002 Error description How to fix"},{"location":"reference/api-reference/","title":"API Reference","text":"<p>Complete reference for documcp APIs.</p>"},{"location":"reference/api-reference/#core-apis","title":"Core APIs","text":""},{"location":"reference/api-reference/#initializeoptions","title":"initialize(options)","text":"<p>Initialize the application with the given options.</p> <p>Parameters: - <code>options</code> (Object): Configuration options   - <code>port</code> (number): Server port (default: 3000)   - <code>host</code> (string): Server host (default: 'localhost')   - <code>debug</code> (boolean): Enable debug mode (default: false)</p> <p>Returns: - <code>Application</code>: Application instance</p> <p>Example: <pre><code>const app = initialize({\n  port: 8080,\n  debug: true\n});\n</code></pre></p>"},{"location":"reference/api-reference/#start","title":"start()","text":"<p>Start the application server.</p> <p>Returns: - <code>Promise&lt;void&gt;</code>: Resolves when server is running</p> <p>Example: <pre><code>await app.start();\nconsole.log('Server running');\n</code></pre></p>"},{"location":"reference/api-reference/#stop","title":"stop()","text":"<p>Stop the application server.</p> <p>Returns: - <code>Promise&lt;void&gt;</code>: Resolves when server is stopped</p> <p>Example: <pre><code>await app.stop();\nconsole.log('Server stopped');\n</code></pre></p>"},{"location":"reference/api-reference/#events","title":"Events","text":""},{"location":"reference/api-reference/#ready","title":"'ready'","text":"<p>Emitted when the application is ready to accept connections.</p> <pre><code>app.on('ready', () =&gt; {\n  console.log('Application ready');\n});\n</code></pre>"},{"location":"reference/api-reference/#error","title":"'error'","text":"<p>Emitted when an error occurs.</p> <pre><code>app.on('error', (error) =&gt; {\n  console.error('Application error:', error);\n});\n</code></pre>"},{"location":"reference/api-reference/#error-codes","title":"Error Codes","text":"Code Description ERR_INVALID_CONFIG Invalid configuration provided ERR_PORT_IN_USE Specified port is already in use ERR_STARTUP_FAILED Application failed to start"},{"location":"reference/command-line-interface/","title":"Command Line Interface","text":"<p>Reference for documcp CLI commands.</p>"},{"location":"reference/command-line-interface/#global-options","title":"Global Options","text":"Option Description <code>--help, -h</code> Show help information <code>--version, -v</code> Show version number <code>--verbose</code> Enable verbose output <code>--quiet</code> Suppress non-error output"},{"location":"reference/command-line-interface/#commands","title":"Commands","text":""},{"location":"reference/command-line-interface/#start","title":"start","text":"<p>Start the application.</p> <pre><code>documcp start [options]\n</code></pre> <p>Options: - <code>--port, -p &lt;port&gt;</code>: Server port (default: 3000) - <code>--host, -h &lt;host&gt;</code>: Server host (default: localhost) - <code>--config, -c &lt;file&gt;</code>: Configuration file path</p>"},{"location":"reference/command-line-interface/#build","title":"build","text":"<p>Build the application for production.</p> <pre><code>documcp build [options]\n</code></pre> <p>Options: - <code>--output, -o &lt;dir&gt;</code>: Output directory (default: dist) - <code>--minify</code>: Minify output - <code>--sourcemap</code>: Generate source maps</p>"},{"location":"reference/command-line-interface/#test","title":"test","text":"<p>Run tests.</p> <pre><code>documcp test [options]\n</code></pre> <p>Options: - <code>--watch, -w</code>: Run in watch mode - <code>--coverage</code>: Generate coverage report - <code>--bail</code>: Stop on first test failure</p>"},{"location":"reference/command-line-interface/#lint","title":"lint","text":"<p>Run linting checks.</p> <pre><code>documcp lint [options]\n</code></pre> <p>Options: - <code>--fix</code>: Automatically fix issues - <code>--format &lt;format&gt;</code>: Output format (stylish, json, compact)</p>"},{"location":"reference/command-line-interface/#examples","title":"Examples","text":""},{"location":"reference/command-line-interface/#starting-with-custom-configuration","title":"Starting with custom configuration","text":"<pre><code>documcp start --config production.json --port 8080\n</code></pre>"},{"location":"reference/command-line-interface/#running-tests-with-coverage","title":"Running tests with coverage","text":"<pre><code>documcp test --coverage --watch\n</code></pre>"},{"location":"reference/command-line-interface/#building-for-production","title":"Building for production","text":"<pre><code>documcp build --minify --output ./production\n</code></pre>"},{"location":"reference/configuration-options/","title":"Configuration Reference","text":"<p>Complete guide to configuring documcp.</p>"},{"location":"reference/configuration-options/#configuration-file","title":"Configuration File","text":"<p>Configuration can be provided via: 1. Environment variables 2. Configuration file (config.json) 3. Command-line arguments</p>"},{"location":"reference/configuration-options/#configuration-options","title":"Configuration Options","text":""},{"location":"reference/configuration-options/#server-configuration","title":"Server Configuration","text":"Option Type Default Description <code>server.port</code> number 3000 Server port <code>server.host</code> string 'localhost' Server host <code>server.timeout</code> number 30000 Request timeout (ms)"},{"location":"reference/configuration-options/#database-configuration","title":"Database Configuration","text":"Option Type Default Description <code>database.host</code> string 'localhost' Database host <code>database.port</code> number 5432 Database port <code>database.name</code> string 'myapp' Database name <code>database.pool.min</code> number 2 Minimum pool connections <code>database.pool.max</code> number 10 Maximum pool connections"},{"location":"reference/configuration-options/#logging-configuration","title":"Logging Configuration","text":"Option Type Default Description <code>logging.level</code> string 'info' Log level (debug, info, warn, error) <code>logging.format</code> string 'json' Log format (json, text) <code>logging.destination</code> string 'stdout' Log destination"},{"location":"reference/configuration-options/#environment-variables","title":"Environment Variables","text":"<p>All configuration options can be set via environment variables:</p> <pre><code># Server\nPORT=8080\nHOST=0.0.0.0\n\n# Database\nDATABASE_URL=postgresql://user:pass@localhost:5432/myapp\n\n# Logging\nLOG_LEVEL=debug\n</code></pre>"},{"location":"reference/configuration-options/#configuration-file-example","title":"Configuration File Example","text":"<pre><code>{\n  \"server\": {\n    \"port\": 3000,\n    \"host\": \"localhost\"\n  },\n  \"database\": {\n    \"host\": \"localhost\",\n    \"port\": 5432,\n    \"name\": \"myapp\"\n  },\n  \"logging\": {\n    \"level\": \"info\",\n    \"format\": \"json\"\n  }\n}\n</code></pre>"},{"location":"reference/configuration-reference/","title":"Configuration Reference","text":"<p>This document provides comprehensive configuration options for aider-lint-fixer.</p>"},{"location":"reference/configuration-reference/#configuration-file-locations","title":"Configuration File Locations","text":"<p>Configuration files are loaded in the following order (later files override earlier ones):</p> <ol> <li>Default configuration (built-in)</li> <li>Global configuration: <code>~/.aider-lint-fixer.yml</code></li> <li>Project configuration: <code>[PROJECT_ROOT]/.aider-lint-fixer.yml</code></li> <li>Environment variables</li> <li>Command-line arguments</li> </ol>"},{"location":"reference/configuration-reference/#configuration-file-format","title":"Configuration File Format","text":"<p>Configuration files use YAML format. Here's a complete example:</p> <pre><code># LLM Configuration\nllm:\n  provider: \"deepseek\"  # Options: deepseek, openrouter, ollama\n  model: \"deepseek/deepseek-chat\"\n  fallback_providers:\n    - \"openrouter\"\n    - \"ollama\"\n  api_key: null  # Set via environment variables\n  api_base: null  # Optional API base URL\n\n# Linter Configuration\nlinters:\n  auto_detect: true\n  enabled:\n    - flake8\n    - pylint\n    - black\n    - isort\n    - mypy\n    - eslint\n    - prettier\n    - tslint\n    - golint\n    - gofmt\n    - govet\n    - rustfmt\n    - clippy\n  smart_selection_defaults:\n    development: true\n    ci: false\n    tutorial: true\n    production: false\n\n# Aider Configuration\naider:\n  auto_commit: false\n  backup_files: true\n  max_retries: 3\n  context_window: 8192\n\n# Project Settings\nproject:\n  exclude_patterns:\n    - \"*.min.js\"\n    - \"*.min.css\"\n    - \"node_modules/\"\n    - \"__pycache__/\"\n    - \".git/\"\n    - \".venv/\"\n    - \"venv/\"\n    - \"build/\"\n    - \"dist/\"\n    - \"target/\"\n  include_patterns:\n    - \"*.py\"\n    - \"*.js\"\n    - \"*.ts\"\n    - \"*.jsx\"\n    - \"*.tsx\"\n    - \"*.go\"\n    - \"*.rs\"\n    - \"*.java\"\n    - \"*.c\"\n    - \"*.cpp\"\n    - \"*.h\"\n    - \"*.hpp\"\n\n# Logging Configuration\nlogging:\n  level: \"INFO\"  # DEBUG, INFO, WARNING, ERROR, CRITICAL\n  file: \"aider-lint-fixer.log\"\n  max_size: \"10MB\"\n  backup_count: 5\n</code></pre>"},{"location":"reference/configuration-reference/#configuration-sections","title":"Configuration Sections","text":""},{"location":"reference/configuration-reference/#llm-configuration-llm","title":"LLM Configuration (<code>llm</code>)","text":"<p>Controls the Language Learning Model provider and settings.</p> Option Type Default Description <code>provider</code> string <code>\"deepseek\"</code> LLM provider to use <code>model</code> string <code>\"deepseek/deepseek-chat\"</code> Specific model to use <code>fallback_providers</code> list <code>[\"openrouter\", \"ollama\"]</code> Fallback providers if primary fails <code>api_key</code> string <code>null</code> API key (use environment variables) <code>api_base</code> string <code>null</code> Custom API base URL"},{"location":"reference/configuration-reference/#supported-providers","title":"Supported Providers","text":"<ul> <li>deepseek: DeepSeek AI models</li> <li>openrouter: OpenRouter API gateway</li> <li>ollama: Local Ollama models</li> </ul>"},{"location":"reference/configuration-reference/#linter-configuration-linters","title":"Linter Configuration (<code>linters</code>)","text":"<p>Controls which linters are enabled and how they're selected.</p> Option Type Default Description <code>auto_detect</code> boolean <code>true</code> Automatically detect project type and enable relevant linters <code>enabled</code> list See default list List of enabled linters <code>smart_selection_defaults</code> object See below Environment-specific defaults"},{"location":"reference/configuration-reference/#default-enabled-linters","title":"Default Enabled Linters","text":"<ul> <li>Python: flake8, pylint, black, isort, mypy</li> <li>JavaScript/TypeScript: eslint, prettier, tslint</li> <li>Go: golint, gofmt, govet</li> <li>Rust: rustfmt, clippy</li> </ul>"},{"location":"reference/configuration-reference/#smart-selection-defaults","title":"Smart Selection Defaults","text":"Environment Default Purpose <code>development</code> <code>true</code> Fast feedback during development <code>ci</code> <code>false</code> Comprehensive checking in CI <code>tutorial</code> <code>true</code> Always smart for tutorials <code>production</code> <code>false</code> Safety first in production"},{"location":"reference/configuration-reference/#aider-configuration-aider","title":"Aider Configuration (<code>aider</code>)","text":"<p>Controls aider.chat integration behavior.</p> Option Type Default Description <code>auto_commit</code> boolean <code>false</code> Automatically commit fixes <code>backup_files</code> boolean <code>true</code> Create backups before making changes <code>max_retries</code> integer <code>3</code> Maximum retries for aider operations <code>context_window</code> integer <code>8192</code> Context window size for AI model"},{"location":"reference/configuration-reference/#project-configuration-project","title":"Project Configuration (<code>project</code>)","text":"<p>Controls file inclusion and exclusion patterns.</p> Option Type Default Description <code>exclude_patterns</code> list See default list Patterns to exclude from processing <code>include_patterns</code> list See default list Patterns to include in processing"},{"location":"reference/configuration-reference/#logging-configuration-logging","title":"Logging Configuration (<code>logging</code>)","text":"<p>Controls logging behavior and output.</p> Option Type Default Description <code>level</code> string <code>\"INFO\"</code> Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL) <code>file</code> string <code>\"aider-lint-fixer.log\"</code> Log file path <code>max_size</code> string <code>\"10MB\"</code> Maximum log file size <code>backup_count</code> integer <code>5</code> Number of backup log files to keep"},{"location":"reference/configuration-reference/#environment-variables","title":"Environment Variables","text":"<p>Configuration can be overridden using environment variables:</p>"},{"location":"reference/configuration-reference/#llm-environment-variables","title":"LLM Environment Variables","text":"Variable Description Example <code>AIDER_LLM_PROVIDER</code> Override LLM provider <code>deepseek</code> <code>AIDER_LLM_MODEL</code> Override LLM model <code>deepseek/deepseek-chat</code> <code>OLLAMA_API_BASE</code> Ollama API base URL <code>http://localhost:11434</code>"},{"location":"reference/configuration-reference/#api-key-environment-variables","title":"API Key Environment Variables","text":"Variable Description <code>DEEPSEEK_API_KEY</code> DeepSeek API key <code>OPENAI_API_KEY</code> OpenAI API key <code>ANTHROPIC_API_KEY</code> Anthropic Claude API key <code>OPENROUTER_API_KEY</code> OpenRouter API key"},{"location":"reference/configuration-reference/#aider-environment-variables","title":"Aider Environment Variables","text":"Variable Description Example <code>AIDER_AUTO_COMMIT</code> Auto-commit behavior <code>true</code> <code>AIDER_MAX_RETRIES</code> Maximum retries <code>5</code>"},{"location":"reference/configuration-reference/#logging-environment-variables","title":"Logging Environment Variables","text":"Variable Description Example <code>AIDER_LOG_LEVEL</code> Log level <code>DEBUG</code>"},{"location":"reference/configuration-reference/#tool-specific-environment-variables","title":"Tool-Specific Environment Variables","text":"Variable Description Example <code>AIDER_LINT_FIXER_DEBUG</code> Enable debug mode <code>true</code> <code>AIDER_LINT_FIXER_LOG_LEVEL</code> Tool log level <code>INFO</code> <code>AIDER_LINT_FIXER_MAX_FILES</code> Maximum files to process <code>10</code> <code>AIDER_LINT_FIXER_MAX_ERRORS</code> Maximum errors per file <code>5</code> <code>ANSIBLE_LINT_VERSION</code> Ansible-lint version selection <code>enterprise</code>"},{"location":"reference/configuration-reference/#command-line-options","title":"Command Line Options","text":"<p>Configuration can also be set via command-line arguments, which override all other settings:</p>"},{"location":"reference/configuration-reference/#basic-options","title":"Basic Options","text":"Option Type Description <code>--config</code>, <code>-c</code> string Path to configuration file <code>--verbose</code>, <code>-v</code> flag Enable verbose output <code>--quiet</code>, <code>-q</code> flag Suppress non-error output <code>--no-color</code> flag Disable colored output <code>--log-file</code> string Path to log file <code>--no-banner</code> flag Disable banner output"},{"location":"reference/configuration-reference/#llm-options","title":"LLM Options","text":"Option Type Description <code>--llm</code> string LLM provider <code>--model</code> string Specific model to use <code>--ai-model</code> choice AI model for cost calculations"},{"location":"reference/configuration-reference/#linter-options","title":"Linter Options","text":"Option Type Description <code>--linters</code> string Comma-separated list of linters <code>--profile</code> choice Linter profile (basic, default, strict) <code>--ansible-profile</code> choice Ansible-lint profile (basic, production) <code>--list-linters</code> flag List all available linters"},{"location":"reference/configuration-reference/#processing-options","title":"Processing Options","text":"Option Type Description <code>--max-files</code> integer Maximum files to process <code>--max-errors</code> integer Maximum errors per file <code>--dry-run</code> flag Show what would be fixed <code>--check-only</code> flag Only check, don't fix <code>--interactive</code> flag Confirm each fix"},{"location":"reference/configuration-reference/#file-selection-options","title":"File Selection Options","text":"Option Type Description <code>--include</code> string Include patterns (multiple allowed) <code>--exclude</code> string Exclude patterns (multiple allowed) <code>--extensions</code> string File extensions to process <code>--target-dir</code> string Target directory to lint"},{"location":"reference/configuration-reference/#smart-features","title":"Smart Features","text":"Option Type Description <code>--smart-linter-selection</code> flag Enable smart linter selection <code>--max-linter-time</code> float Time budget for linters (seconds) <code>--confidence-threshold</code> float Minimum confidence for selection (0.0-1.0) <code>--dag-workflow</code> flag Enable DAG workflow execution <code>--max-workers</code> integer Maximum parallel workers"},{"location":"reference/configuration-reference/#cost-management","title":"Cost Management","text":"Option Type Description <code>--max-cost</code> float Maximum total cost budget <code>--max-iteration-cost</code> float Maximum cost per iteration <code>--show-cost-prediction</code> flag Show cost predictions"},{"location":"reference/configuration-reference/#advanced-options","title":"Advanced Options","text":"Option Type Description <code>--use-architect-mode</code> flag Use architect mode for complex errors <code>--architect-model</code> string Model for architect reasoning <code>--editor-model</code> string Model for file editing <code>--architect-only</code> flag Only use architect mode"},{"location":"reference/configuration-reference/#profile-configurations","title":"Profile Configurations","text":""},{"location":"reference/configuration-reference/#basic-profile","title":"Basic Profile","text":"<ul> <li>Minimal linter set</li> <li>Fast execution</li> <li>Good for initial setup or CI</li> </ul>"},{"location":"reference/configuration-reference/#default-profile","title":"Default Profile","text":"<ul> <li>Balanced linter selection</li> <li>Reasonable performance</li> <li>Recommended for most projects</li> </ul>"},{"location":"reference/configuration-reference/#strict-profile","title":"Strict Profile","text":"<ul> <li>Comprehensive linting</li> <li>Slower execution</li> <li>Best for production-ready code</li> </ul>"},{"location":"reference/configuration-reference/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Start with Basic Profile: Use the basic profile for initial setup and gradually move to stricter profiles.</p> </li> <li> <p>Use Project-Specific Configs: Create <code>.aider-lint-fixer.yml</code> in your project root for project-specific settings.</p> </li> <li> <p>Environment Variables for Secrets: Always use environment variables for API keys, never commit them to configuration files.</p> </li> <li> <p>Smart Selection in Development: Enable smart linter selection during development for faster feedback.</p> </li> <li> <p>Comprehensive Checking in CI: Disable smart selection in CI environments for thorough validation.</p> </li> <li> <p>Exclude Build Artifacts: Always exclude build directories, node_modules, and other generated content.</p> </li> <li> <p>Log Rotation: Configure appropriate log rotation to prevent disk space issues.</p> </li> </ol>"},{"location":"reference/configuration-reference/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/configuration-reference/#common-configuration-issues","title":"Common Configuration Issues","text":"<ol> <li>Configuration Not Loading: Check file paths and YAML syntax</li> <li>API Key Not Found: Verify environment variable names and values</li> <li>Linters Not Found: Ensure linters are installed and in PATH</li> <li>Permission Issues: Check file permissions for config files</li> </ol>"},{"location":"reference/configuration-reference/#validation","title":"Validation","text":"<p>Use the <code>--check-only</code> flag to validate configuration without making changes:</p> <pre><code>aider-lint-fixer --check-only --verbose\n</code></pre>"},{"location":"reference/configuration-reference/#migration-guide","title":"Migration Guide","text":""},{"location":"reference/configuration-reference/#from-v1x-to-v2x","title":"From v1.x to v2.x","text":"<ol> <li>Update configuration file format from JSON to YAML</li> <li>Rename <code>smart_selection</code> to <code>smart_linter_selection</code></li> <li>Add new <code>logging</code> section for log configuration</li> <li>Update environment variable names (add <code>AIDER_</code> prefix)</li> </ol>"},{"location":"reference/configuration-reference/#configuration-conversion","title":"Configuration Conversion","text":"<p>Use the built-in migration tool:</p> <pre><code>aider-lint-fixer --migrate-config path/to/old-config.json\n</code></pre> <p>This will create a new YAML configuration file with equivalent settings.</p>"},{"location":"reference/error-codes/","title":"Error Codes Reference","text":"<p>This document provides a comprehensive reference for all error codes, exit codes, and error messages used by aider-lint-fixer.</p>"},{"location":"reference/error-codes/#exit-codes","title":"Exit Codes","text":"<p>aider-lint-fixer uses standard Unix exit codes to indicate the result of operations:</p> Exit Code Meaning Description <code>0</code> Success No errors found or all errors successfully fixed <code>1</code> Errors Found Lint errors were detected (in check-only mode) <code>2</code> System Error Tool configuration or system error occurred"},{"location":"reference/error-codes/#linter-specific-exit-codes","title":"Linter-Specific Exit Codes","text":"<p>Different linters use different exit codes, which aider-lint-fixer normalizes:</p>"},{"location":"reference/error-codes/#eslint-exit-codes","title":"ESLint Exit Codes","text":"Code Meaning aider-lint-fixer Handling <code>0</code> No problems Success <code>1</code> Issues found Analyzed and prioritized <code>2</code> Fatal error System error reported"},{"location":"reference/error-codes/#ansible-lint-exit-codes","title":"Ansible-lint Exit Codes","text":"Code Meaning aider-lint-fixer Handling <code>0</code> No violations Success <code>2</code> Violations found Analyzed and prioritized <code>3</code> Fatal error System error reported"},{"location":"reference/error-codes/#python-linters-exit-codes","title":"Python Linters Exit Codes","text":"Linter Success Issues Fatal flake8 <code>0</code> <code>1</code> <code>2</code> pylint <code>0</code> Non-zero System error mypy <code>0</code> <code>1</code> <code>2</code>"},{"location":"reference/error-codes/#error-categories","title":"Error Categories","text":"<p>aider-lint-fixer categorizes errors for intelligent handling:</p>"},{"location":"reference/error-codes/#style","title":"STYLE","text":"<p>Low-risk formatting and style issues that are safe to auto-fix.</p> <p>Examples: - <code>semi</code> (ESLint): Missing semicolons - <code>quotes</code> (ESLint): Inconsistent quote styles - <code>indent</code> (ESLint): Incorrect indentation - <code>E101</code> (flake8): Indentation contains mixed spaces and tabs - <code>W291</code> (flake8): Trailing whitespace</p>"},{"location":"reference/error-codes/#logic","title":"LOGIC","text":"<p>Moderate-risk logic issues that may need careful handling.</p> <p>Examples: - <code>no-unused-vars</code> (ESLint): Unused variables - <code>no-undef</code> (ESLint): Undefined variables - <code>F401</code> (flake8): Module imported but unused - <code>W0612</code> (pylint): Unused variable</p>"},{"location":"reference/error-codes/#structural","title":"STRUCTURAL","text":"<p>High-risk structural issues that require architect mode.</p> <p>Examples: - <code>no-implicit-any</code> (TypeScript): Missing type annotations - <code>strict-boolean-expressions</code> (TypeScript): Complex boolean logic - <code>C0103</code> (pylint): Invalid name conventions - Complex refactoring requirements</p>"},{"location":"reference/error-codes/#common-error-codes-by-linter","title":"Common Error Codes by Linter","text":""},{"location":"reference/error-codes/#eslint-error-codes","title":"ESLint Error Codes","text":""},{"location":"reference/error-codes/#high-success-rate-90","title":"High Success Rate (&gt;90%)","text":"Rule ID Description Fix Rate Category <code>semi</code> Missing semicolons 98% STYLE <code>quotes</code> Quote style consistency 95% STYLE <code>indent</code> Indentation issues 92% STYLE <code>no-trailing-spaces</code> Trailing whitespace 99% STYLE <code>prefer-const</code> Use const instead of let 94% STYLE"},{"location":"reference/error-codes/#medium-success-rate-70-90","title":"Medium Success Rate (70-90%)","text":"Rule ID Description Fix Rate Category <code>no-unused-vars</code> Unused variables 88% LOGIC <code>no-undef</code> Undefined variables 75% LOGIC <code>arrow-spacing</code> Arrow function spacing 92% STYLE <code>comma-spacing</code> Comma spacing 89% STYLE"},{"location":"reference/error-codes/#complex-rules-70","title":"Complex Rules (&lt;70%)","text":"Rule ID Description Fix Rate Category <code>no-implicit-any</code> Missing TypeScript types 45% STRUCTURAL <code>strict-boolean-expressions</code> Complex boolean logic 35% STRUCTURAL <code>prefer-nullish-coalescing</code> Nullish coalescing 60% LOGIC"},{"location":"reference/error-codes/#python-error-codes-flake8","title":"Python Error Codes (flake8)","text":""},{"location":"reference/error-codes/#high-success-rate-90_1","title":"High Success Rate (&gt;90%)","text":"Code Description Fix Rate Category <code>E101</code> Indentation mixed spaces/tabs 98% STYLE <code>E111</code> Indentation not multiple of 4 95% STYLE <code>E203</code> Whitespace before ':' 99% STYLE <code>E231</code> Missing whitespace after ',' 97% STYLE <code>W291</code> Trailing whitespace 99% STYLE"},{"location":"reference/error-codes/#medium-success-rate-70-90_1","title":"Medium Success Rate (70-90%)","text":"Code Description Fix Rate Category <code>F401</code> Module imported but unused 85% LOGIC <code>F841</code> Local variable assigned but never used 80% LOGIC <code>E501</code> Line too long 75% STYLE"},{"location":"reference/error-codes/#complex-rules-70_1","title":"Complex Rules (&lt;70%)","text":"Code Description Fix Rate Category <code>F821</code> Undefined name 45% STRUCTURAL <code>C901</code> Function too complex 25% STRUCTURAL <code>E712</code> Comparison to True/False 65% LOGIC"},{"location":"reference/error-codes/#ansible-lint-error-codes","title":"Ansible-lint Error Codes","text":""},{"location":"reference/error-codes/#high-success-rate-90_2","title":"High Success Rate (&gt;90%)","text":"Rule Description Fix Rate Category <code>yaml[indentation]</code> YAML indentation 95% STYLE <code>yaml[line-length]</code> YAML line length 88% STYLE <code>yaml[trailing-spaces]</code> Trailing spaces 99% STYLE"},{"location":"reference/error-codes/#medium-success-rate-70-90_2","title":"Medium Success Rate (70-90%)","text":"Rule Description Fix Rate Category <code>name[missing]</code> Missing task names 85% LOGIC <code>key-order[task]</code> Task key ordering 78% STYLE"},{"location":"reference/error-codes/#complex-rules-70_2","title":"Complex Rules (&lt;70%)","text":"Rule Description Fix Rate Category <code>no-changed-when</code> Missing changed_when 45% STRUCTURAL <code>risky-shell-pipe</code> Dangerous shell usage 35% STRUCTURAL"},{"location":"reference/error-codes/#error-messages-and-meanings","title":"Error Messages and Meanings","text":""},{"location":"reference/error-codes/#configuration-errors","title":"Configuration Errors","text":""},{"location":"reference/error-codes/#configuration-not-found","title":"\"Configuration Not Found\"","text":"<p><pre><code>\u274c Error: Configuration file not found\n\ud83d\udca1 Hint: Create .aider-lint-fixer.yml or use --config flag\n</code></pre> Solution: Create a configuration file or specify path with <code>--config</code></p>"},{"location":"reference/error-codes/#linter-not-available","title":"\"Linter Not Available\"","text":"<p><pre><code>\u274c Error: eslint not found in PATH\n\ud83d\udca1 Hint: Install with: npm install -g eslint\n</code></pre> Solution: Install the missing linter using the suggested command</p>"},{"location":"reference/error-codes/#invalid-configuration","title":"\"Invalid Configuration\"","text":"<p><pre><code>\u274c Error: Invalid YAML syntax in configuration file\n\ud83d\udca1 Hint: Check indentation and quotes in .aider-lint-fixer.yml\n</code></pre> Solution: Validate and fix YAML syntax errors</p>"},{"location":"reference/error-codes/#runtime-errors","title":"Runtime Errors","text":""},{"location":"reference/error-codes/#no-files-to-process","title":"\"No Files to Process\"","text":"<p><pre><code>\u26a0\ufe0f Warning: No files found matching the specified patterns\n\ud83d\udca1 Hint: Check --include and --exclude patterns\n</code></pre> Solution: Verify file patterns and directory paths</p>"},{"location":"reference/error-codes/#api-key-missing","title":"\"API Key Missing\"","text":"<p><pre><code>\u274c Error: API key not found for provider 'deepseek'\n\ud83d\udca1 Hint: Set DEEPSEEK_API_KEY environment variable\n</code></pre> Solution: Configure the appropriate API key environment variable</p>"},{"location":"reference/error-codes/#cost-limit-exceeded","title":"\"Cost Limit Exceeded\"","text":"<p><pre><code>\u26a0\ufe0f Warning: Maximum cost limit ($100.00) reached\n\ud83d\udca1 Hint: Increase --max-cost or focus on fewer files\n</code></pre> Solution: Increase budget or reduce scope</p>"},{"location":"reference/error-codes/#linter-execution-errors","title":"Linter Execution Errors","text":""},{"location":"reference/error-codes/#linter-command-failed","title":"\"Linter Command Failed\"","text":"<p><pre><code>\u274c Error: ESLint exited with code 2\n\ud83d\udca1 Hint: Check ESLint configuration and project setup\n</code></pre> Solution: Verify linter configuration and installation</p>"},{"location":"reference/error-codes/#parse-error","title":"\"Parse Error\"","text":"<p><pre><code>\u274c Error: Could not parse linter output\n\ud83d\udca1 Hint: Check if linter version is supported\n</code></pre> Solution: Update to supported linter version</p>"},{"location":"reference/error-codes/#error-handling-strategies","title":"Error Handling Strategies","text":""},{"location":"reference/error-codes/#automatic-error-recovery","title":"Automatic Error Recovery","text":"<p>aider-lint-fixer implements several automatic recovery strategies:</p> <ol> <li>Fallback Providers: If primary LLM fails, automatically tries fallback providers</li> <li>Incremental Fixing: Processes errors in batches to avoid overwhelming the system</li> <li>Error Categorization: Routes complex errors to architect mode automatically</li> </ol>"},{"location":"reference/error-codes/#user-intervention-points","title":"User Intervention Points","text":""},{"location":"reference/error-codes/#interactive-mode-prompts","title":"Interactive Mode Prompts","text":"<pre><code>\ud83e\udd14 Complex error detected: no-implicit-any in src/utils.ts:45\n   This requires type annotation changes that may affect other files.\n\n   Options:\n   [f] Fix automatically (may need manual review)\n   [s] Skip this error\n   [a] Use architect mode for careful analysis\n   [q] Quit\n\nChoose: \n</code></pre>"},{"location":"reference/error-codes/#confirmation-dialogs","title":"Confirmation Dialogs","text":"<pre><code>\u26a0\ufe0f About to modify 15 files with 47 changes\n   Estimated cost: $2.40\n\nContinue? [y/N]:\n</code></pre>"},{"location":"reference/error-codes/#troubleshooting-guide","title":"Troubleshooting Guide","text":""},{"location":"reference/error-codes/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"reference/error-codes/#1-too-many-errors","title":"1. \"Too Many Errors\"","text":"<p>Symptoms: Tool reports excessive errors and stops Solution: Use <code>--max-errors</code> flag or <code>--force</code> mode with strategic analysis</p>"},{"location":"reference/error-codes/#2-low-success-rate","title":"2. \"Low Success Rate\"","text":"<p>Symptoms: Many fixes fail or create new errors Solution: Use <code>--profile basic</code> for safer fixes, or <code>--architect-mode</code> for complex errors</p>"},{"location":"reference/error-codes/#3-performance-issues","title":"3. \"Performance Issues\"","text":"<p>Symptoms: Tool runs slowly on large projects Solution: Use <code>--max-files</code>, <code>--exclude</code> patterns, or <code>--smart-linter-selection</code></p>"},{"location":"reference/error-codes/#4-inconsistent-results","title":"4. \"Inconsistent Results\"","text":"<p>Symptoms: Different results on repeated runs Solution: Check for configuration drift, use <code>--dag-workflow</code> for deterministic processing</p>"},{"location":"reference/error-codes/#debug-mode-information","title":"Debug Mode Information","text":"<p>Enable debug mode with <code>--verbose</code> or <code>--debug</code> for detailed error information:</p> <pre><code>aider-lint-fixer --verbose --dry-run ./src\n</code></pre> <p>Debug Output Includes: - Linter detection results - Configuration loading details - Error categorization reasoning - Cost calculations - Strategic decision explanations</p>"},{"location":"reference/error-codes/#logging-and-error-tracking","title":"Logging and Error Tracking","text":""},{"location":"reference/error-codes/#log-levels","title":"Log Levels","text":"Level Purpose Example <code>DEBUG</code> Detailed diagnostic info Linter command execution <code>INFO</code> General progress Files processed, errors found <code>WARNING</code> Non-fatal issues Skipped files, fallback usage <code>ERROR</code> Fatal errors Configuration errors, API failures"},{"location":"reference/error-codes/#log-file-location","title":"Log File Location","text":"<ul> <li>Default: <code>aider-lint-fixer.log</code> in current directory</li> <li>Custom: Use <code>--log-file</code> option</li> <li>Rotation: Automatically rotates when exceeding size limits</li> </ul>"},{"location":"reference/error-codes/#error-code-reference-tables","title":"Error Code Reference Tables","text":""},{"location":"reference/error-codes/#exit-code-quick-reference","title":"Exit Code Quick Reference","text":"<pre><code># Check exit code after running\naider-lint-fixer --check-only ./src\necho \"Exit code: $?\"\n\n# 0 = No errors found\n# 1 = Errors found (normal in check mode)\n# 2 = System/configuration error\n</code></pre>"},{"location":"reference/error-codes/#error-severity-levels","title":"Error Severity Levels","text":"Severity Description Action <code>TRIVIAL</code> Safe formatting fixes Auto-fix without confirmation <code>SIMPLE</code> Low-risk logic fixes Auto-fix with batch confirmation <code>MODERATE</code> Medium-risk changes Individual confirmation <code>COMPLEX</code> High-risk structural changes Architect mode required"},{"location":"reference/error-codes/#integration-with-cicd","title":"Integration with CI/CD","text":""},{"location":"reference/error-codes/#recommended-exit-code-handling","title":"Recommended Exit Code Handling","text":"<pre><code># GitHub Actions example\n- name: Lint and Fix\n  run: aider-lint-fixer --check-only ./src\n  continue-on-error: true\n\n- name: Check Results\n  run: |\n    if [ $? -eq 0 ]; then\n      echo \"\u2705 No lint errors found\"\n    elif [ $? -eq 1 ]; then\n      echo \"\u26a0\ufe0f Lint errors detected\"\n      exit 1\n    else\n      echo \"\u274c System error occurred\"\n      exit 2\n    fi\n</code></pre>"},{"location":"reference/error-codes/#error-reporting-integration","title":"Error Reporting Integration","text":"<pre><code># Generate JSON report for CI systems\naider-lint-fixer --output-format json --check-only ./src &gt; lint-report.json\n\n# Parse results in CI\nif [ $? -eq 1 ]; then\n  echo \"::error::Lint errors found. See lint-report.json for details\"\nfi\n</code></pre> <p>This comprehensive error codes reference helps you understand, diagnose, and resolve issues when using aider-lint-fixer across different linters and project configurations.</p>"},{"location":"reference/faq/","title":"Frequently Asked Questions","text":"<p>This document answers common questions about aider-lint-fixer usage, configuration, and troubleshooting.</p>"},{"location":"reference/faq/#general-questions","title":"General Questions","text":""},{"location":"reference/faq/#what-is-aider-lint-fixer","title":"What is aider-lint-fixer?","text":"<p>aider-lint-fixer is an AI-powered tool that automatically detects and fixes linting issues across multiple programming languages. It supports Python, JavaScript/TypeScript, and Ansible with a unified interface and intelligent auto-fixing capabilities.</p>"},{"location":"reference/faq/#which-linters-are-supported","title":"Which linters are supported?","text":"<p>Python: - flake8 (style and error checking) - pylint (comprehensive code analysis) - mypy (static type checking) - bandit (security analysis) - black (code formatting)</p> <p>JavaScript/TypeScript: - ESLint (linting and style checking) - JSHint (error detection) - Prettier (code formatting) - TSLint (TypeScript-specific, deprecated but supported)</p> <p>Ansible: - ansible-lint (playbook and role validation)</p> <p>Other: - YAML linting for configuration files - Markdown linting for documentation</p>"},{"location":"reference/faq/#how-does-auto-fixing-work","title":"How does auto-fixing work?","text":"<p>aider-lint-fixer uses AI to understand code context and apply intelligent fixes: 1. Pattern Recognition: Identifies common linting issues 2. Context Analysis: Understands surrounding code structure 3. Safe Transformations: Applies fixes that preserve functionality 4. Backup Creation: Creates backups before making changes 5. Validation: Re-runs linters to verify fixes</p>"},{"location":"reference/faq/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"reference/faq/#how-do-i-install-aider-lint-fixer","title":"How do I install aider-lint-fixer?","text":"<p>Container-based (Recommended): <pre><code># macOS/Ubuntu - use default container\ndocker build -t aider-lint-fixer:latest .\ndocker run --rm -v $(pwd):/workspace:ro aider-lint-fixer:latest\n\n# RHEL - build customer container\n./scripts/containers/build-rhel9.sh --validate\npodman run --rm -v $(pwd):/workspace:ro my-company/aider-lint-fixer:rhel9\n</code></pre></p> <p>Native Installation: <pre><code># Create virtual environment\npython3 -m venv ~/.venv/aider-lint-fixer\nsource ~/.venv/aider-lint-fixer/bin/activate\n\n# Install from source\npip install -e .\n\n# Install additional linters\npip install flake8 pylint mypy\nnpm install -g eslint prettier\n</code></pre></p>"},{"location":"reference/faq/#what-are-the-system-requirements","title":"What are the system requirements?","text":"<p>Minimum Requirements: - Python 3.9+ (Python 3.11+ recommended) - 2GB RAM - 1GB disk space</p> <p>For JavaScript Support: - Node.js 16+ (Node.js 18+ recommended) - npm or yarn</p> <p>For Container Usage: - Docker or Podman - 4GB RAM recommended for large projects</p>"},{"location":"reference/faq/#how-do-i-configure-linters","title":"How do I configure linters?","text":"<p>Create <code>.aider-lint.yaml</code> in your project root: <pre><code>linters:\n  - flake8\n  - eslint\n  - ansible-lint\n\nprofiles:\n  development:\n    auto_fix: true\n    strict: false\n  ci:\n    strict: true\n    fail_fast: true\n</code></pre></p> <p>See Configure Linters for detailed configuration options.</p>"},{"location":"reference/faq/#usage-questions","title":"Usage Questions","text":""},{"location":"reference/faq/#how-do-i-run-linting-on-my-project","title":"How do I run linting on my project?","text":"<p>Basic Usage: <pre><code># Lint entire project\naider-lint-fixer\n\n# Lint specific files\naider-lint-fixer file1.py file2.js\n\n# Use specific linters\naider-lint-fixer --linters flake8,eslint\n\n# Auto-fix issues\naider-lint-fixer --auto-fix --backup\n</code></pre></p> <p>Container Usage: <pre><code># Default container\ndocker run --rm -v $(pwd):/workspace:ro aider-lint-fixer:latest\n\n# RHEL container\npodman run --rm -v $(pwd):/workspace:ro my-company/aider-lint-fixer:rhel9\n</code></pre></p>"},{"location":"reference/faq/#can-i-exclude-certain-files-or-directories","title":"Can I exclude certain files or directories?","text":"<p>Yes, use exclude patterns in your configuration:</p> <pre><code># .aider-lint.yaml\nexclude_patterns:\n  - \"build/\"\n  - \"dist/\"\n  - \"node_modules/\"\n  - \"*.min.js\"\n  - \"__pycache__/\"\n  - \".git/\"\n</code></pre> <p>Or use command-line options: <pre><code>aider-lint-fixer --exclude \"build/,dist/,*.min.js\"\n</code></pre></p>"},{"location":"reference/faq/#how-do-i-integrate-with-my-ide","title":"How do I integrate with my IDE?","text":"<p>VS Code: 1. Install the aider-lint-fixer extension 2. Configure in settings.json: <pre><code>{\n  \"aider-lint-fixer.configFile\": \".aider-lint.yaml\",\n  \"aider-lint-fixer.autoFix\": true,\n  \"aider-lint-fixer.lintOnSave\": true\n}\n</code></pre></p> <p>PyCharm/IntelliJ: 1. Add external tool configuration 2. Program: <code>aider-lint-fixer</code> 3. Arguments: <code>--file $FilePath$</code></p> <p>See platform-specific guides for detailed IDE integration: - macOS/Ubuntu Developer Guide - Red Hat Developer Guide</p>"},{"location":"reference/faq/#how-do-i-use-different-profiles","title":"How do I use different profiles?","text":"<p>Profiles allow different configurations for different environments:</p> <pre><code># Use development profile (auto-fix enabled)\naider-lint-fixer --profile development\n\n# Use CI profile (strict mode)\naider-lint-fixer --profile ci\n\n# Use production profile (security-focused)\naider-lint-fixer --profile production\n</code></pre>"},{"location":"reference/faq/#container-questions","title":"Container Questions","text":""},{"location":"reference/faq/#whats-the-difference-between-default-and-rhel-containers","title":"What's the difference between default and RHEL containers?","text":"<p>Default Container (macOS/Ubuntu): - Latest ansible-lint and linting tools - No subscription requirements - Optimized for development environments - Uses Docker</p> <p>RHEL Containers (Enterprise): - Version-specific ansible-core (2.14 for RHEL 9, 2.16+ for RHEL 10) - Requires Red Hat subscription for building - Customer-build approach for compliance - Uses Podman (RHEL native)</p>"},{"location":"reference/faq/#why-do-i-need-to-build-rhel-containers-myself","title":"Why do I need to build RHEL containers myself?","text":"<p>Red Hat licensing requires customers to build containers with their own subscriptions: - UBI images don't include ansible-core by default - ansible-core requires AppStream repository access - Cannot distribute pre-built containers with ansible-core - Ensures compliance with Red Hat subscription terms</p>"},{"location":"reference/faq/#how-do-i-troubleshoot-container-builds","title":"How do I troubleshoot container builds?","text":"<p>RHEL Container Issues: <pre><code># Check subscription status\nsubscription-manager status\n\n# Validate build script\n./scripts/containers/build-rhel9.sh --dry-run\n\n# Debug build interactively\npodman run -it --entrypoint /bin/bash registry.redhat.io/ubi9/ubi:latest\n</code></pre></p> <p>General Container Issues: <pre><code># Check container runtime\ndocker info  # or podman info\n\n# Clean up containers and images\ndocker system prune -a\n\n# Check resource usage\ndocker stats\n</code></pre></p>"},{"location":"reference/faq/#configuration-questions","title":"Configuration Questions","text":""},{"location":"reference/faq/#how-do-i-handle-conflicting-linter-rules","title":"How do I handle conflicting linter rules?","text":"<ol> <li> <p>Use unified configuration to manage conflicts: <pre><code># .aider-lint.yaml\nlinters:\n  python:\n    flake8:\n      ignore: [\"E203\", \"W503\"]  # Conflicts with black\n    black:\n      line_length: 88\n</code></pre></p> </li> <li> <p>Use per-file ignores: <pre><code># .flake8\nper-file-ignores =\n    __init__.py:F401\n    tests/*:S101\n</code></pre></p> </li> <li> <p>Configure linter precedence: <pre><code># .aider-lint.yaml\nlinter_precedence:\n  - black      # Formatting takes precedence\n  - flake8     # Then style checking\n  - pylint     # Finally comprehensive analysis\n</code></pre></p> </li> </ol>"},{"location":"reference/faq/#how-do-i-configure-for-monorepos","title":"How do I configure for monorepos?","text":"<p>Use directory-specific configurations:</p> <pre><code># .aider-lint.yaml (root)\nlinters:\n  - flake8\n  - eslint\n\ndirectory_configs:\n  backend/:\n    linters:\n      - flake8\n      - pylint\n      - mypy\n    python:\n      strict: true\n\n  frontend/:\n    linters:\n      - eslint\n      - prettier\n    javascript:\n      typescript: true\n\n  ansible/:\n    linters:\n      - ansible-lint\n    ansible:\n      profile: production\n</code></pre>"},{"location":"reference/faq/#can-i-use-existing-linter-configuration-files","title":"Can I use existing linter configuration files?","text":"<p>Yes, aider-lint-fixer automatically discovers and uses: - <code>.flake8</code>, <code>pyproject.toml</code> for Python - <code>.eslintrc.js</code>, <code>package.json</code> for JavaScript - <code>.ansible-lint</code> for Ansible</p> <p>You can also specify configuration files explicitly: <pre><code># .aider-lint.yaml\nlinters:\n  python:\n    flake8:\n      config_file: custom-flake8.cfg\n  javascript:\n    eslint:\n      config_file: custom-eslint.js\n</code></pre></p>"},{"location":"reference/faq/#performance-questions","title":"Performance Questions","text":""},{"location":"reference/faq/#how-can-i-improve-linting-performance","title":"How can I improve linting performance?","text":"<ol> <li> <p>Enable parallel processing: <pre><code>aider-lint-fixer --parallel --jobs 4\n</code></pre></p> </li> <li> <p>Use caching: <pre><code>aider-lint-fixer --cache-dir ~/.cache/aider-lint\n</code></pre></p> </li> <li> <p>Exclude unnecessary files: <pre><code>exclude_patterns:\n  - \"node_modules/\"\n  - \"build/\"\n  - \"*.min.js\"\n</code></pre></p> </li> <li> <p>Use incremental linting: <pre><code># Only lint changed files\naider-lint-fixer --changed-only\n\n# Lint since specific commit\naider-lint-fixer --since HEAD~1\n</code></pre></p> </li> </ol>"},{"location":"reference/faq/#why-is-the-first-run-slow","title":"Why is the first run slow?","text":"<p>The first run may be slower due to: - Installing linter dependencies - Building caches - Analyzing entire codebase</p> <p>Subsequent runs are much faster due to caching.</p>"},{"location":"reference/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/faq/#common-error-messages","title":"Common Error Messages","text":"<p>\"No linters found\": - Install required linters: <code>pip install flake8</code> or <code>npm install -g eslint</code> - Check PATH configuration - Verify virtual environment activation</p> <p>\"Configuration file not found\": - Create <code>.aider-lint.yaml</code> in project root - Use <code>--config</code> to specify custom location - Check file permissions</p> <p>\"Permission denied\": - Check file permissions: <code>chmod +x aider-lint-fixer</code> - Use proper container volume mounts - Verify user permissions in containers</p> <p>\"Linter execution failed\": - Check linter installation: <code>flake8 --version</code> - Verify configuration syntax - Run linter directly to debug: <code>flake8 file.py</code></p>"},{"location":"reference/faq/#how-do-i-debug-issues","title":"How do I debug issues?","text":"<ol> <li> <p>Enable verbose output: <pre><code>aider-lint-fixer --verbose --debug\n</code></pre></p> </li> <li> <p>Check configuration: <pre><code>aider-lint-fixer --show-config --validate-config\n</code></pre></p> </li> <li> <p>Test individual linters: <pre><code>aider-lint-fixer --linters flake8 --dry-run\n</code></pre></p> </li> <li> <p>Check logs: <pre><code># Container logs\ndocker logs &lt;container-id&gt;\n\n# System logs\njournalctl -u aider-lint-fixer\n</code></pre></p> </li> </ol>"},{"location":"reference/faq/#how-do-i-report-bugs","title":"How do I report bugs?","text":"<ol> <li>Gather information:</li> <li>aider-lint-fixer version: <code>aider-lint-fixer --version</code></li> <li>System information: <code>uname -a</code></li> <li>Python version: <code>python --version</code></li> <li> <p>Linter versions: <code>flake8 --version</code>, <code>eslint --version</code></p> </li> <li> <p>Create minimal reproduction:</p> </li> <li>Isolate the issue to specific files/configuration</li> <li>Include configuration files</li> <li> <p>Provide sample code that triggers the issue</p> </li> <li> <p>Submit issue:</p> </li> <li>Use GitHub issue template</li> <li>Include all gathered information</li> <li>Describe expected vs actual behavior</li> </ol>"},{"location":"reference/faq/#integration-questions","title":"Integration Questions","text":""},{"location":"reference/faq/#how-do-i-integrate-with-cicd","title":"How do I integrate with CI/CD?","text":"<p>GitHub Actions: <pre><code>- name: Run linting\n  run: |\n    docker run --rm -v ${{ github.workspace }}:/workspace:ro \\\n      aider-lint-fixer:latest \\\n      --profile ci --output-format github-actions\n</code></pre></p> <p>Jenkins: <pre><code>stage('Lint') {\n    steps {\n        sh 'aider-lint-fixer --profile ci --output-format junit'\n        publishTestResults testResultsPattern: 'lint-results.xml'\n    }\n}\n</code></pre></p> <p>GitLab CI: <pre><code>lint:\n  script:\n    - aider-lint-fixer --profile ci\n  artifacts:\n    reports:\n      junit: lint-results.xml\n</code></pre></p>"},{"location":"reference/faq/#can-i-use-with-pre-commit-hooks","title":"Can I use with pre-commit hooks?","text":"<p>Yes, create <code>.pre-commit-config.yaml</code>: <pre><code>repos:\n  - repo: local\n    hooks:\n      - id: aider-lint-fixer\n        name: Aider Lint Fixer\n        entry: aider-lint-fixer --profile ci\n        language: system\n        files: \\.(py|js|ts|yml|yaml)$\n</code></pre></p>"},{"location":"reference/faq/#how-do-i-integrate-with-code-review-tools","title":"How do I integrate with code review tools?","text":"<p>Most code review tools support standard formats: - GitHub: Use <code>--output-format github-actions</code> - GitLab: Use <code>--output-format gitlab-ci</code> - SonarQube: Use <code>--output-format sonarqube</code> - Generic: Use <code>--output-format sarif</code> for SARIF-compatible tools</p>"},{"location":"reference/faq/#getting-help","title":"Getting Help","text":""},{"location":"reference/faq/#where-can-i-find-more-documentation","title":"Where can I find more documentation?","text":"<ul> <li>How-to Guides: Platform-specific setup and usage</li> <li>Tutorials: Step-by-step walkthroughs</li> <li>Reference: API documentation and configuration options</li> <li>ADRs: Architectural decisions and rationale</li> </ul>"},{"location":"reference/faq/#how-do-i-get-support","title":"How do I get support?","text":"<ol> <li>Documentation: Check relevant guides and tutorials</li> <li>GitHub Issues: Search existing issues or create new ones</li> <li>Community Forum: Join discussions and ask questions</li> <li>Enterprise Support: Contact your Red Hat representative (for RHEL users)</li> </ol>"},{"location":"reference/faq/#how-do-i-contribute","title":"How do I contribute?","text":"<ol> <li>Fork the repository on GitHub</li> <li>Create feature branch: <code>git checkout -b feature/new-linter</code></li> <li>Add tests for new functionality</li> <li>Submit pull request with clear description</li> <li>Follow code review process</li> </ol> <p>See Contributing Guide for detailed instructions.</p>"},{"location":"reference/faq/#related-documentation","title":"Related Documentation","text":"<ul> <li>Configure Linters</li> <li>Red Hat Developer Guide</li> <li>macOS/Ubuntu Developer Guide</li> <li>Container Deployment Tutorial</li> <li>API Documentation</li> </ul>"},{"location":"reference/linter-plugins/","title":"Linter Plugins Reference","text":"<p>This document provides comprehensive information about supported linters, their plugin architecture, and integration capabilities with aider-lint-fixer.</p>"},{"location":"reference/linter-plugins/#plugin-architecture","title":"Plugin Architecture","text":"<p>aider-lint-fixer uses a modular plugin architecture that allows for extensible linter support through the <code>BaseLinter</code> interface.</p>"},{"location":"reference/linter-plugins/#core-components","title":"Core Components","text":""},{"location":"reference/linter-plugins/#baselinter-interface","title":"BaseLinter Interface","text":"<p>All linters implement the standardized <code>BaseLinter</code> interface:</p> <pre><code>class BaseLinter:\n    def is_available(self) -&gt; bool\n    def run(self, files: List[str]) -&gt; LinterResult\n    def is_success(self, return_code: int, errors: List[LintError], warnings: List[LintError]) -&gt; bool\n    def get_supported_extensions(self) -&gt; List[str]\n    def get_version(self) -&gt; Optional[str]\n</code></pre>"},{"location":"reference/linter-plugins/#modular-linter-system","title":"Modular Linter System","text":"<p>Located in <code>aider_lint_fixer/linters/</code>, each linter is a self-contained module:</p> <ul> <li>AnsibleLintLinter: <code>ansible_lint_linter.py</code></li> <li>ESLintLinter: <code>eslint_linter.py</code></li> <li>Flake8Linter: <code>flake8_linter.py</code></li> <li>JSHintLinter: <code>jshint_linter.py</code></li> <li>PrettierLinter: <code>prettier_linter.py</code></li> <li>PylintLinter: <code>pylint_linter.py</code></li> </ul>"},{"location":"reference/linter-plugins/#supported-linters-by-language","title":"Supported Linters by Language","text":""},{"location":"reference/linter-plugins/#python-linters","title":"Python Linters","text":""},{"location":"reference/linter-plugins/#flake8","title":"flake8","text":"<p>Description: Style guide enforcement and error detection for Python code.</p> Attribute Value Tested Version Latest stable Supported Versions 3.x, 4.x, 5.x, 6.x File Extensions <code>.py</code>, <code>.pyi</code> Profile Support \u2705 Basic, Default, Strict Output Format Text, JSON (limited) Installation <code>pip install flake8</code> <p>Key Features: - PEP 8 style checking - Syntax error detection - Complexity analysis (mccabe) - Plugin ecosystem support</p> <p>Common Rules: - <code>E101</code>: Indentation issues - <code>E501</code>: Line too long - <code>F401</code>: Unused imports - <code>W291</code>: Trailing whitespace</p>"},{"location":"reference/linter-plugins/#pylint","title":"pylint","text":"<p>Description: Comprehensive code analysis and quality checking for Python.</p> Attribute Value Tested Version 3.3.7 Supported Versions 3.3, 3.2, 3.1, 3.0, 2.x File Extensions <code>.py</code>, <code>.pyi</code> Profile Support \u2705 Basic, Default, Strict Output Format Text, JSON Installation <code>pip install pylint</code> <p>Key Features: - Code quality analysis - Error and warning detection - Code metrics and statistics - Configurable rule sets</p> <p>Common Rules: - <code>C0103</code>: Invalid name - <code>W0612</code>: Unused variable - <code>R0903</code>: Too few public methods - <code>E1101</code>: Instance has no member</p>"},{"location":"reference/linter-plugins/#mypy","title":"mypy","text":"<p>Description: Static type checking for Python code.</p> Attribute Value Tested Version Latest stable Supported Versions 1.x, 0.9x File Extensions <code>.py</code>, <code>.pyi</code> Profile Support \u2705 Basic, Default, Strict Output Format Text, JSON Installation <code>pip install mypy</code> <p>Key Features: - Static type checking - Type inference - Gradual typing support - Integration with IDEs</p>"},{"location":"reference/linter-plugins/#black","title":"black","text":"<p>Description: Uncompromising Python code formatter.</p> Attribute Value Tested Version Latest stable Supported Versions 22.x, 23.x, 24.x File Extensions <code>.py</code>, <code>.pyi</code> Profile Support \u2705 Basic, Default, Strict Output Format Text, diff Installation <code>pip install black</code> <p>Key Features: - Automatic code formatting - Consistent style enforcement - Minimal configuration - Fast performance</p>"},{"location":"reference/linter-plugins/#isort","title":"isort","text":"<p>Description: Import statement organizer for Python.</p> Attribute Value Tested Version Latest stable Supported Versions 5.x File Extensions <code>.py</code>, <code>.pyi</code> Profile Support \u2705 Basic, Default, Strict Output Format Text, diff Installation <code>pip install isort</code> <p>Key Features: - Import statement sorting - Section organization - Multiple style profiles - Integration with black</p>"},{"location":"reference/linter-plugins/#javascripttypescript-linters","title":"JavaScript/TypeScript Linters","text":""},{"location":"reference/linter-plugins/#eslint","title":"ESLint","text":"<p>Description: Comprehensive linting and code quality tool for JavaScript/TypeScript.</p> Attribute Value Tested Version 8.57.1 Supported Versions 8.57.x, 8.5.x, 8.x, 7.x File Extensions <code>.js</code>, <code>.jsx</code>, <code>.ts</code>, <code>.tsx</code>, <code>.mjs</code>, <code>.cjs</code> Profile Support \u2705 Basic, Default, Strict Output Format Text, JSON, Stylish Installation <code>npm install -g eslint</code> <p>Key Features: - Syntax error detection - Style checking - TypeScript support via plugins - Extensive rule ecosystem - Auto-fixing capabilities</p> <p>Configuration Files: - <code>.eslintrc.js</code>, <code>.eslintrc.json</code>, <code>.eslintrc.yml</code> - <code>package.json</code> (eslintConfig) - <code>.eslintrc.yaml</code></p> <p>Common Rules: - <code>semi</code>: Semicolon requirements - <code>quotes</code>: Quote style consistency - <code>no-unused-vars</code>: Unused variable detection - <code>prefer-const</code>: Prefer const over let - <code>@typescript-eslint/no-unused-vars</code>: TypeScript unused vars</p> <p>TypeScript Integration: <pre><code>{\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\"@typescript-eslint\"],\n  \"extends\": [\"@typescript-eslint/recommended\"],\n  \"rules\": {\n    \"@typescript-eslint/no-unused-vars\": \"error\",\n    \"@typescript-eslint/explicit-function-return-type\": \"warn\"\n  }\n}\n</code></pre></p>"},{"location":"reference/linter-plugins/#jshint","title":"JSHint","text":"<p>Description: Community-driven tool for detecting errors in JavaScript code.</p> Attribute Value Tested Version 2.13.6 Supported Versions 2.13.x, 2.1.x, 2.x File Extensions <code>.js</code>, <code>.mjs</code>, <code>.cjs</code> Profile Support \u2705 Basic, Default, Strict Output Format Text, JSON Installation <code>npm install -g jshint</code> <p>Key Features: - JavaScript error detection - Code quality warnings - Configurable options - Legacy project support</p> <p>Configuration Files: - <code>.jshintrc</code> - <code>package.json</code> (jshintConfig)</p>"},{"location":"reference/linter-plugins/#prettier","title":"Prettier","text":"<p>Description: Opinionated code formatter for multiple languages.</p> Attribute Value Tested Version 3.6.2 Supported Versions 3.6.x, 3.x, 2.x File Extensions <code>.js</code>, <code>.jsx</code>, <code>.ts</code>, <code>.tsx</code>, <code>.json</code>, <code>.css</code>, <code>.scss</code>, <code>.html</code>, <code>.md</code>, <code>.yaml</code>, <code>.yml</code> Profile Support \u2705 Basic, Default, Strict Output Format Text, formatted code Installation <code>npm install -g prettier</code> <p>Key Features: - Multi-language formatting - Consistent code style - Integration with ESLint - Editor integration - Minimal configuration</p> <p>Configuration Files: - <code>.prettierrc</code>, <code>.prettierrc.json</code>, <code>.prettierrc.yml</code> - <code>prettier.config.js</code> - <code>package.json</code> (prettier)</p>"},{"location":"reference/linter-plugins/#ansible-linters","title":"Ansible Linters","text":""},{"location":"reference/linter-plugins/#ansible-lint","title":"ansible-lint","text":"<p>Description: Best practices checker for Ansible playbooks.</p> Attribute Value Tested Version 25.6.1 Supported Versions 25.x, 24.x, 6.x File Extensions <code>.yml</code>, <code>.yaml</code> (Ansible playbooks) Profile Support \u2705 Basic, Production Output Format Text, JSON, SARIF Installation <code>pip install ansible-lint</code> <p>Key Features: - Ansible best practices checking - YAML syntax validation - Security rule checking - Role and playbook analysis - Custom rule support</p> <p>Profiles: - Basic: Essential checks for development - Production: Comprehensive checks for production deployments</p> <p>Common Rules: - <code>yaml[indentation]</code>: YAML indentation issues - <code>name[missing]</code>: Missing task names - <code>no-changed-when</code>: Missing changed_when - <code>risky-shell-pipe</code>: Dangerous shell usage</p>"},{"location":"reference/linter-plugins/#go-linters","title":"Go Linters","text":""},{"location":"reference/linter-plugins/#golint","title":"golint","text":"<p>Description: Linter for Go source code.</p> Attribute Value Status Legacy (deprecated) Supported Versions Latest available File Extensions <code>.go</code> Profile Support \u2705 Basic, Default, Strict Output Format Text Installation <code>go install golang.org/x/lint/golint@latest</code> <p>Note: golint is deprecated. Consider using <code>revive</code> or <code>golangci-lint</code> instead.</p>"},{"location":"reference/linter-plugins/#gofmt","title":"gofmt","text":"<p>Description: Go code formatter.</p> Attribute Value Tested Version Built-in with Go Supported Versions All Go versions File Extensions <code>.go</code> Profile Support \u2705 Basic, Default, Strict Output Format Text, diff Installation Included with Go <p>Key Features: - Automatic code formatting - Consistent Go style - Built-in with Go toolchain</p>"},{"location":"reference/linter-plugins/#go-vet","title":"go vet","text":"<p>Description: Static analysis tool for Go.</p> Attribute Value Tested Version Built-in with Go Supported Versions All Go versions File Extensions <code>.go</code> Profile Support \u2705 Basic, Default, Strict Output Format Text Installation Included with Go <p>Key Features: - Static analysis - Bug detection - Go best practices</p>"},{"location":"reference/linter-plugins/#rust-linters","title":"Rust Linters","text":""},{"location":"reference/linter-plugins/#rustfmt","title":"rustfmt","text":"<p>Description: Rust code formatter.</p> Attribute Value Tested Version Latest stable Supported Versions Stable Rust versions File Extensions <code>.rs</code> Profile Support \u2705 Basic, Default, Strict Output Format Text, diff Installation <code>rustup component add rustfmt</code> <p>Key Features: - Automatic Rust formatting - Configurable style options - Integration with Cargo</p>"},{"location":"reference/linter-plugins/#clippy","title":"clippy","text":"<p>Description: Rust linter for catching common mistakes.</p> Attribute Value Tested Version Latest stable Supported Versions Stable Rust versions File Extensions <code>.rs</code> Profile Support \u2705 Basic, Default, Strict Output Format Text, JSON Installation <code>rustup component add clippy</code> <p>Key Features: - Lint checking for Rust - Performance suggestions - Idiomatic code recommendations</p>"},{"location":"reference/linter-plugins/#plugin-development","title":"Plugin Development","text":""},{"location":"reference/linter-plugins/#creating-custom-linters","title":"Creating Custom Linters","text":"<p>To add support for a new linter, create a class inheriting from <code>BaseLinter</code>:</p> <pre><code>from aider_lint_fixer.linters.base_linter import BaseLinter, LinterResult\n\nclass MyCustomLinter(BaseLinter):\n    def __init__(self, project_path: str):\n        super().__init__(project_path)\n        self.name = \"my-custom-linter\"\n\n    def is_available(self) -&gt; bool:\n        \"\"\"Check if the linter is installed and available.\"\"\"\n        try:\n            result = subprocess.run(\n                [\"my-linter\", \"--version\"],\n                capture_output=True,\n                text=True,\n                timeout=10\n            )\n            return result.returncode == 0\n        except (FileNotFoundError, subprocess.TimeoutExpired):\n            return False\n\n    def run(self, files: List[str]) -&gt; LinterResult:\n        \"\"\"Run the linter on specified files.\"\"\"\n        # Implementation details\n        pass\n\n    def get_supported_extensions(self) -&gt; List[str]:\n        \"\"\"Return list of supported file extensions.\"\"\"\n        return [\".myext\"]\n</code></pre>"},{"location":"reference/linter-plugins/#plugin-registration","title":"Plugin Registration","text":"<p>Add your linter to the plugin registry:</p> <pre><code># In aider_lint_fixer/linters/__init__.py\ntry:\n    from .my_custom_linter import MyCustomLinter\n    MY_CUSTOM_AVAILABLE = True\nexcept ImportError:\n    MY_CUSTOM_AVAILABLE = False\n\nif MY_CUSTOM_AVAILABLE:\n    __all__.append(\"MyCustomLinter\")\n</code></pre>"},{"location":"reference/linter-plugins/#testing-framework","title":"Testing Framework","text":"<p>Create comprehensive tests for your linter plugin:</p> <pre><code>def test_my_custom_linter():\n    \"\"\"Test the custom linter functionality.\"\"\"\n    linter = MyCustomLinter(\"/path/to/project\")\n\n    # Test availability\n    assert linter.is_available()\n\n    # Test file processing\n    result = linter.run([\"test_file.myext\"])\n    assert isinstance(result, LinterResult)\n\n    # Test error detection\n    assert len(result.errors) &gt; 0\n</code></pre>"},{"location":"reference/linter-plugins/#configuration-integration","title":"Configuration Integration","text":""},{"location":"reference/linter-plugins/#linter-specific-configuration","title":"Linter-Specific Configuration","text":"<p>Each linter can be configured individually in <code>.aider-lint-fixer.yml</code>:</p> <pre><code>linters:\n  eslint:\n    enabled: true\n    config_file: \".eslintrc.custom.js\"\n    extra_args: [\"--max-warnings\", \"0\"]\n\n  flake8:\n    enabled: true\n    max_line_length: 88\n    ignore: [\"E203\", \"W503\"]\n\n  ansible-lint:\n    enabled: true\n    profile: \"production\"\n    exclude_paths: [\"roles/legacy/\"]\n</code></pre>"},{"location":"reference/linter-plugins/#profile-specific-settings","title":"Profile-Specific Settings","text":"<p>Configure different behavior for different profiles:</p> <pre><code>profiles:\n  basic:\n    linters:\n      enabled: [\"flake8\", \"eslint\"]\n      strict_mode: false\n\n  strict:\n    linters:\n      enabled: [\"flake8\", \"pylint\", \"mypy\", \"eslint\"]\n      strict_mode: true\n      fail_on_warning: true\n</code></pre>"},{"location":"reference/linter-plugins/#performance-optimization","title":"Performance Optimization","text":""},{"location":"reference/linter-plugins/#smart-linter-selection","title":"Smart Linter Selection","text":"<p>Enable intelligent linter selection based on project analysis:</p> <pre><code># Enable smart selection\naider-lint-fixer --smart-linter-selection ./src\n\n# Set time budget for linters\naider-lint-fixer --max-linter-time 30.0 ./src\n\n# Set confidence threshold\naider-lint-fixer --confidence-threshold 0.8 ./src\n</code></pre>"},{"location":"reference/linter-plugins/#parallel-processing","title":"Parallel Processing","text":"<p>Utilize DAG workflow for parallel linter execution:</p> <pre><code># Enable parallel processing\naider-lint-fixer --dag-workflow ./src\n\n# Set maximum workers\naider-lint-fixer --max-workers 8 ./src\n</code></pre>"},{"location":"reference/linter-plugins/#caching","title":"Caching","text":"<p>Linter results are cached to improve performance on subsequent runs:</p> <ul> <li>Cache Location: <code>.aider-lint-cache/</code></li> <li>Cache Invalidation: Based on file modification times</li> <li>Cache Management: Automatic cleanup of stale entries</li> </ul>"},{"location":"reference/linter-plugins/#integration-examples","title":"Integration Examples","text":""},{"location":"reference/linter-plugins/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"reference/linter-plugins/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Lint and Fix\non: [push, pull_request]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n      - name: Setup Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: '3.11'\n      - name: Install linters\n        run: |\n          npm install -g eslint prettier\n          pip install flake8 pylint black\n      - name: Run aider-lint-fixer\n        run: aider-lint-fixer --check-only --output-format json ./src\n</code></pre>"},{"location":"reference/linter-plugins/#gitlab-ci","title":"GitLab CI","text":"<pre><code>lint_and_fix:\n  stage: test\n  image: node:18\n  before_script:\n    - npm install -g eslint prettier\n    - pip install aider-lint-fixer flake8 pylint\n  script:\n    - aider-lint-fixer --check-only ./src\n  artifacts:\n    reports:\n      junit: lint-report.xml\n</code></pre>"},{"location":"reference/linter-plugins/#pre-commit-integration","title":"Pre-commit Integration","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: aider-lint-fixer\n        name: Aider Lint Fixer\n        entry: aider-lint-fixer\n        language: system\n        files: '\\.(py|js|ts|jsx|tsx|yml|yaml)$'\n        args: ['--auto-fix', '--profile', 'basic']\n</code></pre>"},{"location":"reference/linter-plugins/#ide-integration","title":"IDE Integration","text":""},{"location":"reference/linter-plugins/#vs-code","title":"VS Code","text":"<pre><code>{\n  \"tasks\": [\n    {\n      \"label\": \"Aider Lint Fixer\",\n      \"type\": \"shell\",\n      \"command\": \"aider-lint-fixer\",\n      \"args\": [\"--interactive\", \"${workspaceFolder}/src\"],\n      \"group\": \"build\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"reference/linter-plugins/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/linter-plugins/#common-issues","title":"Common Issues","text":""},{"location":"reference/linter-plugins/#linter-not-detected","title":"Linter Not Detected","text":"<pre><code># Check linter availability\naider-lint-fixer --list-linters\n\n# Force linter check\naider-lint-fixer --verbose --dry-run ./src\n</code></pre>"},{"location":"reference/linter-plugins/#configuration-conflicts","title":"Configuration Conflicts","text":"<pre><code># Validate configuration\naider-lint-fixer --check-config\n\n# Show effective configuration\naider-lint-fixer --show-config\n</code></pre>"},{"location":"reference/linter-plugins/#performance-issues","title":"Performance Issues","text":"<pre><code># Enable smart selection\naider-lint-fixer --smart-linter-selection\n\n# Reduce scope\naider-lint-fixer --max-files 50 ./src\n\n# Use specific linters only\naider-lint-fixer --linters flake8,eslint ./src\n</code></pre>"},{"location":"reference/linter-plugins/#debug-information","title":"Debug Information","text":"<p>Enable verbose logging for detailed plugin information:</p> <pre><code>aider-lint-fixer --verbose --debug ./src\n</code></pre> <p>This provides: - Plugin loading details - Linter detection results - Configuration resolution - Performance metrics</p>"},{"location":"reference/linter-plugins/#version-compatibility","title":"Version Compatibility","text":""},{"location":"reference/linter-plugins/#supported-version-matrix","title":"Supported Version Matrix","text":"Language Linter Tested Supported Notes Python flake8 Latest 3.x-6.x Full feature support Python pylint 3.3.7 2.x-3.x JSON output recommended Python mypy Latest 0.9x-1.x Type checking support Python black Latest 22.x-24.x Formatting only Python isort Latest 5.x Import sorting JavaScript ESLint 8.57.1 7.x-8.x TypeScript via plugins JavaScript JSHint 2.13.6 2.x Legacy support JavaScript Prettier 3.6.2 2.x-3.x Multi-language formatting Ansible ansible-lint 25.6.1 6.x-25.x Multiple profiles Go gofmt Built-in All Go Standard formatting Go go vet Built-in All Go Static analysis Rust rustfmt Latest Stable Standard formatting Rust clippy Latest Stable Lint checking"},{"location":"reference/linter-plugins/#migration-guide","title":"Migration Guide","text":"<p>When upgrading linter versions, use the migration helper:</p> <pre><code># Check compatibility\naider-lint-fixer --check-versions\n\n# Generate migration report\naider-lint-fixer --migration-report\n</code></pre> <p>This comprehensive linter plugins reference provides all the information needed to understand, configure, and extend the linter ecosystem in aider-lint-fixer.</p>"},{"location":"research/dependabot-multi-environment-compatibility-research/","title":"Dependabot Multi-Environment Compatibility Research","text":"<p>Date: 2025-08-24 Category: CI/CD &amp; Dependency Management Status: In Progress Priority: High - Critical for Enterprise Deployment</p>"},{"location":"research/dependabot-multi-environment-compatibility-research/#research-questions","title":"Research Questions","text":""},{"location":"research/dependabot-multi-environment-compatibility-research/#1-rhel-container-base-image-dependency-updates","title":"1. RHEL Container Base Image Dependency Updates","text":"<p>Question: How does Dependabot handle dependency updates when we support both RHEL 9 and RHEL 10 base images with different package versions?</p> <p>Priority: Critical Timeline: Immediate Methodology: - Analyze current Dependabot Docker ecosystem configuration - Test dependency updates across RHEL 9 vs RHEL 10 containers - Evaluate ansible-lint version conflicts between RHEL versions</p> <p>Success Criteria: - [ ] RHEL-specific dependency update strategy documented - [ ] Container base image update testing validated - [ ] ansible-lint version compatibility matrix for Dependabot</p>"},{"location":"research/dependabot-multi-environment-compatibility-research/#2-multi-architecture-container-updates","title":"2. Multi-Architecture Container Updates","text":"<p>Question: How should Dependabot handle dependency updates for multi-architecture containers (amd64, arm64) across different RHEL versions?</p> <p>Priority: High Timeline: 1 week Methodology: - Review current multi-architecture support in containers - Test Dependabot updates across architectures - Validate dependency compatibility across platforms</p> <p>Success Criteria: - [ ] Multi-architecture dependency update workflow - [ ] Platform-specific dependency conflict resolution - [ ] Automated testing across architectures</p>"},{"location":"research/dependabot-multi-environment-compatibility-research/#3-enterprise-environment-dependency-constraints","title":"3. Enterprise Environment Dependency Constraints","text":"<p>Question: How should Dependabot respect enterprise environment constraints (air-gapped, specific package versions, compliance requirements)?</p> <p>Priority: High Timeline: 1-2 weeks Methodology: - Analyze enterprise deployment requirements from ADR 0008 - Design Dependabot configuration for enterprise constraints - Test dependency updates in enterprise-like environments</p> <p>Success Criteria: - [ ] Enterprise-aware Dependabot configuration - [ ] Air-gapped environment dependency strategy - [ ] Compliance-safe dependency update workflow</p>"},{"location":"research/dependabot-multi-environment-compatibility-research/#4-hybrid-python-javascript-dependency-management","title":"4. Hybrid Python-JavaScript Dependency Management","text":"<p>Question: How does Dependabot coordinate updates between Python (pip) and Node.js (npm) dependencies in our hybrid architecture?</p> <p>Priority: High Timeline: 1 week Methodology: - Review current pip and npm Dependabot configurations - Test cross-ecosystem dependency conflicts - Validate linter version compatibility (Python vs JS linters) - Analyze Python linter ecosystem (flake8, pylint, mypy) dependency management - Test JavaScript/TypeScript linter ecosystem (ESLint, Prettier, JSHint) updates</p> <p>Success Criteria: - [ ] Cross-ecosystem dependency coordination strategy - [ ] Conflict resolution for hybrid dependencies - [ ] Python linter version synchronization (flake8, pylint, mypy) - [ ] JavaScript linter version compatibility (ESLint 8.x/9.x, Prettier 2.x/3.x) - [ ] TypeScript ecosystem dependency management (@typescript-eslint)</p>"},{"location":"research/dependabot-multi-environment-compatibility-research/#5-cicd-pipeline-environment-compatibility","title":"5. CI/CD Pipeline Environment Compatibility","text":"<p>Question: How should Dependabot updates be tested across all supported deployment environments (local, containerized, enterprise, CI/CD)?</p> <p>Priority: Medium Timeline: 2 weeks Methodology: - Extend current Dependabot test workflow - Add environment-specific testing matrices - Validate updates across deployment scenarios</p> <p>Success Criteria: - [ ] Multi-environment testing matrix - [ ] Environment-specific validation workflows - [ ] Deployment environment compatibility checks</p>"},{"location":"research/dependabot-multi-environment-compatibility-research/#6-aider-chat-dependency-ecosystem-management","title":"6. Aider-chat Dependency Ecosystem Management","text":"<p>Question: How should we handle Dependabot updates for aider-chat sub-dependencies across different environments where AI API access may vary?</p> <p>Priority: Medium Timeline: 1 week Methodology: - Analyze current aider-chat dependency handling - Test AI integration across environments - Design environment-aware AI dependency management</p> <p>Success Criteria: - [ ] Environment-aware AI dependency strategy - [ ] Offline/air-gapped AI dependency handling - [ ] API access variation management</p>"},{"location":"research/dependabot-multi-environment-compatibility-research/#7-security-update-propagation-across-environments","title":"7. Security Update Propagation Across Environments","text":"<p>Question: How should security updates from Dependabot be validated and deployed across all supported environments consistently?</p> <p>Priority: High Timeline: 1 week Methodology: - Review current security update auto-merge workflow - Design multi-environment security validation - Test security update deployment across environments</p> <p>Success Criteria: - [ ] Multi-environment security update workflow - [ ] Consistent security validation across deployments - [ ] Emergency security update procedures</p>"},{"location":"research/dependabot-multi-environment-compatibility-research/#8-version-compatibility-matrix-management","title":"8. Version Compatibility Matrix Management","text":"<p>Question: How should Dependabot maintain compatibility matrices for dependencies across RHEL 9/10, Python 3.11+, Node.js 16+, and enterprise constraints?</p> <p>Priority: Medium Timeline: 2 weeks Methodology: - Create comprehensive version compatibility matrix - Automate compatibility validation in Dependabot workflow - Design version conflict resolution strategies</p> <p>Success Criteria: - [ ] Automated compatibility matrix validation - [ ] Version conflict detection and resolution - [ ] Environment-specific version constraints</p>"},{"location":"research/dependabot-multi-environment-compatibility-research/#current-context","title":"Current Context","text":""},{"location":"research/dependabot-multi-environment-compatibility-research/#existing-dependabot-configuration","title":"Existing Dependabot Configuration","text":"<ul> <li>Python Dependencies: Weekly updates, grouped by category (testing, code-quality, linters, core, aider-ecosystem)</li> <li>Node.js Dependencies: Weekly updates, conservative major version handling</li> <li>GitHub Actions: Weekly updates with action grouping</li> <li>Docker: Weekly updates with major version restrictions</li> <li>Auto-merge: Security, patch, testing, and code-quality updates</li> </ul>"},{"location":"research/dependabot-multi-environment-compatibility-research/#linter-ecosystem-dependencies-from-adrs-0005-0006","title":"Linter Ecosystem Dependencies (from ADRs 0005, 0006)","text":"<p>Python Linter Ecosystem (ADR 0005): - flake8: 85-95% fix success rate, PEP 8 style enforcement - pylint: 60-80% fix success rate, comprehensive code analysis - mypy: 70-85% fix success rate, static type checking - Configuration: <code>.flake8</code>, <code>.pylintrc</code>, <code>pyproject.toml</code> support - Integration: Direct subprocess execution with JSON output</p> <p>JavaScript/TypeScript Linter Ecosystem (ADR 0006): - ESLint: 90-95% formatting, 70-85% logic rules, versions 8.x/9.x - Prettier: 98% formatting fix success rate, versions 2.x/3.x - JSHint: 75-85% fix success rate, legacy JavaScript support - TypeScript: Full <code>@typescript-eslint</code> parser and plugin support - Integration: Native Node.js with npx/npm script execution</p>"},{"location":"research/dependabot-multi-environment-compatibility-research/#multi-environment-challenges","title":"Multi-Environment Challenges","text":"<ul> <li>RHEL 9 vs RHEL 10: Different ansible-lint versions and package availability</li> <li>Container vs Local: Different dependency resolution mechanisms</li> <li>Enterprise Constraints: Air-gapped environments, compliance requirements</li> <li>Hybrid Architecture: Python + Node.js dependency coordination</li> <li>Multi-Architecture: amd64 vs arm64 compatibility</li> <li>Linter Version Compatibility: Cross-ecosystem Python/JavaScript linter synchronization</li> </ul>"},{"location":"research/dependabot-multi-environment-compatibility-research/#current-auto-merge-categories","title":"Current Auto-merge Categories","text":"<p>\u2705 Safe for Auto-merge: - Security updates - Patch updates - Testing dependencies (pytest, coverage, mock) - Code quality tools (black, isort, flake8) - GitHub Actions</p> <p>\u274c Requires Manual Review: - Aider-chat sub-dependencies (grpcio, protobuf, aiohttp) - Major updates - Core dependencies - New: ESLint major version updates (8.x \u2192 9.x compatibility) - New: TypeScript ecosystem updates (@typescript-eslint)</p>"},{"location":"research/dependabot-multi-environment-compatibility-research/#research-dependencies","title":"Research Dependencies","text":"<ul> <li>RHEL 9/10 container testing environments</li> <li>Multi-architecture build pipeline</li> <li>Enterprise environment simulation</li> <li>Cross-ecosystem dependency mapping</li> <li>Security update validation framework</li> </ul>"},{"location":"research/dependabot-multi-environment-compatibility-research/#expected-outcomes","title":"Expected Outcomes","text":"<ol> <li>Environment-Aware Dependabot Strategy: Configuration that respects deployment environment constraints</li> <li>Multi-RHEL Dependency Management: Handling RHEL 9/10 version differences</li> <li>Enterprise-Compatible Updates: Air-gapped and compliance-aware dependency management</li> <li>Cross-Ecosystem Coordination: Python + Node.js dependency synchronization</li> <li>Security Update Propagation: Consistent security updates across all environments</li> <li>Automated Compatibility Validation: Environment-specific dependency testing</li> </ol>"},{"location":"research/dependabot-multi-environment-compatibility-research/#related-adrs","title":"Related ADRs","text":"<ul> <li>ADR-0005 - Python Linter Ecosystem (flake8, pylint, mypy dependency management)</li> <li>ADR-0006 - JavaScript/TypeScript Ecosystem (ESLint, Prettier, JSHint, TypeScript dependencies)</li> <li>ADR-0007 - Infrastructure/DevOps Linter Ecosystem (ansible-lint versions)</li> <li>ADR-0008 - Deployment Environments (RHEL 9/10, enterprise requirements)</li> </ul>"},{"location":"research/dependabot-multi-environment-compatibility-research/#next-steps","title":"Next Steps","text":"<ul> <li>[ ] Set up RHEL 9/10 Dependabot testing environments</li> <li>[ ] Create multi-environment dependency validation workflow</li> <li>[ ] Design enterprise-aware Dependabot configuration</li> <li>[ ] Test cross-ecosystem dependency coordination</li> <li>[ ] Implement environment-specific compatibility checks</li> </ul>"},{"location":"research/dependabot-multi-environment-compatibility-research/#references","title":"References","text":"<ul> <li>Current Dependabot configuration (.github/dependabot.yml)</li> <li>Dependabot auto-merge workflow (.github/workflows/dependabot-auto-merge.yml)</li> <li>RHEL package repositories and version matrices</li> <li>Enterprise container deployment requirements</li> <li>Multi-architecture container build documentation</li> </ul>"},{"location":"research/rhel-ansible-lint-compatibility-research-results/","title":"Rhel ansible lint compatibility research results","text":"<p>Strategic Analysis and Recommendation for RHEL 9 and RHEL 10 Container Image Support for Ansible AutomationExecutive Summary and Strategic RecommendationsThis report presents a comprehensive analysis to guide the strategic decision regarding container image support for ansible-lint across Red Hat Enterprise Linux (RHEL) 9 and the newly released RHEL 10. The central challenge stems from a fundamental and deliberate divergence in the version of ansible-core supplied within the respective operating systems. RHEL 9 has stabilized on ansible-core 2.14 for its entire lifecycle, while RHEL 10 ships with the more modern ansible-core 2.16. This incompatibility is not a transient issue but a strategic choice by Red Hat to ensure long-term stability, creating two distinct automation ecosystems that cannot be effectively served by a single, unified container image.A thorough evaluation of the underlying Universal Base Images (UBI) reveals that RHEL 10 offers significant, generational advancements over RHEL 9. The UBI 10 minimal image is approximately 16% smaller, leading to faster deployments and lower storage costs. Furthermore, RHEL 10 delivers superior performance due to its modern kernel and toolchain and introduces a new paradigm of security with features like Post-Quantum Cryptography (PQC), enhanced SELinux, and integrated compliance roles. Attempting to unify support in a single image would neutralize these advantages and introduce unacceptable levels of complexity and risk.Strategic Recommendation:Based on the extensive technical analysis of compatibility, performance, security, and long-term maintainability, this report unequivocally recommends the adoption of a separate, version-specific container image strategy. This involves creating and maintaining two distinct images: one built on UBI 9 for the RHEL 9 ecosystem and another built on UBI 10 for the RHEL 10 ecosystem.Key Justifications for this Recommendation:Mitigates Critical Compatibility Risks: Acknowledges and aligns with the intentional ansible-core version divergence between RHEL 9 and RHEL 10, eliminating the risk of runtime failures and dependency conflicts inherent in a unified approach.Maximizes Performance and Security: Allows the RHEL 10-based image to fully leverage the native performance and security enhancements of the new platform, including a smaller footprint, faster execution, and future-proof cryptography.Ensures a Stable and Predictable User Experience: Provides enterprise customers with clear, reliable, and optimized tools for their specific environments, reducing confusion and minimizing support incidents.Reduces Total Cost of Ownership (TCO): Avoids the immense complexity, high development cost, and significant support burden associated with a fragile, unified image in favor of two simple, automatable, and robust build pipelines.This dual-image strategy is the most prudent, stable, and forward-looking path. It provides a superior product to customers, aligns with Red Hat's platform strategy, and establishes a scalable model for supporting future RHEL releases.The Ansible Core Divergence: A Foundational Compatibility ChallengeThe primary technical driver necessitating this strategic analysis is a deliberate and permanent divergence in the Ansible Core versions supplied by Red Hat within the RHEL 9 and RHEL 10 AppStream repositories. This is not a simple version bump but a foundational split that has profound implications for any tooling, such as ansible-lint, that depends on the Ansible engine. Understanding this divergence is critical to formulating a viable container strategy.Analysis of Ansible Core Versions in RHEL AppStreamsRed Hat's strategy for including Ansible Core in RHEL is to enable its own supported automation content, such as RHEL system roles and Insights remediation playbooks.1 The versioning of this component is therefore tightly coupled to the support lifecycle of the host operating system itself.RHEL 9's Ansible Core StabilizationFor Red Hat Enterprise Linux 9, a strategic decision was made to stabilize the version of ansible-core to ensure predictable support throughout the operating system's long lifecycle.Early minor releases of RHEL 9 followed a pattern of updating ansible-core: RHEL 9.0 shipped with version 2.12, and RHEL 9.1 included version 2.13.1Beginning with RHEL 9.2, the provided version was updated to ansible-core 2.14. Subsequently, Red Hat announced that this version, 2.14, would be supported for the remainder of the entire RHEL 9 lifecycle.1 This commitment extends to May 2032, making ansible-core 2.14 a long-term support anchor for the RHEL 9 platform.2 The RHEL 9.6 AppStream, for instance, provides ansible-core-2.14.18-1.el9.3This decision was explicitly made to resolve \"challenges aligning support lifecycles between RHEL, Ansible Core and Python\".1 Underscoring this tight integration, RHEL 9.2 initially shipped ansible-core 2.14 with a dependency on Python 3.11. However, in RHEL 9.3, this was reverted to a dependency on Python 3.9, the official system Python version supported for the full RHEL 9 lifecycle.1 This move highlights the non-negotiable link between the OS, its core components, and the automation engine it supports. Any attempt to deviate from this established baseline within a RHEL 9 environment creates an unsupported and high-risk configuration.RHEL 10's Modernized Ansible CoreIn contrast to RHEL 9's focus on long-term stability, RHEL 10 adopts a more current version of the automation engine, reflecting the platform's overall modernization.The RHEL 10.0 AppStream repository ships with ansible-core 2.16.14-1.el10.3 This represents a significant two-major-version jump from the stabilized version in RHEL 9.This newer version of Ansible Core is paired with RHEL 10's updated system components, including the default system Python 3.12.5This split means that for the foreseeable future, any environment containing both RHEL 9 and RHEL 10 systems will be operating with two fundamentally different, officially supported versions of Ansible Core.Implications for ansible-lint Compatibility and FeaturesThe ansible-lint tool, while distributed separately, is not a standalone binary. It is deeply integrated with and dependent upon the underlying ansible-core libraries to function correctly. It uses these libraries to parse playbooks, understand module specifications, and validate syntax against the rules of a specific Ansible version.6 This direct dependency makes it impossible to treat the linter as a version-agnostic tool.The Linter's Versioning Philosophy: The ansible-lint project's official stance is to support only the last two major versions of Ansible. Furthermore, it explicitly recommends using the newest version of ansible-lint possible, as one of its primary goals is to help users upgrade their code to be compatible with newer Ansible releases.7 This forward-looking philosophy is fundamentally at odds with the long-term, static nature of ansible-core in RHEL 9.Divergent Rule Sets and Features: An ansible-lint version designed for ansible-core 2.16 will include rules that validate new syntax, check for new module arguments, and flag features that were deprecated or removed after version 2.14. Running such a linter against Ansible content intended for a pure RHEL 9 environment (using ansible-core 2.14) would generate a high volume of false positives, incorrectly flagging valid syntax as erroneous. Conversely, an older linter compatible with ansible-core 2.14 would be completely unaware of the new features, best practices, and deprecations introduced in versions 2.15 and 2.16, rendering it ineffective and potentially dangerous for linting content intended for a RHEL 10 environment.10The technical reality is that the ansible-core versions in RHEL 9 and RHEL 10 constitute two distinct ecosystems. A single linter configuration cannot effectively or safely serve both. This reality is summarized in the compatibility matrix below.AttributeRHEL 9 (UBI 9)RHEL 10 (UBI 10)RHEL Lifecycle EndMay 2032 2May 2035 2System PythonPython 3.9 1Python 3.12 5AppStream ansible-core2.14.x (Frozen for lifecycle) 12.16.x (Current GA version) 3Supported ansible-lintVersions compatible with ansible-core 2.14Versions compatible with ansible-core 2.16+Key ConsiderationMust not introduce features or rules incompatible with the 2.14 runtime.Can leverage the latest ansible-lint rules and features for modern Ansible.Base Image Analysis: Performance, Security, and ComplianceBeyond the critical Ansible compatibility issue, the choice of container base image is also influenced by the inherent capabilities of the underlying operating system. An analysis of Red Hat Universal Base Image (UBI) 9 versus UBI 10 reveals that RHEL 10 is not merely an incremental update but a significant generational leap in performance, security, and efficiency. These platform-level differences provide compelling reasons to treat the two as distinct offerings.Performance and Resource Implications (UBI 9 vs. UBI 10)The base image forms the foundation of the container, and its characteristics directly impact storage costs, deployment speed, and runtime performance. In these areas, UBI 10 demonstrates clear advantages.Container Image Size: A direct comparison of the minimal base images shows a significant size reduction in the newer version. The redhat/ubi9-minimal:9.6 image has a compressed size of 37.8 MB.12 In contrast, the redhat/ubi10-beta/ubi-minimal:10.0-beta image is substantially smaller at 31.7 MB compressed.13 This represents a ~16% reduction in size. In enterprise environments with large-scale container deployments, this reduction translates directly into lower container registry storage costs, reduced network bandwidth consumption, and faster image pull times, accelerating CI/CD pipelines and application scaling.Runtime Performance: While container-specific benchmarks are not available, host-level performance comparisons provide strong indicators of the expected runtime behavior. Independent benchmarks of the RHEL 10 beta against RHEL 9.5 stable on modern AMD EPYC server hardware showed that RHEL 10 \"looks great\" and can deliver faster results.14 This performance uplift is attributed to major upgrades in foundational components that directly benefit containerized workloads:Kernel: RHEL 10 uses the modern Linux Kernel 6.12, a substantial advance over the 5.14 kernel in RHEL 9.5 This brings improvements in the process scheduler, memory management, I/O handling, and networking stack, all of which contribute to more efficient container execution.Compiler and Toolchain: RHEL 10 defaults to GCC 14.2, compared to GCC 11.5 in RHEL 9.5.15 A modern compiler can produce more highly optimized binaries, leading to faster application performance.Hardware Optimization: RHEL 10 mandates the x86-64-v3 microarchitecture as a minimum requirement. This allows all binaries in the distribution, and by extension within the UBI 10 image, to be compiled with support for advanced instruction sets like AVX and AVX2, providing a significant performance boost for computationally intensive tasks.14Security and Compliance Posture DivergenceSecurity is a paramount concern for enterprise deployments, and RHEL 10 introduces a new security paradigm that moves beyond the robust foundation of RHEL 9 to address emerging and future threats.A Generational Leap in Security: RHEL 10 is not just an update; it represents a strategic shift in the platform's security value proposition.Post-Quantum Cryptography (PQC): RHEL 10 is the first major enterprise Linux distribution to integrate FIPS-compliant post-quantum cryptography algorithms.16 This is a forward-looking feature designed to protect sensitive data against \"harvest now, decrypt later\" attacks, where encrypted data is collected today with the intent of being decrypted by future quantum computers. For organizations in regulated industries or those with long-term data retention requirements, this is a critical differentiator.Improved and More Usable SELinux: While SELinux has long been a cornerstone of RHEL security, the implementation in RHEL 10 has been enhanced for greater flexibility and usability. It features more intuitive configuration, improved auditing, and streamlined troubleshooting tools, lowering the barrier for administrators to implement and maintain strong mandatory access controls within containerized environments.16Encrypted DNS: RHEL 10 provides native integration for both DNS over HTTPS (DoH) and DNS over TLS (DoT).16 This protects DNS queries from interception and manipulation, a crucial capability for implementing modern zero-trust security architectures.Integrated Compliance Roles: A significant operational improvement in RHEL 10 is the introduction of ready-to-use system roles for automating security compliance. These roles allow administrators to enforce standards such as CIS benchmarks or STIG profiles with pre-defined, tested Ansible playbooks, drastically simplifying the process of hardening systems and containers compared to the manual or custom scripting required in RHEL 9.19UBI Licensing and Redistribution: A key enabler for any container strategy is the licensing of the base image. Both UBI 9 and UBI 10 are governed by the Red Hat UBI End-User License Agreement (EULA), which makes their components freely redistributable.23 This allows for the building and sharing of container images with customers and the wider community, regardless of their Red Hat subscription status. This is a critical feature that underpins the viability of distributing our ansible-lint tool. It is important to note, however, that adding packages from standard (non-UBI) RHEL repositories into a UBI-based image can reintroduce licensing restrictions that limit redistribution.24The differences between the two platforms are substantial enough that treating them as interchangeable would be a strategic error. A UBI 10-based container is not just an update; it is a superior product offering tangible benefits in performance and security.FeatureRHEL 9 UBIRHEL 10 UBIImpact on Containerized ansible-lintKernel Version5.14 26.12 5Improved performance, efficiency, and security syscalls in RHEL 10.Minimal Image Size~37.8 MB 12~31.7 MB 13Faster pull times, lower storage costs, and reduced attack surface for RHEL 10.CryptographyOpenSSL 3.0, FIPS 140-2 16Post-Quantum Cryptography (PQC), TLS 1.3 default 16RHEL 10 offers future-proofed data protection for sensitive automation tasks.Access ControlSELinux 16Enhanced, more usable SELinux 16Easier to run ansible-lint in a securely confined container on RHEL 10.ComplianceManual/custom playbooks 20Integrated System Roles for CIS/STIG 19Simplifies building and deploying hardened, compliant ansible-lint containers.The Core Decision: Unified vs. Separate Container Image StrategySynthesizing the foundational ansible-core incompatibility and the significant platform differences between RHEL 9 and RHEL 10, the central strategic question can now be addressed: should a unified container image be pursued, or should separate, version-specific images be maintained? The analysis concludes that the risks and compromises of a unified approach far outweigh its perceived benefits, making a separate image strategy the only viable path forward.Option A: The Unified Image Approach (Not Recommended)The concept of a unified image involves building a single Docker image, likely with a :latest tag, that contains logic to detect its runtime environment and install the appropriate versions of ansible-lint and its dependencies. This approach, while superficially appealing for its promise of a single artifact, is fraught with technical complexity and operational risk.Implementation Complexity and Brittleness: A unified Dockerfile would require complex multi-stage builds or a sophisticated entrypoint script. This script would need to reliably detect the host environment (e.g., RHEL 9 vs. RHEL 10) and then conditionally install either ansible-core 2.14 or 2.16, along with their respective dependencies. This creates a fragile artifact where a failure in the detection logic could lead to a completely non-functional container. This approach is difficult to develop, test, and maintain over time.Insurmountable Dependency Conflicts: The core challenge lies in managing the conflicting dependency trees of ansible-core 2.14 and 2.16 within a single image filesystem. These versions rely on different versions of Python and other system libraries. Attempting to install both side-by-side would lead to a classic \"dependency hell\" scenario, likely requiring complex workarounds that would bloat the image and increase its instability.Compromised Performance and Security: To function, a unified image would likely need to be based on the lowest common denominator, UBI 9, thereby forfeiting the 16% size reduction, superior runtime performance, and advanced security features of UBI 10. Alternatively, it would have to carry the dependency overhead for both environments, making it significantly larger and more complex than either of the separate images. The advanced security posture of RHEL 10 could not be reliably enabled or leveraged.High Risk of Runtime Failure: The most significant danger of this approach is the risk of subtle, environment-specific failures. An image might build successfully in a CI environment but fail at runtime in a customer's production environment due to a mismatch between a library in the container and the host's kernel or system services. This violates the fundamental \"build once, run anywhere\" promise of containers 26 and creates a support nightmare that is difficult and costly to diagnose and resolve.Option B: The Separate Image Approach (Recommended)The recommended strategy is to maintain two distinct, purpose-built container images, managed through separate build pipelines and identified with clear, explicit tags.Example Tagging Scheme:our-registry/ansible-lint:rhel9 (Built on UBI 9, installing ansible-core 2.14)our-registry/ansible-lint:rhel10 (Built on UBI 10, installing ansible-core 2.16)Primary Benefits:Reliability and Stability: Each image is built and tested for a single, well-defined target platform. This eliminates all guesswork and environmental detection logic. The resulting artifacts are highly stable and predictable, as the environment they are tested in is identical to the one they will run in.Simplicity and Maintainability: The build process for each image is simple and linear. The Dockerfiles are clean and easy to understand. While there are two build pipelines to maintain, their simplicity makes them far less costly to manage than a single, highly complex one. The perceived \"maintenance overhead\" of two simple pipelines is a fallacy when compared to the total cost of ownership of a single, brittle, and complex artifact. The high development, testing, and long-term support costs of a unified image would far exceed the predictable and automatable cost of maintaining two separate images.Optimized Performance and Security: The RHEL 10 image can be built on a UBI 10 base without compromise, fully leveraging its smaller size, the performance benefits of the modern kernel and toolchain, and its advanced security features like PQC and enhanced SELinux.Clarity and User Experience: This approach is transparent and intuitive for users. They can explicitly select the image that matches their environment, removing ambiguity and reducing the likelihood of user error.Future-Proof Architecture: This model is inherently scalable. When RHEL 11 is released, a new ansible-lint:rhel11 image and build pipeline can be added without impacting the existing, stable images for RHEL 9 and RHEL 10.The following decision matrix provides a clear, comparative evaluation of the two strategies against key business and technical criteria.CriterionUnified Image ApproachSeparate Image ApproachReliabilityPoor. High risk of runtime failures due to dependency conflicts.Excellent. Each image is native to its target OS, ensuring stability.MaintainabilityPoor. Extremely complex build logic. High cost to debug and update.Good. Simple, duplicated build pipelines are easy to manage and automate.PerformanceFair. Forced to use lowest common denominator, negating RHEL 10 benefits.Excellent. Each image is optimized for its base OS, maximizing performance.SecurityFair. Cannot fully leverage RHEL 10's advanced security posture.Excellent. The RHEL 10 image can be built with all native security enhancements.User ExperiencePoor. \"Magic\" behavior is confusing. Failures are hard to diagnose.Excellent. Clear, explicit, and predictable for users.Future-ProofingPoor. Brittle design that is hard to extend to RHEL 11.Excellent. The model is easily extensible to future OS versions.OVERALL SCORE2.0 / 5.0 (Not Viable)4.8 / 5.0 (Recommended)Enterprise Testing and Deployment WorkflowsAdopting the recommended separate-image strategy requires a well-structured testing and deployment workflow that ensures the quality and reliability of both images, particularly within the mixed-version environments common to enterprise customers. The testing strategy must validate not only that each image works on its native platform but also that they are compatible with the transitional states customers will experience.Structuring a Multi-Version CI/CD PipelineA robust CI/CD pipeline is essential for automating the build, test, and release process for the two separate images. This pipeline should be designed to handle the parallel workflows efficiently.Source Control Strategy: The core Ansible content (playbooks, roles) that is being linted should remain in a single codebase. To manage the container builds, two distinct Dockerfiles should be maintained within the repository: Dockerfile.rhel9 and Dockerfile.rhel10. This keeps the build definitions separate and explicit.Parallel Pipeline Stages: The CI/CD pipeline, whether implemented in GitHub Actions, GitLab CI, or another tool, should be structured with parallel jobs to maximize efficiency.8Build Stage: Two parallel jobs are triggered on each commit. One job builds the ansible-lint:rhel9 image using Dockerfile.rhel9, and the other builds the ansible-lint:rhel10 image using Dockerfile.rhel10.Linting Stage: After the build stage, a set of jobs uses the newly created images to lint the target Ansible codebase. This serves as a basic sanity check, confirming that the linters themselves are functional and correctly configured.Integration Test Stage: This is the most critical validation step. Using a framework like Molecule, which is designed for testing Ansible roles, automated tests should be executed.28 These tests should not just run the linter but also execute simple playbooks inside actual RHEL 9 and RHEL 10 container environments. This validates that the entire toolchain, from the base image to ansible-core to ansible-lint, is functioning correctly.Publish Stage: Upon the successful completion of all prior stages, the versioned and tagged images (:rhel9 and :rhel10) are pushed to the designated container registry.Manual Testing and UAT for Mixed EnvironmentsWhile automation is key, manual and User Acceptance Testing (UAT) remain crucial for validating scenarios that are difficult or costly to automate. The focus should be on real-world customer configurations and, most importantly, the interoperability between RHEL versions.Enterprise customers will not perform a \"big bang\" upgrade from RHEL 9 to RHEL 10. They will operate in a mixed state for months or even years. Red Hat explicitly engineers its Universal Base Images for cross-version compatibility, meaning a UBI 9 container is supported on a RHEL 10 host, and vice versa.23 While the base OS layer is supported, the application layer\u2014our ansible-lint tool and its dependencies\u2014must also be validated in these mixed scenarios. A failure of our application in a supported configuration is still a failure of our product.Therefore, the testing strategy must validate the full compatibility matrix, not just the native endpoints. The manual testing workflow must include:Scenario 1: Running the ansible-lint:rhel9 container on a RHEL 9 host (Native).Scenario 2: Running the ansible-lint:rhel10 container on a RHEL 10 host (Native).Scenario 3: Running the ansible-lint:rhel9 container on a RHEL 10 host (Cross-Version).Scenario 4: Running the ansible-lint:rhel10 container on a RHEL 9 host (Cross-Version).Successfully passing these tests provides high confidence that the images will function reliably for customers throughout their transition period from RHEL 9 to RHEL 10.Impact on Enterprise CustomersThe separate image strategy, when paired with clear communication, has a net positive impact on enterprise customers operating in complex, heterogeneous environments.30Clarity and Predictability: This approach eliminates the ambiguity of a \"magic\" unified image. Customers know exactly which image to use for their specific environment. A team standardizing on RHEL 9 can use the :rhel9 tag with confidence in its stability and compatibility. A team migrating to RHEL 10 can immediately adopt the :rhel10 tag to gain access to the latest features and performance improvements. This clarity prevents support incidents caused by unexpected behavior.Managing Toolchain Integration: Customers will need to be made aware of the two distinct image tags. This requires clear documentation so they can update their internal tooling, such as CI/CD pipelines, security scanning policies, and deployment manifests. While this represents a minor initial effort for the customer, it is preferable to the unpredictable failures of a unified image.Empowering Customer Choice and Strategy: By providing two optimized images, this strategy empowers customers. It allows them to align their automation tooling with their own infrastructure roadmap. They are not forced to use a lowest-common-denominator tool but can instead choose the version that best fits their current and future needs. This flexibility is a key value proposition for enterprise clients.Customer Migration and Transition PathImplementing the recommended dual-image strategy requires a clear and well-communicated migration plan for existing users. The goal is to guide users to the new, explicitly tagged images smoothly, minimize disruption to their workflows, and use the transition as an opportunity to highlight the benefits of the new RHEL 10-based offering. A phased approach is recommended to ensure a successful rollout.Phased Rollout StrategyA multi-phase plan allows for a gradual transition, providing users with ample time to adapt while establishing the RHEL 10 image as the new standard.Phase 1: Announcement and Initial Release (Weeks 0-4)Communication: Publish comprehensive documentation detailing the new dual-image strategy. This documentation must clearly explain the rationale behind the decision, emphasizing the benefits of improved stability, performance, and security.Release: Release both the our-registry/ansible-lint:rhel9 and our-registry/ansible-lint:rhel10 images simultaneously.Backward Compatibility: To prevent breaking existing user pipelines, the generic :latest tag must initially be updated to point to the :rhel9 image. This ensures that users who have not yet updated their configurations will continue to receive a compatible image.Phase 2: Transition and Promotion (Weeks 4-12)Active Promotion: Begin a communication campaign to actively promote the benefits of the new :rhel10 image. This should highlight the performance gains, smaller image size, and advanced security features detailed in Section 3 of this report.Documentation Updates: All official documentation, README files, tutorials, and example code must be updated to use the new, explicit tags (:rhel9 and :rhel10) instead of :latest.In-Tool Notification: A warning message should be added to the startup log of the :rhel9 image. This message should inform users about the availability of the new :rhel10 image and announce the upcoming date when the :latest tag will be redirected.Phase 3: :latest Tag Redirection (Week 12)After a three-month grace period, the :latest tag should be officially retagged to point to the :rhel10 image. This action formally establishes the RHEL 10 version as the new default and recommended standard for new projects.This change must be communicated clearly and widely across all channels (e.g., release notes, blog posts, community forums) at least two weeks prior to the change and again on the day of the change.Phase 4: Deprecation of Old Images (Months 6-12)After six months, announce a formal deprecation timeline for any legacy images that do not follow the new tagging convention. This provides a clear end-of-life for older artifacts and encourages all users to migrate to the fully supported, explicitly tagged images.Documentation and Communication PlanClear, proactive communication is the cornerstone of a successful migration. The documentation should not only state what is changing but, more importantly, why it is changing.Dedicated Migration Guide: A new documentation page titled \"Migrating to the New RHEL-Based ansible-lint Images\" should be created. This guide will serve as the central source of truth for the transition. It should include:A summary of the rationale (aligning with RHEL ansible-core versions).Copy-and-paste examples for updating Dockerfiles, docker-compose.yml files, CI/CD scripts (like .gitlab-ci.yml or GitHub Actions workflows), and Kubernetes deployment manifests.Clear Tagging Policy: The documentation must explicitly define the new image tagging policy. For example:ansible-lint:rhel9: A floating tag that always points to the latest stable release for the RHEL 9 series.ansible-lint:rhel9-v1.2.3: An immutable tag for a specific version.ansible-lint:rhel10: A floating tag for the RHEL 10 series.ansible-lint:rhel10-v1.2.3: An immutable tag for a specific RHEL 10 version.Use-Case Guidance: The migration itself is an opportunity to educate users and promote the value of the new platform. The documentation should provide clear guidance on which image to choose, framing it not as a chore but as a strategic choice. For example:\"For maximum compatibility with automation targeting or running on RHEL 9 hosts, use the :rhel9 tag. This ensures your linting environment perfectly matches the long-term supported ansible-core 2.14.\"\"For the best performance, smallest image size, and most advanced security features, including Post-Quantum Cryptography, use the :rhel10 tag. This is the recommended choice for all new projects and for environments migrating to RHEL 10.\"By framing the migration in this way, the required action of changing an image tag becomes a moment for the user to make a value-driven decision. It encourages them to adopt the superior RHEL 10-based offering and helps them build the business case for their own organization's migration to the next generation of Red Hat Enterprise Linux.</p>"},{"location":"research/rhel-ansible-lint-compatibility-research/","title":"RHEL-based Container Image Support Research","text":"<p>Date: 2025-08-24 Category: Infrastructure &amp; Enterprise Compatibility Status: In Progress Priority: High - Immediate Decision Needed</p>"},{"location":"research/rhel-ansible-lint-compatibility-research/#research-questions","title":"Research Questions","text":""},{"location":"research/rhel-ansible-lint-compatibility-research/#1-rhel-version-compatibility-matrix","title":"1. RHEL Version Compatibility Matrix","text":"<p>Question: What are the specific ansible-lint version compatibility differences between RHEL 9 and RHEL 10 base images?</p> <p>Priority: Critical Timeline: Immediate Methodology:  - Compare ansible-lint versions available in RHEL 9 vs RHEL 10 repositories - Test ansible-lint functionality across both RHEL versions - Document version-specific feature differences</p> <p>Success Criteria: - [ ] Complete version matrix documented - [ ] Functional testing results for both RHEL versions - [ ] Performance comparison data</p>"},{"location":"research/rhel-ansible-lint-compatibility-research/#2-enterprise-testing-requirements","title":"2. Enterprise Testing Requirements","text":"<p>Question: How should we structure manual testing workflows for ansible-lint across different RHEL versions in enterprise environments?</p> <p>Priority: High Timeline: 1-2 weeks Methodology: - Analyze current testing workflows in ADR 0007 - Design RHEL-specific testing scenarios - Validate enterprise compliance requirements</p> <p>Success Criteria: - [ ] Testing workflow documentation - [ ] RHEL-specific test cases defined - [ ] Enterprise validation checklist</p>"},{"location":"research/rhel-ansible-lint-compatibility-research/#3-container-base-image-strategy","title":"3. Container Base Image Strategy","text":"<p>Question: Should we maintain separate container images for RHEL 9 and RHEL 10, or use a unified approach?</p> <p>Priority: High Timeline: 1 week Methodology: - Evaluate current RHEL UBI 9 strategy from ADR 0008 - Assess multi-version container maintenance overhead - Compare unified vs separate image approaches</p> <p>Success Criteria: - [ ] Container strategy recommendation - [ ] Maintenance overhead analysis - [ ] Implementation roadmap</p>"},{"location":"research/rhel-ansible-lint-compatibility-research/#4-ansible-lint-version-management","title":"4. Ansible-lint Version Management","text":"<p>Question: How should we handle ansible-lint version differences between RHEL 9 (older versions) and RHEL 10 (newer versions)?</p> <p>Priority: High Timeline: 1 week Methodology: - Document current ansible-lint version handling - Test version-specific rule compatibility - Design version-aware configuration system</p> <p>Success Criteria: - [ ] Version management strategy - [ ] Backward compatibility testing - [ ] Configuration system design</p>"},{"location":"research/rhel-ansible-lint-compatibility-research/#5-enterprise-deployment-impact","title":"5. Enterprise Deployment Impact","text":"<p>Question: What are the implications of supporting both RHEL 9 and RHEL 10 for enterprise customers with mixed environments?</p> <p>Priority: Medium Timeline: 2 weeks Methodology: - Survey enterprise deployment patterns - Analyze mixed-environment scenarios - Document deployment complexity</p> <p>Success Criteria: - [ ] Enterprise impact assessment - [ ] Mixed-environment support strategy - [ ] Customer migration guidance</p>"},{"location":"research/rhel-ansible-lint-compatibility-research/#6-performance-and-resource-implications","title":"6. Performance and Resource Implications","text":"<p>Question: How do RHEL 9 vs RHEL 10 base images compare in terms of container size, startup time, and resource usage?</p> <p>Priority: Medium Timeline: 1 week Methodology: - Benchmark container metrics across RHEL versions - Compare resource utilization patterns - Analyze CI/CD pipeline impact</p> <p>Success Criteria: - [ ] Performance benchmark results - [ ] Resource usage comparison - [ ] CI/CD impact analysis</p>"},{"location":"research/rhel-ansible-lint-compatibility-research/#7-security-and-compliance-considerations","title":"7. Security and Compliance Considerations","text":"<p>Question: Are there security or compliance differences between RHEL 9 and RHEL 10 that affect our container strategy?</p> <p>Priority: Medium Timeline: 2 weeks Methodology: - Review RHEL security feature differences - Assess compliance requirement changes - Validate security scanning compatibility</p> <p>Success Criteria: - [ ] Security feature comparison - [ ] Compliance requirement analysis - [ ] Security scanning validation</p>"},{"location":"research/rhel-ansible-lint-compatibility-research/#8-migration-and-transition-strategy","title":"8. Migration and Transition Strategy","text":"<p>Question: If we decide to support both RHEL versions, what is the optimal migration path for existing users?</p> <p>Priority: Low Timeline: 3 weeks Methodology: - Design migration scenarios - Plan backward compatibility approach - Create transition documentation</p> <p>Success Criteria: - [ ] Migration strategy document - [ ] Backward compatibility plan - [ ] User transition guide</p>"},{"location":"research/rhel-ansible-lint-compatibility-research/#current-context","title":"Current Context","text":""},{"location":"research/rhel-ansible-lint-compatibility-research/#existing-architecture-from-adrs","title":"Existing Architecture (from ADRs)","text":"<ul> <li>ADR 0008: Currently uses RHEL UBI 9 base images for development containers</li> <li>ADR 0007: Defines ansible-lint integration with version management (enterprise/rhel10/latest)</li> <li>Container Infrastructure: Containerfile.dev uses RHEL UBI 9, production uses Python slim</li> </ul>"},{"location":"research/rhel-ansible-lint-compatibility-research/#key-constraints","title":"Key Constraints","text":"<ul> <li>Enterprise customers may be on RHEL 9 or RHEL 10</li> <li>ansible-lint versions differ significantly between RHEL versions</li> <li>Manual testing requirements for enterprise validation</li> <li>Container image maintenance overhead considerations</li> </ul>"},{"location":"research/rhel-ansible-lint-compatibility-research/#research-dependencies","title":"Research Dependencies","text":"<ul> <li>Current container infrastructure analysis</li> <li>Enterprise customer environment survey</li> <li>ansible-lint version compatibility testing</li> <li>Performance benchmarking setup</li> </ul>"},{"location":"research/rhel-ansible-lint-compatibility-research/#expected-outcomes","title":"Expected Outcomes","text":"<ol> <li>Clear RHEL Support Strategy: Decision on single vs multi-version support</li> <li>Version Compatibility Matrix: Detailed ansible-lint version mapping</li> <li>Testing Framework: RHEL-specific testing procedures</li> <li>Implementation Plan: Roadmap for RHEL support changes</li> <li>Enterprise Guidance: Customer deployment recommendations</li> </ol>"},{"location":"research/rhel-ansible-lint-compatibility-research/#related-adrs","title":"Related ADRs","text":"<ul> <li>ADR-0007 - Infrastructure/DevOps Linter Ecosystem Support</li> <li>ADR-0008 - Deployment Environments and Runtime Requirements</li> </ul>"},{"location":"research/rhel-ansible-lint-compatibility-research/#next-steps","title":"Next Steps","text":"<ul> <li>[ ] Begin RHEL version compatibility testing</li> <li>[ ] Set up RHEL 9 and RHEL 10 test environments</li> <li>[ ] Document current ansible-lint version differences</li> <li>[ ] Create enterprise customer survey</li> <li>[ ] Benchmark container performance across RHEL versions</li> </ul>"},{"location":"research/rhel-ansible-lint-compatibility-research/#references","title":"References","text":"<ul> <li>RHEL 9 ansible-lint package information</li> <li>RHEL 10 ansible-lint package information</li> <li>Enterprise container deployment best practices</li> <li>Current aider-lint-fixer container documentation</li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Learning-oriented guides for newcomers to aider-lint-fixer</p>"},{"location":"tutorials/#available-guides","title":"Available Guides","text":"<p>This section contains step-by-step tutorials following the Diataxis framework, designed to help you learn aider-lint-fixer through hands-on practice.</p> <p>Tutorials are learning-oriented and help newcomers get started: - Take you through the complete process step by step - Focus on learning by doing with real examples - Ensure you succeed in accomplishing specific goals - Build confidence through successful completion</p>"},{"location":"tutorials/#contents","title":"Contents","text":""},{"location":"tutorials/#getting-started","title":"Getting Started","text":"<ul> <li>Getting Started with Aider-Lint-Fixer - Your first steps with installation, configuration, and basic usage</li> <li>Getting Started with Containers - Learn to use aider-lint-fixer with Docker and Podman containers</li> </ul>"},{"location":"tutorials/#development-workflow","title":"Development Workflow","text":"<ul> <li>Setting Up Your Development Environment - Complete Python development setup for contributing</li> <li>Writing and Running Tests - Learn the testing framework and write effective tests</li> <li>Container Deployment Tutorial - Advanced container deployment strategies</li> </ul>"},{"location":"tutorials/#learning-path","title":"Learning Path","text":"<p>New to aider-lint-fixer? Follow this recommended learning path:</p> <ol> <li>Start Here: Getting Started - Install and run your first lint fixes</li> <li>Containers: Getting Started with Containers - Use containers for consistent environments</li> <li>Development: Development Environment - Set up for contributing</li> <li>Testing: Writing Tests - Learn the testing practices</li> <li>Advanced: Container Deployment - Production deployment patterns</li> </ol>"},{"location":"tutorials/#what-youll-learn","title":"What You'll Learn","text":"<p>By completing these tutorials, you'll be able to: - Install and configure aider-lint-fixer for your projects - Run linting checks and apply automatic fixes - Use containers for consistent execution environments - Set up a complete development environment - Write and run tests for aider-lint-fixer components - Deploy aider-lint-fixer in production environments</p>"},{"location":"tutorials/#prerequisites","title":"Prerequisites","text":"<p>Most tutorials assume you have: - Basic command-line familiarity - Python 3.11+ installed - Git for version control - Text editor or IDE</p> <p>Specific tutorials may have additional requirements, which are listed in each guide.</p>"},{"location":"tutorials/#need-help","title":"Need Help?","text":"<p>If you get stuck during any tutorial: - Check the Troubleshooting Guide - Review the How-To Guides for specific tasks - Consult the Architecture Overview for system understanding</p>"},{"location":"tutorials/container-deployment/","title":"Container Deployment Guide","text":"<p>This tutorial walks you through deploying aider-lint-fixer using containers, covering both the default container for general development and RHEL-specific customer builds.</p>"},{"location":"tutorials/container-deployment/#overview","title":"Overview","text":"<p>aider-lint-fixer provides two container strategies:</p> <ul> <li>Default Container: Optimized for macOS and Ubuntu with latest ansible-lint</li> <li>RHEL Containers: Customer-build approach for RHEL 9 and RHEL 10 environments</li> </ul>"},{"location":"tutorials/container-deployment/#default-container-macosubuntu","title":"Default Container (macOS/Ubuntu)","text":""},{"location":"tutorials/container-deployment/#quick-start","title":"Quick Start","text":"<pre><code># Build the default container\ndocker build -t aider-lint-fixer:latest .\n\n# Run on your project\ndocker run --rm -v $(pwd):/workspace:ro \\\n  aider-lint-fixer:latest \\\n  --linters flake8,ansible-lint --dry-run\n</code></pre>"},{"location":"tutorials/container-deployment/#whats-included","title":"What's Included","text":"<p>The default container includes: - Latest ansible-lint with newest rules and features - Python linters: flake8, pylint, mypy - JavaScript linters: ESLint, JSHint, Prettier - No subscription requirements or licensing constraints</p>"},{"location":"tutorials/container-deployment/#container-features","title":"Container Features","text":"<ul> <li>Non-root execution: Runs as user ID 1001 for security</li> <li>Volume mounting: Mount your project at <code>/workspace</code></li> <li>Environment variables: Configurable via environment</li> <li>Health checks: Built-in container health monitoring</li> </ul>"},{"location":"tutorials/container-deployment/#rhel-container-strategy","title":"RHEL Container Strategy","text":""},{"location":"tutorials/container-deployment/#why-customer-build","title":"Why Customer-Build?","text":"<p>RHEL containers require customer builds due to: - Red Hat subscription requirements for ansible-core - Version-specific ansible-core tied to RHEL lifecycle - Licensing constraints preventing pre-built distribution</p>"},{"location":"tutorials/container-deployment/#rhel-9-container","title":"RHEL 9 Container","text":"<p>Note: Build scripts use Podman by default (RHEL's native container tool).</p> <pre><code># Use automated build script (uses Podman automatically)\n./scripts/containers/build-rhel9.sh\n\n# Or build manually with Podman (recommended)\npodman build \\\n  --build-arg RHEL_USERNAME=your-username \\\n  --build-arg RHEL_PASSWORD=your-password \\\n  -f Dockerfile.rhel9 \\\n  -t my-company/aider-lint-fixer:rhel9 .\n\n# Or build manually with Docker (fallback)\ndocker build \\\n  --build-arg RHEL_USERNAME=your-username \\\n  --build-arg RHEL_PASSWORD=your-password \\\n  -f Dockerfile.rhel9 \\\n  -t my-company/aider-lint-fixer:rhel9 .\n</code></pre> <p>RHEL 9 Specifications: - ansible-core 2.14 (frozen for RHEL 9 lifecycle until May 2032) - Python 3.9 system dependency - UBI 9 base image</p>"},{"location":"tutorials/container-deployment/#rhel-10-container","title":"RHEL 10 Container","text":"<pre><code># Use automated build script with security scanning (uses Podman automatically)\n./scripts/containers/build-rhel10.sh --validate --security-scan\n\n# Or build manually with Podman (recommended)\npodman build \\\n  --build-arg RHEL_USERNAME=your-username \\\n  --build-arg RHEL_PASSWORD=your-password \\\n  -f Dockerfile.rhel10 \\\n  -t my-company/aider-lint-fixer:rhel10 .\n\n# Or build manually with Docker (fallback)\ndocker build \\\n  --build-arg RHEL_USERNAME=your-username \\\n  --build-arg RHEL_PASSWORD=your-password \\\n  -f Dockerfile.rhel10 \\\n  -t my-company/aider-lint-fixer:rhel10 .\n</code></pre> <p>RHEL 10 Specifications: - ansible-core 2.16+ (modern version with latest features) - Python 3.12 system dependency - UBI 10 base image (16% smaller than UBI 9) - Post-Quantum Cryptography support</p>"},{"location":"tutorials/container-deployment/#build-script-features","title":"Build Script Features","text":""},{"location":"tutorials/container-deployment/#rhel-9-build-script","title":"RHEL 9 Build Script","text":"<pre><code># Interactive build (prompts for credentials)\n./scripts/containers/build-rhel9.sh\n\n# Build with specific configuration\n./scripts/containers/build-rhel9.sh \\\n  --name my-company/aider-lint-fixer \\\n  --tag v1.0-rhel9 \\\n  --registry quay.io \\\n  --validate\n\n# Dry run to see build command\n./scripts/containers/build-rhel9.sh --dry-run\n</code></pre>"},{"location":"tutorials/container-deployment/#rhel-10-build-script","title":"RHEL 10 Build Script","text":"<pre><code># Build with security scanning\n./scripts/containers/build-rhel10.sh \\\n  --name my-company/aider-lint-fixer \\\n  --tag v2.0-rhel10 \\\n  --validate \\\n  --security-scan\n</code></pre>"},{"location":"tutorials/container-deployment/#script-features","title":"Script Features","text":"<ul> <li>Interactive credential prompting for secure RHEL subscription handling</li> <li>Validation and testing capabilities with built-in health checks</li> <li>Security scanning integration (Trivy/Grype support)</li> <li>Dry-run capabilities for testing build commands</li> <li>Registry integration support for enterprise container registries</li> </ul>"},{"location":"tutorials/container-deployment/#security-best-practices","title":"Security Best Practices","text":""},{"location":"tutorials/container-deployment/#credential-management","title":"Credential Management","text":"<pre><code># Use environment variables\nexport RHEL_USERNAME=your-username\nexport RHEL_PASSWORD=your-password\n./scripts/containers/build-rhel9.sh\n\n# Or use build args file\necho \"RHEL_USERNAME=your-username\" &gt; .build-args.rhel9\necho \"RHEL_PASSWORD=your-password\" &gt;&gt; .build-args.rhel9\n./scripts/containers/build-rhel9.sh --file .build-args.rhel9\n</code></pre>"},{"location":"tutorials/container-deployment/#container-security","title":"Container Security","text":"<ul> <li>All containers run as non-root user (UID 1001)</li> <li>Subscription credentials are not stored in final image</li> <li>Health checks validate container functionality</li> <li>Read-only volume mounts for project code</li> </ul>"},{"location":"tutorials/container-deployment/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"tutorials/container-deployment/#github-actions-example","title":"GitHub Actions Example","text":"<pre><code>name: Container Build and Test\n\non: [push, pull_request]\n\njobs:\n  test-default-container:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Build Default Container\n        run: docker build -t aider-lint-fixer:test .\n      - name: Test Container\n        run: |\n          docker run --rm -v $(pwd):/workspace:ro \\\n            aider-lint-fixer:test --version\n\n  test-rhel-container:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main'\n    steps:\n      - uses: actions/checkout@v4\n      - name: Build RHEL Container\n        env:\n          RHEL_USERNAME: ${{ secrets.RHEL_USERNAME }}\n          RHEL_PASSWORD: ${{ secrets.RHEL_PASSWORD }}\n        run: ./scripts/containers/build-rhel9.sh --validate\n</code></pre>"},{"location":"tutorials/container-deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/container-deployment/#common-issues","title":"Common Issues","text":"<p>Default Container Build Fails <pre><code># Check Docker daemon\ndocker info\n\n# Clean build cache\ndocker system prune -f\ndocker build --no-cache -t aider-lint-fixer:latest .\n</code></pre></p> <p>RHEL Subscription Issues <pre><code># Verify credentials\nsubscription-manager status\n\n# Check repository access\ndnf repolist\n</code></pre></p> <p>Container Runtime Issues <pre><code># Check container logs\ndocker logs &lt;container-id&gt;\n\n# Debug container interactively\n{{ ... }}\ndocker run -it --entrypoint /bin/bash aider-lint-fixer:latest\n</code></pre></p>"},{"location":"tutorials/container-deployment/#next-steps","title":"Next Steps","text":"<ul> <li>Container Architecture</li> <li>Configure Linters</li> <li>Production Deployment</li> </ul>"},{"location":"tutorials/getting-started-with-containers/","title":"Getting Started with Containers","text":"<p>This tutorial will guide you through using aider-lint-fixer in containerized environments, from basic Docker usage to enterprise RHEL deployments.</p>"},{"location":"tutorials/getting-started-with-containers/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Docker or Podman installed</li> <li>Git for cloning repositories</li> <li>OpenAI API key (optional, for AI features)</li> <li>Basic familiarity with containers</li> </ul>"},{"location":"tutorials/getting-started-with-containers/#quick-start-with-docker","title":"Quick Start with Docker","text":""},{"location":"tutorials/getting-started-with-containers/#1-pull-the-container-image","title":"1. Pull the Container Image","text":"<pre><code># Pull the latest default container\ndocker pull aider-lint-fixer:latest\n\n# Or for RHEL environments (customer-built)\npodman pull your-registry.redhat.com/aider-lint-fixer-rhel9:latest\n</code></pre>"},{"location":"tutorials/getting-started-with-containers/#2-run-on-your-codebase","title":"2. Run on Your Codebase","text":"<pre><code># Basic linting check\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  aider-lint-fixer:latest \\\n  aider-lint-fixer --path /workspace --check-only\n\n# Auto-fix issues\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -e OPENAI_API_KEY=$OPENAI_API_KEY \\\n  aider-lint-fixer:latest \\\n  aider-lint-fixer --path /workspace --auto-fix\n</code></pre>"},{"location":"tutorials/getting-started-with-containers/#building-custom-containers","title":"Building Custom Containers","text":""},{"location":"tutorials/getting-started-with-containers/#default-container-macosubuntu","title":"Default Container (macOS/Ubuntu)","text":"<pre><code># Clone the repository\ngit clone https://github.com/your-org/aider-lint-fixer.git\ncd aider-lint-fixer\n\n# Build the container\ndocker build -t aider-lint-fixer:custom .\n\n# Test the build\ndocker run --rm aider-lint-fixer:custom aider-lint-fixer --version\n</code></pre>"},{"location":"tutorials/getting-started-with-containers/#rhel-enterprise-containers","title":"RHEL Enterprise Containers","text":"<p>For RHEL environments, use the provided build scripts:</p> <pre><code># RHEL 9 container\n./scripts/containers/build-rhel9.sh\n\n# RHEL 10 container  \n./scripts/containers/build-rhel10.sh\n</code></pre> <p>These scripts handle: - RHEL subscription management - Version-specific ansible-core installation - Security best practices - Container registry integration</p>"},{"location":"tutorials/getting-started-with-containers/#container-configuration","title":"Container Configuration","text":""},{"location":"tutorials/getting-started-with-containers/#environment-variables","title":"Environment Variables","text":"<pre><code># Core configuration\nAIDER_LINT_CONFIG=/etc/aider-lint/config.yaml\nAIDER_LINT_PROFILE=production\n\n# AI integration\nOPENAI_API_KEY=your-api-key\nAIDER_CHAT_MODEL=gpt-4\n\n# Logging\nAIDER_LINT_LOG_LEVEL=INFO\nAIDER_LINT_LOG_FORMAT=json\n</code></pre>"},{"location":"tutorials/getting-started-with-containers/#volume-mounts","title":"Volume Mounts","text":"<pre><code># Mount your codebase\n-v $(pwd):/workspace\n\n# Mount configuration\n-v ~/.config/aider-lint-fixer:/etc/aider-lint\n\n# For RHEL with SELinux\n-v $(pwd):/workspace:Z\n</code></pre>"},{"location":"tutorials/getting-started-with-containers/#advanced-container-usage","title":"Advanced Container Usage","text":""},{"location":"tutorials/getting-started-with-containers/#docker-compose-setup","title":"Docker Compose Setup","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  aider-lint-fixer:\n    image: aider-lint-fixer:latest\n    volumes:\n      - ./:/workspace\n      - ./config:/etc/aider-lint\n    environment:\n      - AIDER_LINT_PROFILE=development\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n    command: aider-lint-fixer --path /workspace --interactive\n</code></pre> <pre><code># Run with compose\ndocker-compose run --rm aider-lint-fixer\n</code></pre>"},{"location":"tutorials/getting-started-with-containers/#batch-processing-container","title":"Batch Processing Container","text":"<pre><code># Create a batch processing script\ncat &gt; batch-lint.sh &lt;&lt; 'EOF'\n#!/bin/bash\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v ~/.config/aider-lint-fixer:/etc/aider-lint:ro \\\n  -e AIDER_LINT_PROFILE=batch \\\n  aider-lint-fixer:latest \\\n  aider-lint-fixer --path /workspace --auto-fix --report\nEOF\n\nchmod +x batch-lint.sh\n./batch-lint.sh\n</code></pre>"},{"location":"tutorials/getting-started-with-containers/#enterprise-rhel-deployment","title":"Enterprise RHEL Deployment","text":""},{"location":"tutorials/getting-started-with-containers/#customer-build-process","title":"Customer Build Process","text":"<pre><code># Set up RHEL credentials\nexport RHEL_USERNAME=\"your-username\"\nexport RHEL_PASSWORD=\"your-password\"\n\n# Build RHEL 9 container\n./scripts/containers/build-rhel9.sh \\\n  --registry your-registry.redhat.com \\\n  --tag aider-lint-fixer-rhel9:v1.0.0\n\n# Deploy to OpenShift\noc new-app your-registry.redhat.com/aider-lint-fixer-rhel9:v1.0.0\n</code></pre>"},{"location":"tutorials/getting-started-with-containers/#security-configuration","title":"Security Configuration","text":"<pre><code># Run with security constraints\npodman run --rm \\\n  --security-opt no-new-privileges \\\n  --cap-drop ALL \\\n  --user 1001:1001 \\\n  -v $(pwd):/workspace:Z \\\n  your-registry.redhat.com/aider-lint-fixer-rhel9:latest \\\n  aider-lint-fixer --path /workspace --check-only\n</code></pre>"},{"location":"tutorials/getting-started-with-containers/#verifying-container-setup","title":"Verifying Container Setup","text":""},{"location":"tutorials/getting-started-with-containers/#health-checks","title":"Health Checks","text":"<pre><code>#!/bin/bash\n# scripts/verify-container.sh\n\necho \"Testing container functionality...\"\n\n# Test basic execution\nif docker run --rm aider-lint-fixer:latest aider-lint-fixer --version; then\n    echo \"\u2713 Container executes successfully\"\nelse\n    echo \"\u2717 Container execution failed\"\n    exit 1\nfi\n\n# Test volume mounting\nif docker run --rm -v $(pwd):/workspace aider-lint-fixer:latest ls /workspace; then\n    echo \"\u2713 Volume mounting works\"\nelse\n    echo \"\u2717 Volume mounting failed\"\n    exit 1\nfi\n\necho \"Container verification complete!\"\n</code></pre>"},{"location":"tutorials/getting-started-with-containers/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Container Architecture</li> <li>Explore CI/CD Integration</li> <li>Review RHEL Container Requirements</li> <li>Check Security Best Practices</li> </ul>"},{"location":"tutorials/getting-started-with-documcp/","title":"Getting Started with documcp","text":"<p>Welcome to documcp! This tutorial will guide you through setting up and running the project for the first time.</p>"},{"location":"tutorials/getting-started-with-documcp/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Node.js (version 18 or higher)</li> <li>npm or yarn package manager</li> <li>Git for version control</li> </ul>"},{"location":"tutorials/getting-started-with-documcp/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone &lt;repository-url&gt;\ncd documcp\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>npm install\n</code></pre></p> </li> <li> <p>Set up environment variables:    <pre><code>cp .env.example .env\n</code></pre></p> </li> </ol>"},{"location":"tutorials/getting-started-with-documcp/#running-the-project","title":"Running the Project","text":"<p>Start the development server: <pre><code>npm run dev\n</code></pre></p>"},{"location":"tutorials/getting-started-with-documcp/#verifying-your-setup","title":"Verifying Your Setup","text":"<p>Run the test suite to ensure everything is working: <pre><code>npm test\n</code></pre></p>"},{"location":"tutorials/getting-started-with-documcp/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Architecture Overview</li> <li>Learn about Adding New Features</li> <li>Check the API Reference</li> </ul>"},{"location":"tutorials/getting-started/","title":"Getting Started with Aider-Lint-Fixer","text":"<p>This tutorial will guide you through installing, configuring, and running aider-lint-fixer for the first time. By the end, you'll have successfully linted and fixed code issues in a sample project.</p>"},{"location":"tutorials/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have: - Python 3.11+ installed on your system - Git for version control - OpenAI API key (optional, for AI-powered fixes) - A code project to test with (we'll provide a sample)</p>"},{"location":"tutorials/getting-started/#step-1-installation","title":"Step 1: Installation","text":""},{"location":"tutorials/getting-started/#option-a-install-via-pip-recommended","title":"Option A: Install via pip (Recommended)","text":"<pre><code>pip install aider-lint-fixer\n</code></pre>"},{"location":"tutorials/getting-started/#option-b-install-from-source","title":"Option B: Install from source","text":"<pre><code>git clone https://github.com/your-org/aider-lint-fixer.git\ncd aider-lint-fixer\npip install -e .\n</code></pre>"},{"location":"tutorials/getting-started/#verify-installation","title":"Verify Installation","text":"<pre><code>aider-lint-fixer --version\n</code></pre> <p>You should see output like: <code>aider-lint-fixer 2.0.0</code></p>"},{"location":"tutorials/getting-started/#step-2-basic-configuration","title":"Step 2: Basic Configuration","text":""},{"location":"tutorials/getting-started/#create-a-configuration-file","title":"Create a Configuration File","text":"<pre><code>mkdir -p ~/.config/aider-lint-fixer\ncat &gt; ~/.config/aider-lint-fixer/config.yaml &lt;&lt; EOF\nprofile: tutorial\nlinters:\n  python: [flake8, pylint]\n  javascript: [eslint]\nlogging:\n  level: INFO\nEOF\n</code></pre>"},{"location":"tutorials/getting-started/#set-environment-variables-optional","title":"Set Environment Variables (Optional)","text":"<pre><code># For AI-powered fixes (optional)\nexport OPENAI_API_KEY=\"your-api-key-here\"\n\n# Point to your config file\nexport AIDER_LINT_CONFIG=\"~/.config/aider-lint-fixer/config.yaml\"\n</code></pre>"},{"location":"tutorials/getting-started/#step-3-create-a-test-project","title":"Step 3: Create a Test Project","text":"<p>Let's create a simple Python project with some intentional issues:</p> <pre><code>mkdir aider-lint-tutorial\ncd aider-lint-tutorial\n\n# Create a Python file with linting issues\ncat &gt; example.py &lt;&lt; 'EOF'\nimport os\nimport sys\nimport json\n\ndef hello_world( name ):\n    print(\"Hello, \"+name+\"!\")\n    unused_var = \"this will trigger a warning\"\n    return\n\nclass MyClass:\n    def __init__(self,value):\n        self.value=value\n\n    def get_value( self ):\n        return self.value\n\nif __name__==\"__main__\":\n    hello_world(\"World\")\n    obj=MyClass(42)\n    print(obj.get_value())\nEOF\n</code></pre>"},{"location":"tutorials/getting-started/#step-4-run-your-first-lint-check","title":"Step 4: Run Your First Lint Check","text":""},{"location":"tutorials/getting-started/#check-for-issues-no-fixes","title":"Check for Issues (No Fixes)","text":"<pre><code>aider-lint-fixer --path . --check-only\n</code></pre> <p>You should see output showing various linting issues: - Missing spaces around operators - Unused imports - Unused variables - Style violations</p>"},{"location":"tutorials/getting-started/#view-detailed-results","title":"View Detailed Results","text":"<pre><code>aider-lint-fixer --path . --check-only --verbose\n</code></pre>"},{"location":"tutorials/getting-started/#step-5-auto-fix-issues","title":"Step 5: Auto-Fix Issues","text":""},{"location":"tutorials/getting-started/#fix-issues-automatically","title":"Fix Issues Automatically","text":"<pre><code>aider-lint-fixer --path . --auto-fix\n</code></pre> <p>This will: 1. Run all configured linters 2. Identify fixable issues 3. Apply automatic fixes where possible 4. Show a summary of changes</p>"},{"location":"tutorials/getting-started/#review-the-changes","title":"Review the Changes","text":"<pre><code>cat example.py\n</code></pre> <p>Notice how the code has been automatically formatted and improved!</p>"},{"location":"tutorials/getting-started/#step-6-advanced-features-optional","title":"Step 6: Advanced Features (Optional)","text":""},{"location":"tutorials/getting-started/#use-ai-powered-fixes","title":"Use AI-Powered Fixes","text":"<p>If you have an OpenAI API key configured: <pre><code>aider-lint-fixer --path . --ai-fix --interactive\n</code></pre></p> <p>This will: - Use AI to suggest more complex fixes - Allow you to review and approve changes - Handle issues that simple linters can't fix</p>"},{"location":"tutorials/getting-started/#generate-a-report","title":"Generate a Report","text":"<pre><code>aider-lint-fixer --path . --report --output-format json &gt; lint-report.json\n</code></pre>"},{"location":"tutorials/getting-started/#step-7-verification","title":"Step 7: Verification","text":"<p>Let's verify everything is working correctly:</p> <pre><code># Run a final check\naider-lint-fixer --path . --check-only\n\n# Should show minimal or no issues now\necho \"Exit code: $?\"\n</code></pre>"},{"location":"tutorials/getting-started/#summary","title":"Summary","text":"<p>In this tutorial, you learned how to: - Install aider-lint-fixer using pip or from source - Configure basic linting settings for your project - Run lint checks to identify code quality issues - Auto-fix common problems automatically - Use AI features for advanced code improvements (optional) - Generate reports for tracking code quality</p>"},{"location":"tutorials/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have aider-lint-fixer working, explore these guides:</p> <ul> <li>Configure Linters - Customize linting rules for your project</li> <li>Container Deployment - Use aider-lint-fixer in containers</li> <li>Development Environment Setup - Full development workflow</li> <li>Debug Common Issues - Troubleshooting guide</li> </ul>"},{"location":"tutorials/getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>Installation Issues: <pre><code># Upgrade pip if you encounter installation problems\npip install --upgrade pip\npip install aider-lint-fixer\n</code></pre></p> <p>Permission Errors: <pre><code># Use user installation if you don't have admin rights\npip install --user aider-lint-fixer\n</code></pre></p> <p>Configuration Not Found: <pre><code># Check if config file exists\naider-lint-fixer --check-config\n</code></pre></p> <p>Congratulations! You've successfully completed your first aider-lint-fixer workflow.</p>"},{"location":"tutorials/setting-up-your-development-environment/","title":"Setting Up Your Python Development Environment for <code>aider-lint-fixer</code>","text":"<p>This tutorial walks you through configuring a modern Python workflow that matches the toolchain used by <code>aider-lint-fixer</code>.</p>"},{"location":"tutorials/setting-up-your-development-environment/#1-install-python-via-pyenv","title":"1. Install Python via <code>pyenv</code>","text":"<p><code>aider-lint-fixer</code> targets Python 3.11+.</p> <pre><code># Install pyenv (macOS / Linux)\nbrew install pyenv            # or: curl https://pyenv.run | bash\n\n# Install and activate the required version\npyenv install 3.11.9\npyenv local 3.11.9            # writes .python-version\n</code></pre>"},{"location":"tutorials/setting-up-your-development-environment/#2-create-an-isolated-virtual-environment","title":"2. Create an isolated virtual environment","text":"<pre><code>python -m venv .venv\nsource .venv/bin/activate      # Windows: .venv\\Scripts\\activate\n</code></pre> <p>Tip: The project\u2019s <code>Makefile</code> contains convenience targets like <code>make venv</code> that automate these steps.</p>"},{"location":"tutorials/setting-up-your-development-environment/#3-install-project-dependencies","title":"3. Install project dependencies","text":"<pre><code>pip install -r requirements.txt -r requirements-test.txt\n</code></pre> <p>These files pin runtime and testing libraries (e.g., <code>aider-chat</code>, <code>ansible-lint</code>, <code>pytest</code>).</p>"},{"location":"tutorials/setting-up-your-development-environment/#4-enable-pre-commit-hooks-recommended","title":"4. Enable pre-commit hooks (recommended)","text":"<pre><code>pip install pre-commit\npre-commit install\n</code></pre> <p>Hooks automatically run linters &amp; formatters on every commit (<code>ruff</code>, <code>black</code>, <code>flake8</code>).</p>"},{"location":"tutorials/setting-up-your-development-environment/#5-recommended-vs-code-configuration","title":"5. Recommended VS Code configuration","text":"<p>Create <code>.vscode/settings.json</code>:</p> <pre><code>{\n  \"python.defaultInterpreterPath\": \"${workspaceFolder}/.venv/bin/python\",\n  \"python.testing.pytestEnabled\": true,\n  \"python.formatting.provider\": \"black\",\n  \"editor.codeActionsOnSave\": {\n    \"source.organizeImports\": \"always\"\n  }\n}\n</code></pre>"},{"location":"tutorials/setting-up-your-development-environment/#6-running-the-cli","title":"6. Running the CLI","text":"<pre><code>python -m aider_lint_fixer --help\n</code></pre>"},{"location":"tutorials/setting-up-your-development-environment/#7-running-the-test-suite","title":"7. Running the test suite","text":"<pre><code>pytest -q\n</code></pre>"},{"location":"tutorials/setting-up-your-development-environment/#next-steps","title":"Next Steps","text":"<ul> <li>Read the Architecture Overview to understand module boundaries.</li> <li>See How-to: Debug Common Issues for troubleshooting.</li> </ul>"},{"location":"tutorials/writing-and-running-tests/","title":"Writing and Running Tests for Aider-Lint-Fixer","text":"<p>Learn how to write effective tests for aider-lint-fixer using pytest and the project's testing framework.</p>"},{"location":"tutorials/writing-and-running-tests/#test-structure","title":"Test Structure","text":"<p>Tests should follow the AAA pattern: - Arrange: Set up test data and conditions - Act: Execute the code being tested - Assert: Verify the results</p>"},{"location":"tutorials/writing-and-running-tests/#setting-up-your-test-environment","title":"Setting Up Your Test Environment","text":"<pre><code># Install test dependencies\npip install -r requirements-test.txt\n\n# Verify pytest installation\npytest --version\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#writing-your-first-test","title":"Writing Your First Test","text":"<p>Create a test file with the <code>test_*.py</code> pattern:</p> <pre><code># tests/test_example.py\nimport pytest\nfrom aider_lint_fixer.linters.base import BaseLinter\n\nclass TestBaseLinter:\n    \"\"\"Test cases for the BaseLinter class.\"\"\"\n\n    def test_linter_initialization(self):\n        \"\"\"Test that linter initializes correctly.\"\"\"\n        # Arrange\n        config = {\"enabled\": True, \"severity\": \"error\"}\n\n        # Act\n        linter = BaseLinter(config)\n\n        # Assert\n        assert linter.config == config\n        assert linter.enabled is True\n\n    def test_linter_validation(self):\n        \"\"\"Test linter validation functionality.\"\"\"\n        # Arrange\n        linter = BaseLinter({\"enabled\": True})\n        test_code = \"print('hello world')\"\n\n        # Act\n        result = linter.validate_code(test_code)\n\n        # Assert\n        assert isinstance(result, dict)\n        assert \"issues\" in result\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#running-tests","title":"Running Tests","text":""},{"location":"tutorials/writing-and-running-tests/#execute-all-tests","title":"Execute All Tests","text":"<pre><code>pytest\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#run-specific-test-files","title":"Run Specific Test Files","text":"<pre><code>pytest tests/test_linters.py\npytest tests/test_aider_integration.py\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#run-tests-with-verbose-output","title":"Run Tests with Verbose Output","text":"<pre><code>pytest -v\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#run-tests-in-watch-mode","title":"Run Tests in Watch Mode","text":"<pre><code>pytest-watch\n# or\nptw\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#test-coverage","title":"Test Coverage","text":""},{"location":"tutorials/writing-and-running-tests/#generate-coverage-report","title":"Generate Coverage Report","text":"<pre><code>pytest --cov=aider_lint_fixer\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#generate-html-coverage-report","title":"Generate HTML Coverage Report","text":"<pre><code>pytest --cov=aider_lint_fixer --cov-report=html\nopen htmlcov/index.html\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#coverage-with-missing-lines","title":"Coverage with Missing Lines","text":"<pre><code>pytest --cov=aider_lint_fixer --cov-report=term-missing\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#testing-different-components","title":"Testing Different Components","text":""},{"location":"tutorials/writing-and-running-tests/#testing-linters","title":"Testing Linters","text":"<pre><code># tests/test_linters/test_python_linters.py\nimport pytest\nfrom aider_lint_fixer.linters.flake8_linter import Flake8Linter\n\nclass TestFlake8Linter:\n\n    @pytest.fixture\n    def linter(self):\n        \"\"\"Create a Flake8Linter instance for testing.\"\"\"\n        config = {\n            \"max_line_length\": 88,\n            \"ignore\": [\"E203\", \"W503\"]\n        }\n        return Flake8Linter(config)\n\n    def test_detects_style_issues(self, linter):\n        \"\"\"Test that flake8 detects style violations.\"\"\"\n        # Arrange\n        bad_code = \"x=1+2\"  # Missing spaces\n\n        # Act\n        result = linter.run(bad_code)\n\n        # Assert\n        assert len(result.issues) &gt; 0\n        assert any(\"E225\" in issue.code for issue in result.issues)\n\n    def test_fixes_style_issues(self, linter):\n        \"\"\"Test that flake8 can fix style violations.\"\"\"\n        # Arrange\n        bad_code = \"x=1+2\"\n\n        # Act\n        fixed_code = linter.fix(bad_code)\n\n        # Assert\n        assert fixed_code == \"x = 1 + 2\"\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#testing-ai-integration","title":"Testing AI Integration","text":"<pre><code># tests/test_aider_integration.py\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom aider_lint_fixer.aider_integration import AiderIntegration\n\nclass TestAiderIntegration:\n\n    @pytest.fixture\n    def aider_integration(self):\n        \"\"\"Create AiderIntegration instance for testing.\"\"\"\n        return AiderIntegration(api_key=\"test-key\")\n\n    @patch('aider_lint_fixer.aider_integration.aider_chat')\n    def test_ai_fix_success(self, mock_aider, aider_integration):\n        \"\"\"Test successful AI-powered code fix.\"\"\"\n        # Arrange\n        mock_aider.return_value.fix_code.return_value = \"fixed code\"\n        problematic_code = \"def bad_function():\\n    pass\"\n\n        # Act\n        result = aider_integration.fix_code(problematic_code)\n\n        # Assert\n        assert result.success is True\n        assert result.fixed_code == \"fixed code\"\n        mock_aider.return_value.fix_code.assert_called_once()\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#testing-configuration","title":"Testing Configuration","text":"<pre><code># tests/test_config_manager.py\nimport pytest\nimport tempfile\nimport yaml\nfrom pathlib import Path\nfrom aider_lint_fixer.config_manager import ConfigManager\n\nclass TestConfigManager:\n\n    def test_load_config_from_file(self):\n        \"\"\"Test loading configuration from YAML file.\"\"\"\n        # Arrange\n        config_data = {\n            \"profile\": \"development\",\n            \"linters\": {\"python\": [\"flake8\", \"pylint\"]}\n        }\n\n        with tempfile.NamedTemporaryFile(mode='w', suffix='.yaml', delete=False) as f:\n            yaml.dump(config_data, f)\n            config_path = f.name\n\n        # Act\n        config_manager = ConfigManager(config_path)\n\n        # Assert\n        assert config_manager.profile == \"development\"\n        assert \"flake8\" in config_manager.get_linters(\"python\")\n\n        # Cleanup\n        Path(config_path).unlink()\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#test-fixtures-and-utilities","title":"Test Fixtures and Utilities","text":""},{"location":"tutorials/writing-and-running-tests/#common-test-fixtures","title":"Common Test Fixtures","text":"<pre><code># tests/conftest.py\nimport pytest\nimport tempfile\nfrom pathlib import Path\n\n@pytest.fixture\ndef temp_python_file():\n    \"\"\"Create a temporary Python file for testing.\"\"\"\n    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:\n        f.write(\"\"\"\ndef hello_world():\n    print(\"Hello, World!\")\n\nif __name__ == \"__main__\":\n    hello_world()\n\"\"\")\n        temp_path = Path(f.name)\n\n    yield temp_path\n\n    # Cleanup\n    temp_path.unlink()\n\n@pytest.fixture\ndef sample_config():\n    \"\"\"Provide a sample configuration for testing.\"\"\"\n    return {\n        \"profile\": \"test\",\n        \"linters\": {\n            \"python\": [\"flake8\"],\n            \"javascript\": [\"eslint\"]\n        },\n        \"ai_integration\": {\n            \"enabled\": False\n        }\n    }\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#integration-tests","title":"Integration Tests","text":"<pre><code># tests/test_integration.py\nimport pytest\nimport subprocess\nfrom pathlib import Path\n\nclass TestCLIIntegration:\n    \"\"\"Integration tests for the CLI interface.\"\"\"\n\n    def test_cli_help_command(self):\n        \"\"\"Test that CLI help command works.\"\"\"\n        # Act\n        result = subprocess.run(\n            [\"python\", \"-m\", \"aider_lint_fixer\", \"--help\"],\n            capture_output=True,\n            text=True\n        )\n\n        # Assert\n        assert result.returncode == 0\n        assert \"aider-lint-fixer\" in result.stdout\n\n    def test_cli_version_command(self):\n        \"\"\"Test that CLI version command works.\"\"\"\n        # Act\n        result = subprocess.run(\n            [\"python\", \"-m\", \"aider_lint_fixer\", \"--version\"],\n            capture_output=True,\n            text=True\n        )\n\n        # Assert\n        assert result.returncode == 0\n        assert \"aider-lint-fixer\" in result.stdout\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#performance-tests","title":"Performance Tests","text":"<pre><code># tests/test_performance.py\nimport pytest\nimport time\nfrom aider_lint_fixer.lint_runner import LintRunner\n\nclass TestPerformance:\n    \"\"\"Performance tests for aider-lint-fixer.\"\"\"\n\n    @pytest.mark.performance\n    def test_large_file_processing_time(self):\n        \"\"\"Test processing time for large files.\"\"\"\n        # Arrange\n        large_code = \"print('hello')\\n\" * 1000\n        runner = LintRunner()\n\n        # Act\n        start_time = time.time()\n        result = runner.run_linters(large_code, language=\"python\")\n        end_time = time.time()\n\n        # Assert\n        processing_time = end_time - start_time\n        assert processing_time &lt; 5.0  # Should complete in under 5 seconds\n        assert result is not None\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#running-specific-test-categories","title":"Running Specific Test Categories","text":"<pre><code># Run only unit tests\npytest tests/unit/\n\n# Run only integration tests\npytest tests/integration/\n\n# Run performance tests\npytest -m performance\n\n# Skip slow tests\npytest -m \"not slow\"\n\n# Run tests matching a pattern\npytest -k \"test_linter\"\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#continuous-integration-testing","title":"Continuous Integration Testing","text":"<pre><code># .github/workflows/test.yml\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.11, 3.12]\n\n    steps:\n    - uses: actions/checkout@v4\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        pip install -r requirements.txt -r requirements-test.txt\n\n    - name: Run tests with coverage\n      run: |\n        pytest --cov=aider_lint_fixer --cov-report=xml\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n</code></pre>"},{"location":"tutorials/writing-and-running-tests/#best-practices","title":"Best Practices","text":"<ol> <li>Test behavior, not implementation: Focus on what the code does, not how it does it</li> <li>Use descriptive test names: Test names should explain the scenario being tested</li> <li>Keep tests independent: Each test should be able to run in isolation</li> <li>Use fixtures for common setup: Reduce code duplication with pytest fixtures</li> <li>Mock external dependencies: Use <code>unittest.mock</code> for API calls and file operations</li> <li>Test edge cases: Include tests for error conditions and boundary values</li> <li>Maintain good coverage: Aim for 80%+ test coverage on critical code paths</li> </ol>"},{"location":"tutorials/writing-and-running-tests/#debugging-tests","title":"Debugging Tests","text":"<pre><code># Run tests with debugging output\npytest -s -v\n\n# Drop into debugger on failure\npytest --pdb\n\n# Run a specific test with debugging\npytest tests/test_linters.py::TestFlake8Linter::test_detects_style_issues -s -v\n</code></pre>"}]}