# Production Container for aider-lint-fixer
# Multi-stage build for minimal production image
# Usage: docker build -f scripts/containers/Dockerfile.prod -t aider-lint-fixer:latest .

# Build stage
FROM python:3.11-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create build directory
WORKDIR /build

# Copy dependency files
COPY requirements.txt pyproject.toml setup.py ./
COPY aider_lint_fixer/ ./aider_lint_fixer/

# Install Python dependencies
RUN pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --no-cache-dir -r requirements.txt

# Install Python linters
RUN pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --no-cache-dir \
    flake8==7.3.0 \
    pylint==3.3.7

# Install multiple ansible-lint versions in separate virtual environments
# Latest version (Technology Preview - compatible versions)
RUN python3 -m venv /opt/venv-latest && \
    /opt/venv-latest/bin/pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --no-cache-dir --upgrade pip && \
    /opt/venv-latest/bin/pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --no-cache-dir \
        ansible-lint==25.6.1 \
        ansible-core>=2.16.11 \
        ansible>=10.0.0

# Enterprise/RHEL 9 compatible version
RUN python3 -m venv /opt/venv-enterprise && \
    /opt/venv-enterprise/bin/pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --no-cache-dir --upgrade pip && \
    /opt/venv-enterprise/bin/pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --no-cache-dir \
        ansible-lint==6.22.2 \
        ansible-core==2.15.13 \
        ansible==8.7.0

# RHEL 10 compatible version (latest ansible-core supported on RHEL 10)
RUN python3 -m venv /opt/venv-rhel10 && \
    /opt/venv-rhel10/bin/pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --no-cache-dir --upgrade pip && \
    /opt/venv-rhel10/bin/pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --no-cache-dir \
        ansible-lint==24.12.2 \
        ansible-core==2.16.14 \
        ansible==9.13.0

# Install aider-chat
RUN pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --no-cache-dir "aider-chat>=0.85.0"

# Install the package
RUN pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --no-cache-dir .

# Production stage
FROM python:3.11-slim

# Metadata
LABEL name="aider-lint-fixer" \
      version="2.0.0" \
      description="AI-powered lint error detection and fixing" \
      maintainer="Aider Lint Fixer Team <tosin@decisioncrafters.com>" \
      vendor="aider-lint-fixer" \
      summary="Production container for aider-lint-fixer"

# Install basic runtime dependencies  
RUN apt-get update && apt-get install -y \
    git \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r aider && useradd -r -g aider -d /app -s /bin/bash aider

# Create application directory
WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages/ /usr/local/lib/python3.11/site-packages/
COPY --from=builder /usr/local/bin/ /usr/local/bin/

# Copy virtual environments for ansible-lint versions
COPY --from=builder /opt/venv-latest /opt/venv-latest
COPY --from=builder /opt/venv-enterprise /opt/venv-enterprise  
COPY --from=builder /opt/venv-rhel10 /opt/venv-rhel10

# Install Node.js and npm in production stage (simpler approach)
RUN apt-get update && apt-get install -y \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js linters in production stage
RUN npm config set strict-ssl false && \
    npm install -g \
    eslint@8.57.1 \
    jshint@2.13.6 \
    prettier@3.6.2 \
    && npm cache clean --force

# Create cache directory for learning features
RUN mkdir -p /app/.aider-lint-cache && chown aider:aider /app/.aider-lint-cache

# Create ansible directories for non-root user
RUN mkdir -p /app/.ansible /app/.ansible/tmp && chown -R aider:aider /app/.ansible

# Create writable temp directories for ansible
RUN mkdir -p /tmp/ansible-local /tmp/ansible-galaxy-cache && \
    chown aider:aider /tmp/ansible-local /tmp/ansible-galaxy-cache

# Switch to non-root user
USER aider

# Set environment variables
ENV PYTHONPATH=/app
ENV PATH="/usr/local/bin:$PATH"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Default environment variables (can be overridden)
ENV AIDER_LINT_FIXER_NO_BANNER=false
ENV AIDER_LINT_FIXER_LOG_LEVEL=INFO
ENV AIDER_LINT_FIXER_MAX_FILES=10
ENV AIDER_LINT_FIXER_MAX_ERRORS=5

# Ansible configuration for non-root user
ENV ANSIBLE_LOCAL_TEMP=/tmp/ansible-local
ENV ANSIBLE_REMOTE_TEMP=/tmp/ansible-local
ENV ANSIBLE_GALAXY_CACHE_DIR=/tmp/ansible-galaxy-cache
ENV ANSIBLE_LOG_PATH=/tmp/ansible.log

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -m aider_lint_fixer --version || exit 1

# Volume for project code
VOLUME ["/workspace"]

# Working directory for mounted code
WORKDIR /workspace

# Entry point script and ansible version selector
COPY --chown=aider:aider scripts/containers/docker-entrypoint.sh /usr/local/bin/
COPY --chown=aider:aider scripts/containers/select-ansible-version.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh /usr/local/bin/select-ansible-version.sh

ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
CMD ["--help"]